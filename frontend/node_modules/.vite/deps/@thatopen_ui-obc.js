import {
  Ai,
  Bn,
  Ci,
  Fr,
  On,
  Ri,
  _n,
  dn,
  ke,
  na,
  sa,
  ut
} from "./chunk-QA7KRUEX.js";
import {
  Uf,
  xa,
  xc
} from "./chunk-AAS7UYGI.js";
import {
  IFCCLASSIFICATIONREFERENCE,
  IFCELEMENTQUANTITY,
  IFCMATERIAL,
  IFCMATERIALLAYER,
  IFCMATERIALLAYERSET,
  IFCMATERIALLAYERSETUSAGE,
  IFCMATERIALLIST,
  IFCPROJECT,
  IFCPROPERTYSET,
  IFCTASK,
  REF
} from "./chunk-YPVOWTNN.js";
import {
  AmbientLight,
  BufferAttribute,
  BufferGeometry,
  Color,
  DirectionalLight,
  Frustum,
  Group,
  Light,
  LineBasicMaterial,
  LineSegments,
  Matrix4,
  Object3D,
  PerspectiveCamera,
  Vector2,
  Vector3
} from "./chunk-D5NTCM2J.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/@thatopen/ui-obc/dist/index.js
var mr = Object.defineProperty;
var br = (i, t, e) => t in i ? mr(i, t, { enumerable: true, configurable: true, writable: true, value: e }) : i[t] = e;
var Rt = (i, t, e) => (br(i, typeof t != "symbol" ? t + "" : t, e), e);
var Jt = Math.min;
var ut2 = Math.max;
var ni = Math.round;
var wt = (i) => ({
  x: i,
  y: i
});
var gr = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var vr = {
  start: "end",
  end: "start"
};
function kn(i, t, e) {
  return ut2(i, Jt(t, e));
}
function Le(i, t) {
  return typeof i == "function" ? i(t) : i;
}
function ht(i) {
  return i.split("-")[0];
}
function mi(i) {
  return i.split("-")[1];
}
function Es(i) {
  return i === "x" ? "y" : "x";
}
function As(i) {
  return i === "y" ? "height" : "width";
}
function Dt(i) {
  return ["top", "bottom"].includes(ht(i)) ? "y" : "x";
}
function Ss(i) {
  return Es(Dt(i));
}
function yr(i, t, e) {
  e === void 0 && (e = false);
  const s = mi(i), n = Ss(i), o = As(n);
  let r = n === "x" ? s === (e ? "end" : "start") ? "right" : "left" : s === "start" ? "bottom" : "top";
  return t.reference[o] > t.floating[o] && (r = si(r)), [r, si(r)];
}
function _r(i) {
  const t = si(i);
  return [Ui(i), t, Ui(t)];
}
function Ui(i) {
  return i.replace(/start|end/g, (t) => vr[t]);
}
function xr(i, t, e) {
  const s = ["left", "right"], n = ["right", "left"], o = ["top", "bottom"], r = ["bottom", "top"];
  switch (i) {
    case "top":
    case "bottom":
      return e ? t ? n : s : t ? s : n;
    case "left":
    case "right":
      return t ? o : r;
    default:
      return [];
  }
}
function wr(i, t, e, s) {
  const n = mi(i);
  let o = xr(ht(i), e === "start", s);
  return n && (o = o.map((r) => r + "-" + n), t && (o = o.concat(o.map(Ui)))), o;
}
function si(i) {
  return i.replace(/left|right|bottom|top/g, (t) => gr[t]);
}
function $r(i) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...i
  };
}
function ks(i) {
  return typeof i != "number" ? $r(i) : {
    top: i,
    right: i,
    bottom: i,
    left: i
  };
}
function Qt(i) {
  const {
    x: t,
    y: e,
    width: s,
    height: n
  } = i;
  return {
    width: s,
    height: n,
    top: e,
    left: t,
    right: t + s,
    bottom: e + n,
    x: t,
    y: e
  };
}
function On2(i, t, e) {
  let {
    reference: s,
    floating: n
  } = i;
  const o = Dt(t), r = Ss(t), a = As(r), l = ht(t), d = o === "y", u = s.x + s.width / 2 - n.width / 2, h = s.y + s.height / 2 - n.height / 2, c = s[a] / 2 - n[a] / 2;
  let p;
  switch (l) {
    case "top":
      p = {
        x: u,
        y: s.y - n.height
      };
      break;
    case "bottom":
      p = {
        x: u,
        y: s.y + s.height
      };
      break;
    case "right":
      p = {
        x: s.x + s.width,
        y: h
      };
      break;
    case "left":
      p = {
        x: s.x - n.width,
        y: h
      };
      break;
    default:
      p = {
        x: s.x,
        y: s.y
      };
  }
  switch (mi(t)) {
    case "start":
      p[r] -= c * (e && d ? -1 : 1);
      break;
    case "end":
      p[r] += c * (e && d ? -1 : 1);
      break;
  }
  return p;
}
var Cr = async (i, t, e) => {
  const {
    placement: s = "bottom",
    strategy: n = "absolute",
    middleware: o = [],
    platform: r
  } = e, a = o.filter(Boolean), l = await (r.isRTL == null ? void 0 : r.isRTL(t));
  let d = await r.getElementRects({
    reference: i,
    floating: t,
    strategy: n
  }), {
    x: u,
    y: h
  } = On2(d, s, l), c = s, p = {}, b = 0;
  for (let v = 0; v < a.length; v++) {
    const {
      name: x,
      fn: w
    } = a[v], {
      x: m,
      y: g,
      data: _,
      reset: $
    } = await w({
      x: u,
      y: h,
      initialPlacement: s,
      placement: c,
      strategy: n,
      middlewareData: p,
      rects: d,
      platform: r,
      elements: {
        reference: i,
        floating: t
      }
    });
    u = m ?? u, h = g ?? h, p = {
      ...p,
      [x]: {
        ...p[x],
        ..._
      }
    }, $ && b <= 50 && (b++, typeof $ == "object" && ($.placement && (c = $.placement), $.rects && (d = $.rects === true ? await r.getElementRects({
      reference: i,
      floating: t,
      strategy: n
    }) : $.rects), {
      x: u,
      y: h
    } = On2(d, c, l)), v = -1);
  }
  return {
    x: u,
    y: h,
    placement: c,
    strategy: n,
    middlewareData: p
  };
};
async function an(i, t) {
  var e;
  t === void 0 && (t = {});
  const {
    x: s,
    y: n,
    platform: o,
    rects: r,
    elements: a,
    strategy: l
  } = i, {
    boundary: d = "clippingAncestors",
    rootBoundary: u = "viewport",
    elementContext: h = "floating",
    altBoundary: c = false,
    padding: p = 0
  } = Le(t, i), b = ks(p), v = a[c ? h === "floating" ? "reference" : "floating" : h], x = Qt(await o.getClippingRect({
    element: (e = await (o.isElement == null ? void 0 : o.isElement(v))) == null || e ? v : v.contextElement || await (o.getDocumentElement == null ? void 0 : o.getDocumentElement(a.floating)),
    boundary: d,
    rootBoundary: u,
    strategy: l
  })), w = h === "floating" ? {
    x: s,
    y: n,
    width: r.floating.width,
    height: r.floating.height
  } : r.reference, m = await (o.getOffsetParent == null ? void 0 : o.getOffsetParent(a.floating)), g = await (o.isElement == null ? void 0 : o.isElement(m)) ? await (o.getScale == null ? void 0 : o.getScale(m)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  }, _ = Qt(o.convertOffsetParentRelativeRectToViewportRelativeRect ? await o.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements: a,
    rect: w,
    offsetParent: m,
    strategy: l
  }) : w);
  return {
    top: (x.top - _.top + b.top) / g.y,
    bottom: (_.bottom - x.bottom + b.bottom) / g.y,
    left: (x.left - _.left + b.left) / g.x,
    right: (_.right - x.right + b.right) / g.x
  };
}
var Er = function(i) {
  return i === void 0 && (i = {}), {
    name: "flip",
    options: i,
    async fn(t) {
      var e, s;
      const {
        placement: n,
        middlewareData: o,
        rects: r,
        initialPlacement: a,
        platform: l,
        elements: d
      } = t, {
        mainAxis: u = true,
        crossAxis: h = true,
        fallbackPlacements: c,
        fallbackStrategy: p = "bestFit",
        fallbackAxisSideDirection: b = "none",
        flipAlignment: v = true,
        ...x
      } = Le(i, t);
      if ((e = o.arrow) != null && e.alignmentOffset)
        return {};
      const w = ht(n), m = Dt(a), g = ht(a) === a, _ = await (l.isRTL == null ? void 0 : l.isRTL(d.floating)), $ = c || (g || !v ? [si(a)] : _r(a)), C = b !== "none";
      !c && C && $.push(...wr(a, v, b, _));
      const A = [a, ...$], O = await an(t, x), L = [];
      let E = ((s = o.flip) == null ? void 0 : s.overflows) || [];
      if (u && L.push(O[w]), h) {
        const z = yr(n, r, _);
        L.push(O[z[0]], O[z[1]]);
      }
      if (E = [...E, {
        placement: n,
        overflows: L
      }], !L.every((z) => z <= 0)) {
        var q, lt;
        const z = (((q = o.flip) == null ? void 0 : q.index) || 0) + 1, mt = A[z];
        if (mt)
          return {
            data: {
              index: z,
              overflows: E
            },
            reset: {
              placement: mt
            }
          };
        let B = (lt = E.filter((et) => et.overflows[0] <= 0).sort((et, Y) => et.overflows[1] - Y.overflows[1])[0]) == null ? void 0 : lt.placement;
        if (!B)
          switch (p) {
            case "bestFit": {
              var tt;
              const et = (tt = E.filter((Y) => {
                if (C) {
                  const ot = Dt(Y.placement);
                  return ot === m || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  ot === "y";
                }
                return true;
              }).map((Y) => [Y.placement, Y.overflows.filter((ot) => ot > 0).reduce((ot, ki) => ot + ki, 0)]).sort((Y, ot) => Y[1] - ot[1])[0]) == null ? void 0 : tt[0];
              et && (B = et);
              break;
            }
            case "initialPlacement":
              B = a;
              break;
          }
        if (n !== B)
          return {
            reset: {
              placement: B
            }
          };
      }
      return {};
    }
  };
};
function Os(i) {
  const t = Jt(...i.map((o) => o.left)), e = Jt(...i.map((o) => o.top)), s = ut2(...i.map((o) => o.right)), n = ut2(...i.map((o) => o.bottom));
  return {
    x: t,
    y: e,
    width: s - t,
    height: n - e
  };
}
function Ar(i) {
  const t = i.slice().sort((n, o) => n.y - o.y), e = [];
  let s = null;
  for (let n = 0; n < t.length; n++) {
    const o = t[n];
    !s || o.y - s.y > s.height / 2 ? e.push([o]) : e[e.length - 1].push(o), s = o;
  }
  return e.map((n) => Qt(Os(n)));
}
var Sr = function(i) {
  return i === void 0 && (i = {}), {
    name: "inline",
    options: i,
    async fn(t) {
      const {
        placement: e,
        elements: s,
        rects: n,
        platform: o,
        strategy: r
      } = t, {
        padding: a = 2,
        x: l,
        y: d
      } = Le(i, t), u = Array.from(await (o.getClientRects == null ? void 0 : o.getClientRects(s.reference)) || []), h = Ar(u), c = Qt(Os(u)), p = ks(a);
      function b() {
        if (h.length === 2 && h[0].left > h[1].right && l != null && d != null)
          return h.find((x) => l > x.left - p.left && l < x.right + p.right && d > x.top - p.top && d < x.bottom + p.bottom) || c;
        if (h.length >= 2) {
          if (Dt(e) === "y") {
            const E = h[0], q = h[h.length - 1], lt = ht(e) === "top", tt = E.top, z = q.bottom, mt = lt ? E.left : q.left, B = lt ? E.right : q.right, et = B - mt, Y = z - tt;
            return {
              top: tt,
              bottom: z,
              left: mt,
              right: B,
              width: et,
              height: Y,
              x: mt,
              y: tt
            };
          }
          const x = ht(e) === "left", w = ut2(...h.map((E) => E.right)), m = Jt(...h.map((E) => E.left)), g = h.filter((E) => x ? E.left === m : E.right === w), _ = g[0].top, $ = g[g.length - 1].bottom, C = m, A = w, O = A - C, L = $ - _;
          return {
            top: _,
            bottom: $,
            left: C,
            right: A,
            width: O,
            height: L,
            x: C,
            y: _
          };
        }
        return c;
      }
      const v = await o.getElementRects({
        reference: {
          getBoundingClientRect: b
        },
        floating: s.floating,
        strategy: r
      });
      return n.reference.x !== v.reference.x || n.reference.y !== v.reference.y || n.reference.width !== v.reference.width || n.reference.height !== v.reference.height ? {
        reset: {
          rects: v
        }
      } : {};
    }
  };
};
async function kr(i, t) {
  const {
    placement: e,
    platform: s,
    elements: n
  } = i, o = await (s.isRTL == null ? void 0 : s.isRTL(n.floating)), r = ht(e), a = mi(e), l = Dt(e) === "y", d = ["left", "top"].includes(r) ? -1 : 1, u = o && l ? -1 : 1, h = Le(t, i);
  let {
    mainAxis: c,
    crossAxis: p,
    alignmentAxis: b
  } = typeof h == "number" ? {
    mainAxis: h,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...h
  };
  return a && typeof b == "number" && (p = a === "end" ? b * -1 : b), l ? {
    x: p * u,
    y: c * d
  } : {
    x: c * d,
    y: p * u
  };
}
var Is = function(i) {
  return {
    name: "offset",
    options: i,
    async fn(t) {
      var e, s;
      const {
        x: n,
        y: o,
        placement: r,
        middlewareData: a
      } = t, l = await kr(t, i);
      return r === ((e = a.offset) == null ? void 0 : e.placement) && (s = a.arrow) != null && s.alignmentOffset ? {} : {
        x: n + l.x,
        y: o + l.y,
        data: {
          ...l,
          placement: r
        }
      };
    }
  };
};
var Or = function(i) {
  return i === void 0 && (i = {}), {
    name: "shift",
    options: i,
    async fn(t) {
      const {
        x: e,
        y: s,
        placement: n
      } = t, {
        mainAxis: o = true,
        crossAxis: r = false,
        limiter: a = {
          fn: (x) => {
            let {
              x: w,
              y: m
            } = x;
            return {
              x: w,
              y: m
            };
          }
        },
        ...l
      } = Le(i, t), d = {
        x: e,
        y: s
      }, u = await an(t, l), h = Dt(ht(n)), c = Es(h);
      let p = d[c], b = d[h];
      if (o) {
        const x = c === "y" ? "top" : "left", w = c === "y" ? "bottom" : "right", m = p + u[x], g = p - u[w];
        p = kn(m, p, g);
      }
      if (r) {
        const x = h === "y" ? "top" : "left", w = h === "y" ? "bottom" : "right", m = b + u[x], g = b - u[w];
        b = kn(m, b, g);
      }
      const v = a.fn({
        ...t,
        [c]: p,
        [h]: b
      });
      return {
        ...v,
        data: {
          x: v.x - e,
          y: v.y - s
        }
      };
    }
  };
};
function $t(i) {
  return Ts(i) ? (i.nodeName || "").toLowerCase() : "#document";
}
function V(i) {
  var t;
  return (i == null || (t = i.ownerDocument) == null ? void 0 : t.defaultView) || window;
}
function At(i) {
  var t;
  return (t = (Ts(i) ? i.ownerDocument : i.document) || window.document) == null ? void 0 : t.documentElement;
}
function Ts(i) {
  return i instanceof Node || i instanceof V(i).Node;
}
function rt(i) {
  return i instanceof Element || i instanceof V(i).Element;
}
function at(i) {
  return i instanceof HTMLElement || i instanceof V(i).HTMLElement;
}
function In(i) {
  return typeof ShadowRoot > "u" ? false : i instanceof ShadowRoot || i instanceof V(i).ShadowRoot;
}
function ze(i) {
  const {
    overflow: t,
    overflowX: e,
    overflowY: s,
    display: n
  } = J(i);
  return /auto|scroll|overlay|hidden|clip/.test(t + s + e) && !["inline", "contents"].includes(n);
}
function Ir(i) {
  return ["table", "td", "th"].includes($t(i));
}
function Tr(i) {
  return [":popover-open", ":modal"].some((t) => {
    try {
      return i.matches(t);
    } catch {
      return false;
    }
  });
}
function ln(i) {
  const t = cn(), e = rt(i) ? J(i) : i;
  return e.transform !== "none" || e.perspective !== "none" || (e.containerType ? e.containerType !== "normal" : false) || !t && (e.backdropFilter ? e.backdropFilter !== "none" : false) || !t && (e.filter ? e.filter !== "none" : false) || ["transform", "perspective", "filter"].some((s) => (e.willChange || "").includes(s)) || ["paint", "layout", "strict", "content"].some((s) => (e.contain || "").includes(s));
}
function Rr(i) {
  let t = Zt(i);
  for (; at(t) && !bi(t); ) {
    if (ln(t))
      return t;
    if (Tr(t))
      return null;
    t = Zt(t);
  }
  return null;
}
function cn() {
  return typeof CSS > "u" || !CSS.supports ? false : CSS.supports("-webkit-backdrop-filter", "none");
}
function bi(i) {
  return ["html", "body", "#document"].includes($t(i));
}
function J(i) {
  return V(i).getComputedStyle(i);
}
function gi(i) {
  return rt(i) ? {
    scrollLeft: i.scrollLeft,
    scrollTop: i.scrollTop
  } : {
    scrollLeft: i.scrollX,
    scrollTop: i.scrollY
  };
}
function Zt(i) {
  if ($t(i) === "html")
    return i;
  const t = (
    // Step into the shadow DOM of the parent of a slotted node.
    i.assignedSlot || // DOM Element detected.
    i.parentNode || // ShadowRoot detected.
    In(i) && i.host || // Fallback.
    At(i)
  );
  return In(t) ? t.host : t;
}
function Rs(i) {
  const t = Zt(i);
  return bi(t) ? i.ownerDocument ? i.ownerDocument.body : i.body : at(t) && ze(t) ? t : Rs(t);
}
function Vi(i, t, e) {
  var s;
  t === void 0 && (t = []), e === void 0 && (e = true);
  const n = Rs(i), o = n === ((s = i.ownerDocument) == null ? void 0 : s.body), r = V(n);
  if (o) {
    const a = Pr(r);
    return t.concat(r, r.visualViewport || [], ze(n) ? n : [], a && e ? Vi(a) : []);
  }
  return t.concat(n, Vi(n, [], e));
}
function Pr(i) {
  return i.parent && Object.getPrototypeOf(i.parent) ? i.frameElement : null;
}
function Ps(i) {
  const t = J(i);
  let e = parseFloat(t.width) || 0, s = parseFloat(t.height) || 0;
  const n = at(i), o = n ? i.offsetWidth : e, r = n ? i.offsetHeight : s, a = ni(e) !== o || ni(s) !== r;
  return a && (e = o, s = r), {
    width: e,
    height: s,
    $: a
  };
}
function Ns(i) {
  return rt(i) ? i : i.contextElement;
}
function qt(i) {
  const t = Ns(i);
  if (!at(t))
    return wt(1);
  const e = t.getBoundingClientRect(), {
    width: s,
    height: n,
    $: o
  } = Ps(t);
  let r = (o ? ni(e.width) : e.width) / s, a = (o ? ni(e.height) : e.height) / n;
  return (!r || !Number.isFinite(r)) && (r = 1), (!a || !Number.isFinite(a)) && (a = 1), {
    x: r,
    y: a
  };
}
var Nr = wt(0);
function Ms(i) {
  const t = V(i);
  return !cn() || !t.visualViewport ? Nr : {
    x: t.visualViewport.offsetLeft,
    y: t.visualViewport.offsetTop
  };
}
function Mr(i, t, e) {
  return t === void 0 && (t = false), !e || t && e !== V(i) ? false : t;
}
function Ae(i, t, e, s) {
  t === void 0 && (t = false), e === void 0 && (e = false);
  const n = i.getBoundingClientRect(), o = Ns(i);
  let r = wt(1);
  t && (s ? rt(s) && (r = qt(s)) : r = qt(i));
  const a = Mr(o, e, s) ? Ms(o) : wt(0);
  let l = (n.left + a.x) / r.x, d = (n.top + a.y) / r.y, u = n.width / r.x, h = n.height / r.y;
  if (o) {
    const c = V(o), p = s && rt(s) ? V(s) : s;
    let b = c, v = b.frameElement;
    for (; v && s && p !== b; ) {
      const x = qt(v), w = v.getBoundingClientRect(), m = J(v), g = w.left + (v.clientLeft + parseFloat(m.paddingLeft)) * x.x, _ = w.top + (v.clientTop + parseFloat(m.paddingTop)) * x.y;
      l *= x.x, d *= x.y, u *= x.x, h *= x.y, l += g, d += _, b = V(v), v = b.frameElement;
    }
  }
  return Qt({
    width: u,
    height: h,
    x: l,
    y: d
  });
}
var Lr = [":popover-open", ":modal"];
function Ls(i) {
  return Lr.some((t) => {
    try {
      return i.matches(t);
    } catch {
      return false;
    }
  });
}
function zr(i) {
  let {
    elements: t,
    rect: e,
    offsetParent: s,
    strategy: n
  } = i;
  const o = n === "fixed", r = At(s), a = t ? Ls(t.floating) : false;
  if (s === r || a && o)
    return e;
  let l = {
    scrollLeft: 0,
    scrollTop: 0
  }, d = wt(1);
  const u = wt(0), h = at(s);
  if ((h || !h && !o) && (($t(s) !== "body" || ze(r)) && (l = gi(s)), at(s))) {
    const c = Ae(s);
    d = qt(s), u.x = c.x + s.clientLeft, u.y = c.y + s.clientTop;
  }
  return {
    width: e.width * d.x,
    height: e.height * d.y,
    x: e.x * d.x - l.scrollLeft * d.x + u.x,
    y: e.y * d.y - l.scrollTop * d.y + u.y
  };
}
function Dr(i) {
  return Array.from(i.getClientRects());
}
function zs(i) {
  return Ae(At(i)).left + gi(i).scrollLeft;
}
function jr(i) {
  const t = At(i), e = gi(i), s = i.ownerDocument.body, n = ut2(t.scrollWidth, t.clientWidth, s.scrollWidth, s.clientWidth), o = ut2(t.scrollHeight, t.clientHeight, s.scrollHeight, s.clientHeight);
  let r = -e.scrollLeft + zs(i);
  const a = -e.scrollTop;
  return J(s).direction === "rtl" && (r += ut2(t.clientWidth, s.clientWidth) - n), {
    width: n,
    height: o,
    x: r,
    y: a
  };
}
function Hr(i, t) {
  const e = V(i), s = At(i), n = e.visualViewport;
  let o = s.clientWidth, r = s.clientHeight, a = 0, l = 0;
  if (n) {
    o = n.width, r = n.height;
    const d = cn();
    (!d || d && t === "fixed") && (a = n.offsetLeft, l = n.offsetTop);
  }
  return {
    width: o,
    height: r,
    x: a,
    y: l
  };
}
function Br(i, t) {
  const e = Ae(i, true, t === "fixed"), s = e.top + i.clientTop, n = e.left + i.clientLeft, o = at(i) ? qt(i) : wt(1), r = i.clientWidth * o.x, a = i.clientHeight * o.y, l = n * o.x, d = s * o.y;
  return {
    width: r,
    height: a,
    x: l,
    y: d
  };
}
function Tn(i, t, e) {
  let s;
  if (t === "viewport")
    s = Hr(i, e);
  else if (t === "document")
    s = jr(At(i));
  else if (rt(t))
    s = Br(t, e);
  else {
    const n = Ms(i);
    s = {
      ...t,
      x: t.x - n.x,
      y: t.y - n.y
    };
  }
  return Qt(s);
}
function Ds(i, t) {
  const e = Zt(i);
  return e === t || !rt(e) || bi(e) ? false : J(e).position === "fixed" || Ds(e, t);
}
function Fr2(i, t) {
  const e = t.get(i);
  if (e)
    return e;
  let s = Vi(i, [], false).filter((a) => rt(a) && $t(a) !== "body"), n = null;
  const o = J(i).position === "fixed";
  let r = o ? Zt(i) : i;
  for (; rt(r) && !bi(r); ) {
    const a = J(r), l = ln(r);
    !l && a.position === "fixed" && (n = null), (o ? !l && !n : !l && a.position === "static" && n && ["absolute", "fixed"].includes(n.position) || ze(r) && !l && Ds(i, r)) ? s = s.filter((d) => d !== r) : n = a, r = Zt(r);
  }
  return t.set(i, s), s;
}
function Ur(i) {
  let {
    element: t,
    boundary: e,
    rootBoundary: s,
    strategy: n
  } = i;
  const o = [...e === "clippingAncestors" ? Fr2(t, this._c) : [].concat(e), s], r = o[0], a = o.reduce((l, d) => {
    const u = Tn(t, d, n);
    return l.top = ut2(u.top, l.top), l.right = Jt(u.right, l.right), l.bottom = Jt(u.bottom, l.bottom), l.left = ut2(u.left, l.left), l;
  }, Tn(t, r, n));
  return {
    width: a.right - a.left,
    height: a.bottom - a.top,
    x: a.left,
    y: a.top
  };
}
function Vr(i) {
  const {
    width: t,
    height: e
  } = Ps(i);
  return {
    width: t,
    height: e
  };
}
function Wr(i, t, e) {
  const s = at(t), n = At(t), o = e === "fixed", r = Ae(i, true, o, t);
  let a = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const l = wt(0);
  if (s || !s && !o)
    if (($t(t) !== "body" || ze(n)) && (a = gi(t)), s) {
      const h = Ae(t, true, o, t);
      l.x = h.x + t.clientLeft, l.y = h.y + t.clientTop;
    } else
      n && (l.x = zs(n));
  const d = r.left + a.scrollLeft - l.x, u = r.top + a.scrollTop - l.y;
  return {
    x: d,
    y: u,
    width: r.width,
    height: r.height
  };
}
function Rn(i, t) {
  return !at(i) || J(i).position === "fixed" ? null : t ? t(i) : i.offsetParent;
}
function js(i, t) {
  const e = V(i);
  if (!at(i) || Ls(i))
    return e;
  let s = Rn(i, t);
  for (; s && Ir(s) && J(s).position === "static"; )
    s = Rn(s, t);
  return s && ($t(s) === "html" || $t(s) === "body" && J(s).position === "static" && !ln(s)) ? e : s || Rr(i) || e;
}
var Gr = async function(i) {
  const t = this.getOffsetParent || js, e = this.getDimensions;
  return {
    reference: Wr(i.reference, await t(i.floating), i.strategy),
    floating: {
      x: 0,
      y: 0,
      ...await e(i.floating)
    }
  };
};
function qr(i) {
  return J(i).direction === "rtl";
}
var Yr = {
  convertOffsetParentRelativeRectToViewportRelativeRect: zr,
  getDocumentElement: At,
  getClippingRect: Ur,
  getOffsetParent: js,
  getElementRects: Gr,
  getClientRects: Dr,
  getDimensions: Vr,
  getScale: qt,
  isElement: rt,
  isRTL: qr
};
var Hs = Or;
var Bs = Er;
var Fs = Sr;
var Us = (i, t, e) => {
  const s = /* @__PURE__ */ new Map(), n = {
    platform: Yr,
    ...e
  }, o = {
    ...n.platform,
    _c: s
  };
  return Cr(i, t, {
    ...n,
    platform: o
  });
};
var Ke = globalThis;
var dn2 = Ke.ShadowRoot && (Ke.ShadyCSS === void 0 || Ke.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var un = Symbol();
var Pn = /* @__PURE__ */ new WeakMap();
var Vs = class {
  constructor(i, t, e) {
    if (this._$cssResult$ = true, e !== un)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = i, this.t = t;
  }
  get styleSheet() {
    let i = this.o;
    const t = this.t;
    if (dn2 && i === void 0) {
      const e = t !== void 0 && t.length === 1;
      e && (i = Pn.get(t)), i === void 0 && ((this.o = i = new CSSStyleSheet()).replaceSync(this.cssText), e && Pn.set(t, i));
    }
    return i;
  }
  toString() {
    return this.cssText;
  }
};
var Xr = (i) => new Vs(typeof i == "string" ? i : i + "", void 0, un);
var T = (i, ...t) => {
  const e = i.length === 1 ? i[0] : t.reduce((s, n, o) => s + ((r) => {
    if (r._$cssResult$ === true)
      return r.cssText;
    if (typeof r == "number")
      return r;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + r + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(n) + i[o + 1], i[0]);
  return new Vs(e, i, un);
};
var Jr = (i, t) => {
  if (dn2)
    i.adoptedStyleSheets = t.map((e) => e instanceof CSSStyleSheet ? e : e.styleSheet);
  else
    for (const e of t) {
      const s = document.createElement("style"), n = Ke.litNonce;
      n !== void 0 && s.setAttribute("nonce", n), s.textContent = e.cssText, i.appendChild(s);
    }
};
var Nn = dn2 ? (i) => i : (i) => i instanceof CSSStyleSheet ? ((t) => {
  let e = "";
  for (const s of t.cssRules)
    e += s.cssText;
  return Xr(e);
})(i) : i;
var { is: Qr, defineProperty: Zr, getOwnPropertyDescriptor: Kr, getOwnPropertyNames: ta, getOwnPropertySymbols: ea, getPrototypeOf: ia } = Object;
var Kt = globalThis;
var Mn = Kt.trustedTypes;
var na2 = Mn ? Mn.emptyScript : "";
var Ln = Kt.reactiveElementPolyfillSupport;
var _e = (i, t) => i;
var oi = { toAttribute(i, t) {
  switch (t) {
    case Boolean:
      i = i ? na2 : null;
      break;
    case Object:
    case Array:
      i = i == null ? i : JSON.stringify(i);
  }
  return i;
}, fromAttribute(i, t) {
  let e = i;
  switch (t) {
    case Boolean:
      e = i !== null;
      break;
    case Number:
      e = i === null ? null : Number(i);
      break;
    case Object:
    case Array:
      try {
        e = JSON.parse(i);
      } catch {
        e = null;
      }
  }
  return e;
} };
var hn = (i, t) => !Qr(i, t);
var zn = { attribute: true, type: String, converter: oi, reflect: false, hasChanged: hn };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), Kt.litPropertyMetadata ?? (Kt.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
var Wt = class extends HTMLElement {
  static addInitializer(t) {
    this._$Ei(), (this.l ?? (this.l = [])).push(t);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t, e = zn) {
    if (e.state && (e.attribute = false), this._$Ei(), this.elementProperties.set(t, e), !e.noAccessor) {
      const s = Symbol(), n = this.getPropertyDescriptor(t, s, e);
      n !== void 0 && Zr(this.prototype, t, n);
    }
  }
  static getPropertyDescriptor(t, e, s) {
    const { get: n, set: o } = Kr(this.prototype, t) ?? { get() {
      return this[e];
    }, set(r) {
      this[e] = r;
    } };
    return { get() {
      return n == null ? void 0 : n.call(this);
    }, set(r) {
      const a = n == null ? void 0 : n.call(this);
      o.call(this, r), this.requestUpdate(t, a, s);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t) {
    return this.elementProperties.get(t) ?? zn;
  }
  static _$Ei() {
    if (this.hasOwnProperty(_e("elementProperties")))
      return;
    const t = ia(this);
    t.finalize(), t.l !== void 0 && (this.l = [...t.l]), this.elementProperties = new Map(t.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(_e("finalized")))
      return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(_e("properties"))) {
      const e = this.properties, s = [...ta(e), ...ea(e)];
      for (const n of s)
        this.createProperty(n, e[n]);
    }
    const t = this[Symbol.metadata];
    if (t !== null) {
      const e = litPropertyMetadata.get(t);
      if (e !== void 0)
        for (const [s, n] of e)
          this.elementProperties.set(s, n);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [e, s] of this.elementProperties) {
      const n = this._$Eu(e, s);
      n !== void 0 && this._$Eh.set(n, e);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(t) {
    const e = [];
    if (Array.isArray(t)) {
      const s = new Set(t.flat(1 / 0).reverse());
      for (const n of s)
        e.unshift(Nn(n));
    } else
      t !== void 0 && e.push(Nn(t));
    return e;
  }
  static _$Eu(t, e) {
    const s = e.attribute;
    return s === false ? void 0 : typeof s == "string" ? s : typeof t == "string" ? t.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    var t;
    this._$ES = new Promise((e) => this.enableUpdating = e), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), (t = this.constructor.l) == null || t.forEach((e) => e(this));
  }
  addController(t) {
    var e;
    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t), this.renderRoot !== void 0 && this.isConnected && ((e = t.hostConnected) == null || e.call(t));
  }
  removeController(t) {
    var e;
    (e = this._$EO) == null || e.delete(t);
  }
  _$E_() {
    const t = /* @__PURE__ */ new Map(), e = this.constructor.elementProperties;
    for (const s of e.keys())
      this.hasOwnProperty(s) && (t.set(s, this[s]), delete this[s]);
    t.size > 0 && (this._$Ep = t);
  }
  createRenderRoot() {
    const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return Jr(t, this.constructor.elementStyles), t;
  }
  connectedCallback() {
    var t;
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t = this._$EO) == null || t.forEach((e) => {
      var s;
      return (s = e.hostConnected) == null ? void 0 : s.call(e);
    });
  }
  enableUpdating(t) {
  }
  disconnectedCallback() {
    var t;
    (t = this._$EO) == null || t.forEach((e) => {
      var s;
      return (s = e.hostDisconnected) == null ? void 0 : s.call(e);
    });
  }
  attributeChangedCallback(t, e, s) {
    this._$AK(t, s);
  }
  _$EC(t, e) {
    var s;
    const n = this.constructor.elementProperties.get(t), o = this.constructor._$Eu(t, n);
    if (o !== void 0 && n.reflect === true) {
      const r = (((s = n.converter) == null ? void 0 : s.toAttribute) !== void 0 ? n.converter : oi).toAttribute(e, n.type);
      this._$Em = t, r == null ? this.removeAttribute(o) : this.setAttribute(o, r), this._$Em = null;
    }
  }
  _$AK(t, e) {
    var s;
    const n = this.constructor, o = n._$Eh.get(t);
    if (o !== void 0 && this._$Em !== o) {
      const r = n.getPropertyOptions(o), a = typeof r.converter == "function" ? { fromAttribute: r.converter } : ((s = r.converter) == null ? void 0 : s.fromAttribute) !== void 0 ? r.converter : oi;
      this._$Em = o, this[o] = a.fromAttribute(e, r.type), this._$Em = null;
    }
  }
  requestUpdate(t, e, s) {
    if (t !== void 0) {
      if (s ?? (s = this.constructor.getPropertyOptions(t)), !(s.hasChanged ?? hn)(this[t], e))
        return;
      this.P(t, e, s);
    }
    this.isUpdatePending === false && (this._$ES = this._$ET());
  }
  P(t, e, s) {
    this._$AL.has(t) || this._$AL.set(t, e), s.reflect === true && this._$Em !== t && (this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Set())).add(t);
  }
  async _$ET() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (e) {
      Promise.reject(e);
    }
    const t = this.scheduleUpdate();
    return t != null && await t, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var t;
    if (!this.isUpdatePending)
      return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [o, r] of this._$Ep)
          this[o] = r;
        this._$Ep = void 0;
      }
      const n = this.constructor.elementProperties;
      if (n.size > 0)
        for (const [o, r] of n)
          r.wrapped !== true || this._$AL.has(o) || this[o] === void 0 || this.P(o, this[o], r);
    }
    let e = false;
    const s = this._$AL;
    try {
      e = this.shouldUpdate(s), e ? (this.willUpdate(s), (t = this._$EO) == null || t.forEach((n) => {
        var o;
        return (o = n.hostUpdate) == null ? void 0 : o.call(n);
      }), this.update(s)) : this._$EU();
    } catch (n) {
      throw e = false, this._$EU(), n;
    }
    e && this._$AE(s);
  }
  willUpdate(t) {
  }
  _$AE(t) {
    var e;
    (e = this._$EO) == null || e.forEach((s) => {
      var n;
      return (n = s.hostUpdated) == null ? void 0 : n.call(s);
    }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t)), this.updated(t);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t) {
    return true;
  }
  update(t) {
    this._$Ej && (this._$Ej = this._$Ej.forEach((e) => this._$EC(e, this[e]))), this._$EU();
  }
  updated(t) {
  }
  firstUpdated(t) {
  }
};
Wt.elementStyles = [], Wt.shadowRootOptions = { mode: "open" }, Wt[_e("elementProperties")] = /* @__PURE__ */ new Map(), Wt[_e("finalized")] = /* @__PURE__ */ new Map(), Ln == null || Ln({ ReactiveElement: Wt }), (Kt.reactiveElementVersions ?? (Kt.reactiveElementVersions = [])).push("2.0.4");
var ri = globalThis;
var ai = ri.trustedTypes;
var Dn = ai ? ai.createPolicy("lit-html", { createHTML: (i) => i }) : void 0;
var Ws = "$lit$";
var vt = `lit$${Math.random().toFixed(9).slice(2)}$`;
var Gs = "?" + vt;
var sa2 = `<${Gs}>`;
var jt = document;
var Se = () => jt.createComment("");
var ke2 = (i) => i === null || typeof i != "object" && typeof i != "function";
var pn = Array.isArray;
var oa = (i) => pn(i) || typeof (i == null ? void 0 : i[Symbol.iterator]) == "function";
var Pi = `[ 	
\f\r]`;
var ge = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var jn = /-->/g;
var Hn = />/g;
var Pt = RegExp(`>|${Pi}(?:([^\\s"'>=/]+)(${Pi}*=${Pi}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var Bn2 = /'/g;
var Fn = /"/g;
var qs = /^(?:script|style|textarea|title)$/i;
var ra = (i) => (t, ...e) => ({ _$litType$: i, strings: t, values: e });
var y = ra(1);
var te = Symbol.for("lit-noChange");
var M = Symbol.for("lit-nothing");
var Un = /* @__PURE__ */ new WeakMap();
var Mt = jt.createTreeWalker(jt, 129);
function Ys(i, t) {
  if (!pn(i) || !i.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return Dn !== void 0 ? Dn.createHTML(t) : t;
}
var aa = (i, t) => {
  const e = i.length - 1, s = [];
  let n, o = t === 2 ? "<svg>" : t === 3 ? "<math>" : "", r = ge;
  for (let a = 0; a < e; a++) {
    const l = i[a];
    let d, u, h = -1, c = 0;
    for (; c < l.length && (r.lastIndex = c, u = r.exec(l), u !== null); )
      c = r.lastIndex, r === ge ? u[1] === "!--" ? r = jn : u[1] !== void 0 ? r = Hn : u[2] !== void 0 ? (qs.test(u[2]) && (n = RegExp("</" + u[2], "g")), r = Pt) : u[3] !== void 0 && (r = Pt) : r === Pt ? u[0] === ">" ? (r = n ?? ge, h = -1) : u[1] === void 0 ? h = -2 : (h = r.lastIndex - u[2].length, d = u[1], r = u[3] === void 0 ? Pt : u[3] === '"' ? Fn : Bn2) : r === Fn || r === Bn2 ? r = Pt : r === jn || r === Hn ? r = ge : (r = Pt, n = void 0);
    const p = r === Pt && i[a + 1].startsWith("/>") ? " " : "";
    o += r === ge ? l + sa2 : h >= 0 ? (s.push(d), l.slice(0, h) + Ws + l.slice(h) + vt + p) : l + vt + (h === -2 ? a : p);
  }
  return [Ys(i, o + (i[e] || "<?>") + (t === 2 ? "</svg>" : t === 3 ? "</math>" : "")), s];
};
var Oe = class _Oe {
  constructor({ strings: t, _$litType$: e }, s) {
    let n;
    this.parts = [];
    let o = 0, r = 0;
    const a = t.length - 1, l = this.parts, [d, u] = aa(t, e);
    if (this.el = _Oe.createElement(d, s), Mt.currentNode = this.el.content, e === 2 || e === 3) {
      const h = this.el.content.firstChild;
      h.replaceWith(...h.childNodes);
    }
    for (; (n = Mt.nextNode()) !== null && l.length < a; ) {
      if (n.nodeType === 1) {
        if (n.hasAttributes())
          for (const h of n.getAttributeNames())
            if (h.endsWith(Ws)) {
              const c = u[r++], p = n.getAttribute(h).split(vt), b = /([.?@])?(.*)/.exec(c);
              l.push({ type: 1, index: o, name: b[2], strings: p, ctor: b[1] === "." ? ca : b[1] === "?" ? da : b[1] === "@" ? ua : vi }), n.removeAttribute(h);
            } else
              h.startsWith(vt) && (l.push({ type: 6, index: o }), n.removeAttribute(h));
        if (qs.test(n.tagName)) {
          const h = n.textContent.split(vt), c = h.length - 1;
          if (c > 0) {
            n.textContent = ai ? ai.emptyScript : "";
            for (let p = 0; p < c; p++)
              n.append(h[p], Se()), Mt.nextNode(), l.push({ type: 2, index: ++o });
            n.append(h[c], Se());
          }
        }
      } else if (n.nodeType === 8)
        if (n.data === Gs)
          l.push({ type: 2, index: o });
        else {
          let h = -1;
          for (; (h = n.data.indexOf(vt, h + 1)) !== -1; )
            l.push({ type: 7, index: o }), h += vt.length - 1;
        }
      o++;
    }
  }
  static createElement(t, e) {
    const s = jt.createElement("template");
    return s.innerHTML = t, s;
  }
};
function ee(i, t, e = i, s) {
  var n, o;
  if (t === te)
    return t;
  let r = s !== void 0 ? (n = e.o) == null ? void 0 : n[s] : e.l;
  const a = ke2(t) ? void 0 : t._$litDirective$;
  return (r == null ? void 0 : r.constructor) !== a && ((o = r == null ? void 0 : r._$AO) == null || o.call(r, false), a === void 0 ? r = void 0 : (r = new a(i), r._$AT(i, e, s)), s !== void 0 ? (e.o ?? (e.o = []))[s] = r : e.l = r), r !== void 0 && (t = ee(i, r._$AS(i, t.values), r, s)), t;
}
var la = class {
  constructor(t, e) {
    this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = e;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t) {
    const { el: { content: e }, parts: s } = this._$AD, n = ((t == null ? void 0 : t.creationScope) ?? jt).importNode(e, true);
    Mt.currentNode = n;
    let o = Mt.nextNode(), r = 0, a = 0, l = s[0];
    for (; l !== void 0; ) {
      if (r === l.index) {
        let d;
        l.type === 2 ? d = new De(o, o.nextSibling, this, t) : l.type === 1 ? d = new l.ctor(o, l.name, l.strings, this, t) : l.type === 6 && (d = new ha(o, this, t)), this._$AV.push(d), l = s[++a];
      }
      r !== (l == null ? void 0 : l.index) && (o = Mt.nextNode(), r++);
    }
    return Mt.currentNode = jt, n;
  }
  p(t) {
    let e = 0;
    for (const s of this._$AV)
      s !== void 0 && (s.strings !== void 0 ? (s._$AI(t, s, e), e += s.strings.length - 2) : s._$AI(t[e])), e++;
  }
};
var De = class _De {
  get _$AU() {
    var t;
    return ((t = this._$AM) == null ? void 0 : t._$AU) ?? this.v;
  }
  constructor(t, e, s, n) {
    this.type = 2, this._$AH = M, this._$AN = void 0, this._$AA = t, this._$AB = e, this._$AM = s, this.options = n, this.v = (n == null ? void 0 : n.isConnected) ?? true;
  }
  get parentNode() {
    let t = this._$AA.parentNode;
    const e = this._$AM;
    return e !== void 0 && (t == null ? void 0 : t.nodeType) === 11 && (t = e.parentNode), t;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t, e = this) {
    t = ee(this, t, e), ke2(t) ? t === M || t == null || t === "" ? (this._$AH !== M && this._$AR(), this._$AH = M) : t !== this._$AH && t !== te && this._(t) : t._$litType$ !== void 0 ? this.$(t) : t.nodeType !== void 0 ? this.T(t) : oa(t) ? this.k(t) : this._(t);
  }
  O(t) {
    return this._$AA.parentNode.insertBefore(t, this._$AB);
  }
  T(t) {
    this._$AH !== t && (this._$AR(), this._$AH = this.O(t));
  }
  _(t) {
    this._$AH !== M && ke2(this._$AH) ? this._$AA.nextSibling.data = t : this.T(jt.createTextNode(t)), this._$AH = t;
  }
  $(t) {
    var e;
    const { values: s, _$litType$: n } = t, o = typeof n == "number" ? this._$AC(t) : (n.el === void 0 && (n.el = Oe.createElement(Ys(n.h, n.h[0]), this.options)), n);
    if (((e = this._$AH) == null ? void 0 : e._$AD) === o)
      this._$AH.p(s);
    else {
      const r = new la(o, this), a = r.u(this.options);
      r.p(s), this.T(a), this._$AH = r;
    }
  }
  _$AC(t) {
    let e = Un.get(t.strings);
    return e === void 0 && Un.set(t.strings, e = new Oe(t)), e;
  }
  k(t) {
    pn(this._$AH) || (this._$AH = [], this._$AR());
    const e = this._$AH;
    let s, n = 0;
    for (const o of t)
      n === e.length ? e.push(s = new _De(this.O(Se()), this.O(Se()), this, this.options)) : s = e[n], s._$AI(o), n++;
    n < e.length && (this._$AR(s && s._$AB.nextSibling, n), e.length = n);
  }
  _$AR(t = this._$AA.nextSibling, e) {
    var s;
    for ((s = this._$AP) == null ? void 0 : s.call(this, false, true, e); t && t !== this._$AB; ) {
      const n = t.nextSibling;
      t.remove(), t = n;
    }
  }
  setConnected(t) {
    var e;
    this._$AM === void 0 && (this.v = t, (e = this._$AP) == null || e.call(this, t));
  }
};
var vi = class {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t, e, s, n, o) {
    this.type = 1, this._$AH = M, this._$AN = void 0, this.element = t, this.name = e, this._$AM = n, this.options = o, s.length > 2 || s[0] !== "" || s[1] !== "" ? (this._$AH = Array(s.length - 1).fill(new String()), this.strings = s) : this._$AH = M;
  }
  _$AI(t, e = this, s, n) {
    const o = this.strings;
    let r = false;
    if (o === void 0)
      t = ee(this, t, e, 0), r = !ke2(t) || t !== this._$AH && t !== te, r && (this._$AH = t);
    else {
      const a = t;
      let l, d;
      for (t = o[0], l = 0; l < o.length - 1; l++)
        d = ee(this, a[s + l], e, l), d === te && (d = this._$AH[l]), r || (r = !ke2(d) || d !== this._$AH[l]), d === M ? t = M : t !== M && (t += (d ?? "") + o[l + 1]), this._$AH[l] = d;
    }
    r && !n && this.j(t);
  }
  j(t) {
    t === M ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? "");
  }
};
var ca = class extends vi {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t) {
    this.element[this.name] = t === M ? void 0 : t;
  }
};
var da = class extends vi {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t) {
    this.element.toggleAttribute(this.name, !!t && t !== M);
  }
};
var ua = class extends vi {
  constructor(t, e, s, n, o) {
    super(t, e, s, n, o), this.type = 5;
  }
  _$AI(t, e = this) {
    if ((t = ee(this, t, e, 0) ?? M) === te)
      return;
    const s = this._$AH, n = t === M && s !== M || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, o = t !== M && (s === M || n);
    n && this.element.removeEventListener(this.name, this, s), o && this.element.addEventListener(this.name, this, t), this._$AH = t;
  }
  handleEvent(t) {
    var e;
    typeof this._$AH == "function" ? this._$AH.call(((e = this.options) == null ? void 0 : e.host) ?? this.element, t) : this._$AH.handleEvent(t);
  }
};
var ha = class {
  constructor(t, e, s) {
    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = e, this.options = s;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t) {
    ee(this, t);
  }
};
var Vn = ri.litHtmlPolyfillSupport;
Vn == null || Vn(Oe, De), (ri.litHtmlVersions ?? (ri.litHtmlVersions = [])).push("3.2.0");
var ie = (i, t, e) => {
  const s = (e == null ? void 0 : e.renderBefore) ?? t;
  let n = s._$litPart$;
  if (n === void 0) {
    const o = (e == null ? void 0 : e.renderBefore) ?? null;
    s._$litPart$ = n = new De(t.insertBefore(Se(), o), o, void 0, e ?? {});
  }
  return n._$AI(i), n;
};
var I = class extends Wt {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this.o = void 0;
  }
  createRenderRoot() {
    var t;
    const e = super.createRenderRoot();
    return (t = this.renderOptions).renderBefore ?? (t.renderBefore = e.firstChild), e;
  }
  update(t) {
    const e = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this.o = ie(e, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var t;
    super.connectedCallback(), (t = this.o) == null || t.setConnected(true);
  }
  disconnectedCallback() {
    var t;
    super.disconnectedCallback(), (t = this.o) == null || t.setConnected(false);
  }
  render() {
    return te;
  }
};
var Wn;
I._$litElement$ = true, I.finalized = true, (Wn = globalThis.litElementHydrateSupport) == null || Wn.call(globalThis, { LitElement: I });
var Gn = globalThis.litElementPolyfillSupport;
Gn == null || Gn({ LitElement: I });
(globalThis.litElementVersions ?? (globalThis.litElementVersions = [])).push("4.1.0");
var pa = { attribute: true, type: String, converter: oi, reflect: false, hasChanged: hn };
var fa = (i = pa, t, e) => {
  const { kind: s, metadata: n } = e;
  let o = globalThis.litPropertyMetadata.get(n);
  if (o === void 0 && globalThis.litPropertyMetadata.set(n, o = /* @__PURE__ */ new Map()), o.set(e.name, i), s === "accessor") {
    const { name: r } = e;
    return { set(a) {
      const l = t.get.call(this);
      t.set.call(this, a), this.requestUpdate(r, l, i);
    }, init(a) {
      return a !== void 0 && this.P(r, void 0, i), a;
    } };
  }
  if (s === "setter") {
    const { name: r } = e;
    return function(a) {
      const l = this[r];
      t.call(this, a), this.requestUpdate(r, l, i);
    };
  }
  throw Error("Unsupported decorator location: " + s);
};
function f(i) {
  return (t, e) => typeof e == "object" ? fa(i, t, e) : ((s, n, o) => {
    const r = n.hasOwnProperty(o);
    return n.constructor.createProperty(o, r ? { ...s, wrapped: true } : s), r ? Object.getOwnPropertyDescriptor(n, o) : void 0;
  })(i, t, e);
}
function re(i) {
  return f({ ...i, state: true, attribute: false });
}
var ma = (i) => i.strings === void 0;
var ba = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
var ga = (i) => (...t) => ({ _$litDirective$: i, values: t });
var va = class {
  constructor(t) {
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AT(t, e, s) {
    this.t = t, this._$AM = e, this.i = s;
  }
  _$AS(t, e) {
    return this.update(t, e);
  }
  update(t, e) {
    return this.render(...e);
  }
};
var xe = (i, t) => {
  var e;
  const s = i._$AN;
  if (s === void 0)
    return false;
  for (const n of s)
    (e = n._$AO) == null || e.call(n, t, false), xe(n, t);
  return true;
};
var li = (i) => {
  let t, e;
  do {
    if ((t = i._$AM) === void 0)
      break;
    e = t._$AN, e.delete(i), i = t;
  } while ((e == null ? void 0 : e.size) === 0);
};
var Xs = (i) => {
  for (let t; t = i._$AM; i = t) {
    let e = t._$AN;
    if (e === void 0)
      t._$AN = e = /* @__PURE__ */ new Set();
    else if (e.has(i))
      break;
    e.add(i), xa2(t);
  }
};
function ya(i) {
  this._$AN !== void 0 ? (li(this), this._$AM = i, Xs(this)) : this._$AM = i;
}
function _a(i, t = false, e = 0) {
  const s = this._$AH, n = this._$AN;
  if (n !== void 0 && n.size !== 0)
    if (t)
      if (Array.isArray(s))
        for (let o = e; o < s.length; o++)
          xe(s[o], false), li(s[o]);
      else
        s != null && (xe(s, false), li(s));
    else
      xe(this, i);
}
var xa2 = (i) => {
  i.type == ba.CHILD && (i._$AP ?? (i._$AP = _a), i._$AQ ?? (i._$AQ = ya));
};
var wa = class extends va {
  constructor() {
    super(...arguments), this._$AN = void 0;
  }
  _$AT(t, e, s) {
    super._$AT(t, e, s), Xs(this), this.isConnected = t._$AU;
  }
  _$AO(t, e = true) {
    var s, n;
    t !== this.isConnected && (this.isConnected = t, t ? (s = this.reconnected) == null || s.call(this) : (n = this.disconnected) == null || n.call(this)), e && (xe(this, t), li(this));
  }
  setValue(t) {
    if (ma(this.t))
      this.t._$AI(t, this);
    else {
      const e = [...this.t._$AH];
      e[this.i] = t, this.t._$AI(e, this, 0);
    }
  }
  disconnected() {
  }
  reconnected() {
  }
};
var Yt = () => new $a();
var $a = class {
};
var Ni = /* @__PURE__ */ new WeakMap();
var _t = ga(class extends wa {
  render(i) {
    return M;
  }
  update(i, [t]) {
    var e;
    const s = t !== this.Y;
    return s && this.Y !== void 0 && this.rt(void 0), (s || this.lt !== this.ct) && (this.Y = t, this.ht = (e = i.options) == null ? void 0 : e.host, this.rt(this.ct = i.element)), M;
  }
  rt(i) {
    if (this.isConnected || (i = void 0), typeof this.Y == "function") {
      const t = this.ht ?? globalThis;
      let e = Ni.get(t);
      e === void 0 && (e = /* @__PURE__ */ new WeakMap(), Ni.set(t, e)), e.get(this.Y) !== void 0 && this.Y.call(this.ht, void 0), e.set(this.Y, i), i !== void 0 && this.Y.call(this.ht, i);
    } else
      this.Y.value = i;
  }
  get lt() {
    var i, t;
    return typeof this.Y == "function" ? (i = Ni.get(this.ht ?? globalThis)) == null ? void 0 : i.get(this.Y) : (t = this.Y) == null ? void 0 : t.value;
  }
  disconnected() {
    this.lt === this.ct && this.rt(void 0);
  }
  reconnected() {
    this.rt(this.ct);
  }
});
var Js = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
);
var ci = Object.freeze({
  rotate: 0,
  vFlip: false,
  hFlip: false
});
var je = Object.freeze({
  ...Js,
  ...ci
});
var Wi = Object.freeze({
  ...je,
  body: "",
  hidden: false
});
var Ca = Object.freeze({
  width: null,
  height: null
});
var Qs = Object.freeze({
  // Dimensions
  ...Ca,
  // Transformations
  ...ci
});
function Ea(i, t = 0) {
  const e = i.replace(/^-?[0-9.]*/, "");
  function s(n) {
    for (; n < 0; )
      n += 4;
    return n % 4;
  }
  if (e === "") {
    const n = parseInt(i);
    return isNaN(n) ? 0 : s(n);
  } else if (e !== i) {
    let n = 0;
    switch (e) {
      case "%":
        n = 25;
        break;
      case "deg":
        n = 90;
    }
    if (n) {
      let o = parseFloat(i.slice(0, i.length - e.length));
      return isNaN(o) ? 0 : (o = o / n, o % 1 === 0 ? s(o) : 0);
    }
  }
  return t;
}
var Aa = /[\s,]+/;
function Sa(i, t) {
  t.split(Aa).forEach((e) => {
    switch (e.trim()) {
      case "horizontal":
        i.hFlip = true;
        break;
      case "vertical":
        i.vFlip = true;
        break;
    }
  });
}
var Zs = {
  ...Qs,
  preserveAspectRatio: ""
};
function qn(i) {
  const t = {
    ...Zs
  }, e = (s, n) => i.getAttribute(s) || n;
  return t.width = e("width", null), t.height = e("height", null), t.rotate = Ea(e("rotate", "")), Sa(t, e("flip", "")), t.preserveAspectRatio = e("preserveAspectRatio", e("preserveaspectratio", "")), t;
}
function ka(i, t) {
  for (const e in Zs)
    if (i[e] !== t[e])
      return true;
  return false;
}
var we = /^[a-z0-9]+(-[a-z0-9]+)*$/;
var He = (i, t, e, s = "") => {
  const n = i.split(":");
  if (i.slice(0, 1) === "@") {
    if (n.length < 2 || n.length > 3)
      return null;
    s = n.shift().slice(1);
  }
  if (n.length > 3 || !n.length)
    return null;
  if (n.length > 1) {
    const a = n.pop(), l = n.pop(), d = {
      // Allow provider without '@': "provider:prefix:name"
      provider: n.length > 0 ? n[0] : s,
      prefix: l,
      name: a
    };
    return t && !ti(d) ? null : d;
  }
  const o = n[0], r = o.split("-");
  if (r.length > 1) {
    const a = {
      provider: s,
      prefix: r.shift(),
      name: r.join("-")
    };
    return t && !ti(a) ? null : a;
  }
  if (e && s === "") {
    const a = {
      provider: s,
      prefix: "",
      name: o
    };
    return t && !ti(a, e) ? null : a;
  }
  return null;
};
var ti = (i, t) => i ? !!((i.provider === "" || i.provider.match(we)) && (t && i.prefix === "" || i.prefix.match(we)) && i.name.match(we)) : false;
function Oa(i, t) {
  const e = {};
  !i.hFlip != !t.hFlip && (e.hFlip = true), !i.vFlip != !t.vFlip && (e.vFlip = true);
  const s = ((i.rotate || 0) + (t.rotate || 0)) % 4;
  return s && (e.rotate = s), e;
}
function Yn(i, t) {
  const e = Oa(i, t);
  for (const s in Wi)
    s in ci ? s in i && !(s in e) && (e[s] = ci[s]) : s in t ? e[s] = t[s] : s in i && (e[s] = i[s]);
  return e;
}
function Ia(i, t) {
  const e = i.icons, s = i.aliases || /* @__PURE__ */ Object.create(null), n = /* @__PURE__ */ Object.create(null);
  function o(r) {
    if (e[r])
      return n[r] = [];
    if (!(r in n)) {
      n[r] = null;
      const a = s[r] && s[r].parent, l = a && o(a);
      l && (n[r] = [a].concat(l));
    }
    return n[r];
  }
  return Object.keys(e).concat(Object.keys(s)).forEach(o), n;
}
function Ta(i, t, e) {
  const s = i.icons, n = i.aliases || /* @__PURE__ */ Object.create(null);
  let o = {};
  function r(a) {
    o = Yn(
      s[a] || n[a],
      o
    );
  }
  return r(t), e.forEach(r), Yn(i, o);
}
function Ks(i, t) {
  const e = [];
  if (typeof i != "object" || typeof i.icons != "object")
    return e;
  i.not_found instanceof Array && i.not_found.forEach((n) => {
    t(n, null), e.push(n);
  });
  const s = Ia(i);
  for (const n in s) {
    const o = s[n];
    o && (t(n, Ta(i, n, o)), e.push(n));
  }
  return e;
}
var Ra = {
  provider: "",
  aliases: {},
  not_found: {},
  ...Js
};
function Mi(i, t) {
  for (const e in t)
    if (e in i && typeof i[e] != typeof t[e])
      return false;
  return true;
}
function to(i) {
  if (typeof i != "object" || i === null)
    return null;
  const t = i;
  if (typeof t.prefix != "string" || !i.icons || typeof i.icons != "object" || !Mi(i, Ra))
    return null;
  const e = t.icons;
  for (const n in e) {
    const o = e[n];
    if (!n.match(we) || typeof o.body != "string" || !Mi(
      o,
      Wi
    ))
      return null;
  }
  const s = t.aliases || /* @__PURE__ */ Object.create(null);
  for (const n in s) {
    const o = s[n], r = o.parent;
    if (!n.match(we) || typeof r != "string" || !e[r] && !s[r] || !Mi(
      o,
      Wi
    ))
      return null;
  }
  return t;
}
var di = /* @__PURE__ */ Object.create(null);
function Pa(i, t) {
  return {
    provider: i,
    prefix: t,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ new Set()
  };
}
function Ct(i, t) {
  const e = di[i] || (di[i] = /* @__PURE__ */ Object.create(null));
  return e[t] || (e[t] = Pa(i, t));
}
function fn(i, t) {
  return to(t) ? Ks(t, (e, s) => {
    s ? i.icons[e] = s : i.missing.add(e);
  }) : [];
}
function Na(i, t, e) {
  try {
    if (typeof e.body == "string")
      return i.icons[t] = { ...e }, true;
  } catch {
  }
  return false;
}
function Ma(i, t) {
  let e = [];
  return (typeof i == "string" ? [i] : Object.keys(di)).forEach((s) => {
    (typeof s == "string" && typeof t == "string" ? [t] : Object.keys(di[s] || {})).forEach((n) => {
      const o = Ct(s, n);
      e = e.concat(
        Object.keys(o.icons).map(
          (r) => (s !== "" ? "@" + s + ":" : "") + n + ":" + r
        )
      );
    });
  }), e;
}
var Ie = false;
function eo(i) {
  return typeof i == "boolean" && (Ie = i), Ie;
}
function Te(i) {
  const t = typeof i == "string" ? He(i, true, Ie) : i;
  if (t) {
    const e = Ct(t.provider, t.prefix), s = t.name;
    return e.icons[s] || (e.missing.has(s) ? null : void 0);
  }
}
function io(i, t) {
  const e = He(i, true, Ie);
  if (!e)
    return false;
  const s = Ct(e.provider, e.prefix);
  return Na(s, e.name, t);
}
function Xn(i, t) {
  if (typeof i != "object")
    return false;
  if (typeof t != "string" && (t = i.provider || ""), Ie && !t && !i.prefix) {
    let n = false;
    return to(i) && (i.prefix = "", Ks(i, (o, r) => {
      r && io(o, r) && (n = true);
    })), n;
  }
  const e = i.prefix;
  if (!ti({
    provider: t,
    prefix: e,
    name: "a"
  }))
    return false;
  const s = Ct(t, e);
  return !!fn(s, i);
}
function Jn(i) {
  return !!Te(i);
}
function La(i) {
  const t = Te(i);
  return t ? {
    ...je,
    ...t
  } : null;
}
function za(i) {
  const t = {
    loaded: [],
    missing: [],
    pending: []
  }, e = /* @__PURE__ */ Object.create(null);
  i.sort((n, o) => n.provider !== o.provider ? n.provider.localeCompare(o.provider) : n.prefix !== o.prefix ? n.prefix.localeCompare(o.prefix) : n.name.localeCompare(o.name));
  let s = {
    provider: "",
    prefix: "",
    name: ""
  };
  return i.forEach((n) => {
    if (s.name === n.name && s.prefix === n.prefix && s.provider === n.provider)
      return;
    s = n;
    const o = n.provider, r = n.prefix, a = n.name, l = e[o] || (e[o] = /* @__PURE__ */ Object.create(null)), d = l[r] || (l[r] = Ct(o, r));
    let u;
    a in d.icons ? u = t.loaded : r === "" || d.missing.has(a) ? u = t.missing : u = t.pending;
    const h = {
      provider: o,
      prefix: r,
      name: a
    };
    u.push(h);
  }), t;
}
function no(i, t) {
  i.forEach((e) => {
    const s = e.loaderCallbacks;
    s && (e.loaderCallbacks = s.filter((n) => n.id !== t));
  });
}
function Da(i) {
  i.pendingCallbacksFlag || (i.pendingCallbacksFlag = true, setTimeout(() => {
    i.pendingCallbacksFlag = false;
    const t = i.loaderCallbacks ? i.loaderCallbacks.slice(0) : [];
    if (!t.length)
      return;
    let e = false;
    const s = i.provider, n = i.prefix;
    t.forEach((o) => {
      const r = o.icons, a = r.pending.length;
      r.pending = r.pending.filter((l) => {
        if (l.prefix !== n)
          return true;
        const d = l.name;
        if (i.icons[d])
          r.loaded.push({
            provider: s,
            prefix: n,
            name: d
          });
        else if (i.missing.has(d))
          r.missing.push({
            provider: s,
            prefix: n,
            name: d
          });
        else
          return e = true, true;
        return false;
      }), r.pending.length !== a && (e || no([i], o.id), o.callback(
        r.loaded.slice(0),
        r.missing.slice(0),
        r.pending.slice(0),
        o.abort
      ));
    });
  }));
}
var ja = 0;
function Ha(i, t, e) {
  const s = ja++, n = no.bind(null, e, s);
  if (!t.pending.length)
    return n;
  const o = {
    id: s,
    icons: t,
    callback: i,
    abort: n
  };
  return e.forEach((r) => {
    (r.loaderCallbacks || (r.loaderCallbacks = [])).push(o);
  }), n;
}
var Gi = /* @__PURE__ */ Object.create(null);
function Qn(i, t) {
  Gi[i] = t;
}
function qi(i) {
  return Gi[i] || Gi[""];
}
function Ba(i, t = true, e = false) {
  const s = [];
  return i.forEach((n) => {
    const o = typeof n == "string" ? He(n, t, e) : n;
    o && s.push(o);
  }), s;
}
var Fa = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: false,
  dataAfterTimeout: false
};
function Ua(i, t, e, s) {
  const n = i.resources.length, o = i.random ? Math.floor(Math.random() * n) : i.index;
  let r;
  if (i.random) {
    let C = i.resources.slice(0);
    for (r = []; C.length > 1; ) {
      const A = Math.floor(Math.random() * C.length);
      r.push(C[A]), C = C.slice(0, A).concat(C.slice(A + 1));
    }
    r = r.concat(C);
  } else
    r = i.resources.slice(o).concat(i.resources.slice(0, o));
  const a = Date.now();
  let l = "pending", d = 0, u, h = null, c = [], p = [];
  typeof s == "function" && p.push(s);
  function b() {
    h && (clearTimeout(h), h = null);
  }
  function v() {
    l === "pending" && (l = "aborted"), b(), c.forEach((C) => {
      C.status === "pending" && (C.status = "aborted");
    }), c = [];
  }
  function x(C, A) {
    A && (p = []), typeof C == "function" && p.push(C);
  }
  function w() {
    return {
      startTime: a,
      payload: t,
      status: l,
      queriesSent: d,
      queriesPending: c.length,
      subscribe: x,
      abort: v
    };
  }
  function m() {
    l = "failed", p.forEach((C) => {
      C(void 0, u);
    });
  }
  function g() {
    c.forEach((C) => {
      C.status === "pending" && (C.status = "aborted");
    }), c = [];
  }
  function _(C, A, O) {
    const L = A !== "success";
    switch (c = c.filter((E) => E !== C), l) {
      case "pending":
        break;
      case "failed":
        if (L || !i.dataAfterTimeout)
          return;
        break;
      default:
        return;
    }
    if (A === "abort") {
      u = O, m();
      return;
    }
    if (L) {
      u = O, c.length || (r.length ? $() : m());
      return;
    }
    if (b(), g(), !i.random) {
      const E = i.resources.indexOf(C.resource);
      E !== -1 && E !== i.index && (i.index = E);
    }
    l = "completed", p.forEach((E) => {
      E(O);
    });
  }
  function $() {
    if (l !== "pending")
      return;
    b();
    const C = r.shift();
    if (C === void 0) {
      if (c.length) {
        h = setTimeout(() => {
          b(), l === "pending" && (g(), m());
        }, i.timeout);
        return;
      }
      m();
      return;
    }
    const A = {
      status: "pending",
      resource: C,
      callback: (O, L) => {
        _(A, O, L);
      }
    };
    c.push(A), d++, h = setTimeout($, i.rotate), e(C, t, A.callback);
  }
  return setTimeout($), w;
}
function so(i) {
  const t = {
    ...Fa,
    ...i
  };
  let e = [];
  function s() {
    e = e.filter((r) => r().status === "pending");
  }
  function n(r, a, l) {
    const d = Ua(
      t,
      r,
      a,
      (u, h) => {
        s(), l && l(u, h);
      }
    );
    return e.push(d), d;
  }
  function o(r) {
    return e.find((a) => r(a)) || null;
  }
  return {
    query: n,
    find: o,
    setIndex: (r) => {
      t.index = r;
    },
    getIndex: () => t.index,
    cleanup: s
  };
}
function mn(i) {
  let t;
  if (typeof i.resources == "string")
    t = [i.resources];
  else if (t = i.resources, !(t instanceof Array) || !t.length)
    return null;
  return {
    // API hosts
    resources: t,
    // Root path
    path: i.path || "/",
    // URL length limit
    maxURL: i.maxURL || 500,
    // Timeout before next host is used.
    rotate: i.rotate || 750,
    // Timeout before failing query.
    timeout: i.timeout || 5e3,
    // Randomise default API end point.
    random: i.random === true,
    // Start index
    index: i.index || 0,
    // Receive data after time out (used if time out kicks in first, then API module sends data anyway).
    dataAfterTimeout: i.dataAfterTimeout !== false
  };
}
var yi = /* @__PURE__ */ Object.create(null);
var Xe = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
];
var Yi = [];
for (; Xe.length > 0; )
  Xe.length === 1 || Math.random() > 0.5 ? Yi.push(Xe.shift()) : Yi.push(Xe.pop());
yi[""] = mn({
  resources: ["https://api.iconify.design"].concat(Yi)
});
function Zn(i, t) {
  const e = mn(t);
  return e === null ? false : (yi[i] = e, true);
}
function _i(i) {
  return yi[i];
}
function Va() {
  return Object.keys(yi);
}
function Kn() {
}
var Li = /* @__PURE__ */ Object.create(null);
function Wa(i) {
  if (!Li[i]) {
    const t = _i(i);
    if (!t)
      return;
    const e = so(t), s = {
      config: t,
      redundancy: e
    };
    Li[i] = s;
  }
  return Li[i];
}
function oo(i, t, e) {
  let s, n;
  if (typeof i == "string") {
    const o = qi(i);
    if (!o)
      return e(void 0, 424), Kn;
    n = o.send;
    const r = Wa(i);
    r && (s = r.redundancy);
  } else {
    const o = mn(i);
    if (o) {
      s = so(o);
      const r = i.resources ? i.resources[0] : "", a = qi(r);
      a && (n = a.send);
    }
  }
  return !s || !n ? (e(void 0, 424), Kn) : s.query(t, n, e)().abort;
}
var ts = "iconify2";
var Re = "iconify";
var ro = Re + "-count";
var es = Re + "-version";
var ao = 36e5;
var Ga = 168;
var qa = 50;
function Xi(i, t) {
  try {
    return i.getItem(t);
  } catch {
  }
}
function bn(i, t, e) {
  try {
    return i.setItem(t, e), true;
  } catch {
  }
}
function is(i, t) {
  try {
    i.removeItem(t);
  } catch {
  }
}
function Ji(i, t) {
  return bn(i, ro, t.toString());
}
function Qi(i) {
  return parseInt(Xi(i, ro)) || 0;
}
var zt = {
  local: true,
  session: true
};
var lo = {
  local: /* @__PURE__ */ new Set(),
  session: /* @__PURE__ */ new Set()
};
var gn = false;
function Ya(i) {
  gn = i;
}
var Je = typeof window > "u" ? {} : window;
function co(i) {
  const t = i + "Storage";
  try {
    if (Je && Je[t] && typeof Je[t].length == "number")
      return Je[t];
  } catch {
  }
  zt[i] = false;
}
function uo(i, t) {
  const e = co(i);
  if (!e)
    return;
  const s = Xi(e, es);
  if (s !== ts) {
    if (s) {
      const a = Qi(e);
      for (let l = 0; l < a; l++)
        is(e, Re + l.toString());
    }
    bn(e, es, ts), Ji(e, 0);
    return;
  }
  const n = Math.floor(Date.now() / ao) - Ga, o = (a) => {
    const l = Re + a.toString(), d = Xi(e, l);
    if (typeof d == "string") {
      try {
        const u = JSON.parse(d);
        if (typeof u == "object" && typeof u.cached == "number" && u.cached > n && typeof u.provider == "string" && typeof u.data == "object" && typeof u.data.prefix == "string" && // Valid item: run callback
        t(u, a))
          return true;
      } catch {
      }
      is(e, l);
    }
  };
  let r = Qi(e);
  for (let a = r - 1; a >= 0; a--)
    o(a) || (a === r - 1 ? (r--, Ji(e, r)) : lo[i].add(a));
}
function ho() {
  if (!gn) {
    Ya(true);
    for (const i in zt)
      uo(i, (t) => {
        const e = t.data, s = t.provider, n = e.prefix, o = Ct(
          s,
          n
        );
        if (!fn(o, e).length)
          return false;
        const r = e.lastModified || -1;
        return o.lastModifiedCached = o.lastModifiedCached ? Math.min(o.lastModifiedCached, r) : r, true;
      });
  }
}
function Xa(i, t) {
  const e = i.lastModifiedCached;
  if (
    // Matches or newer
    e && e >= t
  )
    return e === t;
  if (i.lastModifiedCached = t, e)
    for (const s in zt)
      uo(s, (n) => {
        const o = n.data;
        return n.provider !== i.provider || o.prefix !== i.prefix || o.lastModified === t;
      });
  return true;
}
function Ja(i, t) {
  gn || ho();
  function e(s) {
    let n;
    if (!zt[s] || !(n = co(s)))
      return;
    const o = lo[s];
    let r;
    if (o.size)
      o.delete(r = Array.from(o).shift());
    else if (r = Qi(n), r >= qa || !Ji(n, r + 1))
      return;
    const a = {
      cached: Math.floor(Date.now() / ao),
      provider: i.provider,
      data: t
    };
    return bn(
      n,
      Re + r.toString(),
      JSON.stringify(a)
    );
  }
  t.lastModified && !Xa(i, t.lastModified) || Object.keys(t.icons).length && (t.not_found && (t = Object.assign({}, t), delete t.not_found), e("local") || e("session"));
}
function ns() {
}
function Qa(i) {
  i.iconsLoaderFlag || (i.iconsLoaderFlag = true, setTimeout(() => {
    i.iconsLoaderFlag = false, Da(i);
  }));
}
function Za(i, t) {
  i.iconsToLoad ? i.iconsToLoad = i.iconsToLoad.concat(t).sort() : i.iconsToLoad = t, i.iconsQueueFlag || (i.iconsQueueFlag = true, setTimeout(() => {
    i.iconsQueueFlag = false;
    const { provider: e, prefix: s } = i, n = i.iconsToLoad;
    delete i.iconsToLoad;
    let o;
    !n || !(o = qi(e)) || o.prepare(e, s, n).forEach((r) => {
      oo(e, r, (a) => {
        if (typeof a != "object")
          r.icons.forEach((l) => {
            i.missing.add(l);
          });
        else
          try {
            const l = fn(
              i,
              a
            );
            if (!l.length)
              return;
            const d = i.pendingIcons;
            d && l.forEach((u) => {
              d.delete(u);
            }), Ja(i, a);
          } catch (l) {
            console.error(l);
          }
        Qa(i);
      });
    });
  }));
}
var vn = (i, t) => {
  const e = Ba(i, true, eo()), s = za(e);
  if (!s.pending.length) {
    let l = true;
    return t && setTimeout(() => {
      l && t(
        s.loaded,
        s.missing,
        s.pending,
        ns
      );
    }), () => {
      l = false;
    };
  }
  const n = /* @__PURE__ */ Object.create(null), o = [];
  let r, a;
  return s.pending.forEach((l) => {
    const { provider: d, prefix: u } = l;
    if (u === a && d === r)
      return;
    r = d, a = u, o.push(Ct(d, u));
    const h = n[d] || (n[d] = /* @__PURE__ */ Object.create(null));
    h[u] || (h[u] = []);
  }), s.pending.forEach((l) => {
    const { provider: d, prefix: u, name: h } = l, c = Ct(d, u), p = c.pendingIcons || (c.pendingIcons = /* @__PURE__ */ new Set());
    p.has(h) || (p.add(h), n[d][u].push(h));
  }), o.forEach((l) => {
    const { provider: d, prefix: u } = l;
    n[d][u].length && Za(l, n[d][u]);
  }), t ? Ha(t, s, o) : ns;
};
var Ka = (i) => new Promise((t, e) => {
  const s = typeof i == "string" ? He(i, true) : i;
  if (!s) {
    e(i);
    return;
  }
  vn([s || i], (n) => {
    if (n.length && s) {
      const o = Te(s);
      if (o) {
        t({
          ...je,
          ...o
        });
        return;
      }
    }
    e(i);
  });
});
function tl(i) {
  try {
    const t = typeof i == "string" ? JSON.parse(i) : i;
    if (typeof t.body == "string")
      return {
        ...t
      };
  } catch {
  }
}
function el(i, t) {
  const e = typeof i == "string" ? He(i, true, true) : null;
  if (!e) {
    const o = tl(i);
    return {
      value: i,
      data: o
    };
  }
  const s = Te(e);
  if (s !== void 0 || !e.prefix)
    return {
      value: i,
      name: e,
      data: s
      // could be 'null' -> icon is missing
    };
  const n = vn([e], () => t(i, e, Te(e)));
  return {
    value: i,
    name: e,
    loading: n
  };
}
function zi(i) {
  return i.hasAttribute("inline");
}
var po = false;
try {
  po = navigator.vendor.indexOf("Apple") === 0;
} catch {
}
function il(i, t) {
  switch (t) {
    case "svg":
    case "bg":
    case "mask":
      return t;
  }
  return t !== "style" && (po || i.indexOf("<a") === -1) ? "svg" : i.indexOf("currentColor") === -1 ? "bg" : "mask";
}
var nl = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
var sl = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function Zi(i, t, e) {
  if (t === 1)
    return i;
  if (e = e || 100, typeof i == "number")
    return Math.ceil(i * t * e) / e;
  if (typeof i != "string")
    return i;
  const s = i.split(nl);
  if (s === null || !s.length)
    return i;
  const n = [];
  let o = s.shift(), r = sl.test(o);
  for (; ; ) {
    if (r) {
      const a = parseFloat(o);
      isNaN(a) ? n.push(o) : n.push(Math.ceil(a * t * e) / e);
    } else
      n.push(o);
    if (o = s.shift(), o === void 0)
      return n.join("");
    r = !r;
  }
}
function ol(i, t = "defs") {
  let e = "";
  const s = i.indexOf("<" + t);
  for (; s >= 0; ) {
    const n = i.indexOf(">", s), o = i.indexOf("</" + t);
    if (n === -1 || o === -1)
      break;
    const r = i.indexOf(">", o);
    if (r === -1)
      break;
    e += i.slice(n + 1, o).trim(), i = i.slice(0, s).trim() + i.slice(r + 1);
  }
  return {
    defs: e,
    content: i
  };
}
function rl(i, t) {
  return i ? "<defs>" + i + "</defs>" + t : t;
}
function al(i, t, e) {
  const s = ol(i);
  return rl(s.defs, t + s.content + e);
}
var ll = (i) => i === "unset" || i === "undefined" || i === "none";
function fo(i, t) {
  const e = {
    ...je,
    ...i
  }, s = {
    ...Qs,
    ...t
  }, n = {
    left: e.left,
    top: e.top,
    width: e.width,
    height: e.height
  };
  let o = e.body;
  [e, s].forEach((v) => {
    const x = [], w = v.hFlip, m = v.vFlip;
    let g = v.rotate;
    w ? m ? g += 2 : (x.push(
      "translate(" + (n.width + n.left).toString() + " " + (0 - n.top).toString() + ")"
    ), x.push("scale(-1 1)"), n.top = n.left = 0) : m && (x.push(
      "translate(" + (0 - n.left).toString() + " " + (n.height + n.top).toString() + ")"
    ), x.push("scale(1 -1)"), n.top = n.left = 0);
    let _;
    switch (g < 0 && (g -= Math.floor(g / 4) * 4), g = g % 4, g) {
      case 1:
        _ = n.height / 2 + n.top, x.unshift(
          "rotate(90 " + _.toString() + " " + _.toString() + ")"
        );
        break;
      case 2:
        x.unshift(
          "rotate(180 " + (n.width / 2 + n.left).toString() + " " + (n.height / 2 + n.top).toString() + ")"
        );
        break;
      case 3:
        _ = n.width / 2 + n.left, x.unshift(
          "rotate(-90 " + _.toString() + " " + _.toString() + ")"
        );
        break;
    }
    g % 2 === 1 && (n.left !== n.top && (_ = n.left, n.left = n.top, n.top = _), n.width !== n.height && (_ = n.width, n.width = n.height, n.height = _)), x.length && (o = al(
      o,
      '<g transform="' + x.join(" ") + '">',
      "</g>"
    ));
  });
  const r = s.width, a = s.height, l = n.width, d = n.height;
  let u, h;
  r === null ? (h = a === null ? "1em" : a === "auto" ? d : a, u = Zi(h, l / d)) : (u = r === "auto" ? l : r, h = a === null ? Zi(u, d / l) : a === "auto" ? d : a);
  const c = {}, p = (v, x) => {
    ll(x) || (c[v] = x.toString());
  };
  p("width", u), p("height", h);
  const b = [n.left, n.top, l, d];
  return c.viewBox = b.join(" "), {
    attributes: c,
    viewBox: b,
    body: o
  };
}
function yn(i, t) {
  let e = i.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const s in t)
    e += " " + s + '="' + t[s] + '"';
  return '<svg xmlns="http://www.w3.org/2000/svg"' + e + ">" + i + "</svg>";
}
function cl(i) {
  return i.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
}
function dl(i) {
  return "data:image/svg+xml," + cl(i);
}
function mo(i) {
  return 'url("' + dl(i) + '")';
}
var ul = () => {
  let i;
  try {
    if (i = fetch, typeof i == "function")
      return i;
  } catch {
  }
};
var ui = ul();
function hl(i) {
  ui = i;
}
function pl() {
  return ui;
}
function fl(i, t) {
  const e = _i(i);
  if (!e)
    return 0;
  let s;
  if (!e.maxURL)
    s = 0;
  else {
    let n = 0;
    e.resources.forEach((r) => {
      n = Math.max(n, r.length);
    });
    const o = t + ".json?icons=";
    s = e.maxURL - n - e.path.length - o.length;
  }
  return s;
}
function ml(i) {
  return i === 404;
}
var bl = (i, t, e) => {
  const s = [], n = fl(i, t), o = "icons";
  let r = {
    type: o,
    provider: i,
    prefix: t,
    icons: []
  }, a = 0;
  return e.forEach((l, d) => {
    a += l.length + 1, a >= n && d > 0 && (s.push(r), r = {
      type: o,
      provider: i,
      prefix: t,
      icons: []
    }, a = l.length), r.icons.push(l);
  }), s.push(r), s;
};
function gl(i) {
  if (typeof i == "string") {
    const t = _i(i);
    if (t)
      return t.path;
  }
  return "/";
}
var vl = (i, t, e) => {
  if (!ui) {
    e("abort", 424);
    return;
  }
  let s = gl(t.provider);
  switch (t.type) {
    case "icons": {
      const o = t.prefix, r = t.icons.join(","), a = new URLSearchParams({
        icons: r
      });
      s += o + ".json?" + a.toString();
      break;
    }
    case "custom": {
      const o = t.uri;
      s += o.slice(0, 1) === "/" ? o.slice(1) : o;
      break;
    }
    default:
      e("abort", 400);
      return;
  }
  let n = 503;
  ui(i + s).then((o) => {
    const r = o.status;
    if (r !== 200) {
      setTimeout(() => {
        e(ml(r) ? "abort" : "next", r);
      });
      return;
    }
    return n = 501, o.json();
  }).then((o) => {
    if (typeof o != "object" || o === null) {
      setTimeout(() => {
        o === 404 ? e("abort", o) : e("next", n);
      });
      return;
    }
    setTimeout(() => {
      e("success", o);
    });
  }).catch(() => {
    e("next", n);
  });
};
var yl = {
  prepare: bl,
  send: vl
};
function ss(i, t) {
  switch (i) {
    case "local":
    case "session":
      zt[i] = t;
      break;
    case "all":
      for (const e in zt)
        zt[e] = t;
      break;
  }
}
var Di = "data-style";
var bo = "";
function _l(i) {
  bo = i;
}
function os(i, t) {
  let e = Array.from(i.childNodes).find((s) => s.hasAttribute && s.hasAttribute(Di));
  e || (e = document.createElement("style"), e.setAttribute(Di, Di), i.appendChild(e)), e.textContent = ":host{display:inline-block;vertical-align:" + (t ? "-0.125em" : "0") + "}span,svg{display:block}" + bo;
}
function go() {
  Qn("", yl), eo(true);
  let i;
  try {
    i = window;
  } catch {
  }
  if (i) {
    if (ho(), i.IconifyPreload !== void 0) {
      const t = i.IconifyPreload, e = "Invalid IconifyPreload syntax.";
      typeof t == "object" && t !== null && (t instanceof Array ? t : [t]).forEach((s) => {
        try {
          (typeof s != "object" || s === null || s instanceof Array || // Check for 'icons' and 'prefix'
          typeof s.icons != "object" || typeof s.prefix != "string" || // Add icon set
          !Xn(s)) && console.error(e);
        } catch {
          console.error(e);
        }
      });
    }
    if (i.IconifyProviders !== void 0) {
      const t = i.IconifyProviders;
      if (typeof t == "object" && t !== null)
        for (const e in t) {
          const s = "IconifyProviders[" + e + "] is invalid.";
          try {
            const n = t[e];
            if (typeof n != "object" || !n || n.resources === void 0)
              continue;
            Zn(e, n) || console.error(s);
          } catch {
            console.error(s);
          }
        }
    }
  }
  return {
    enableCache: (t) => ss(t, true),
    disableCache: (t) => ss(t, false),
    iconLoaded: Jn,
    iconExists: Jn,
    getIcon: La,
    listIcons: Ma,
    addIcon: io,
    addCollection: Xn,
    calculateSize: Zi,
    buildIcon: fo,
    iconToHTML: yn,
    svgToURL: mo,
    loadIcons: vn,
    loadIcon: Ka,
    addAPIProvider: Zn,
    appendCustomStyle: _l,
    _api: {
      getAPIConfig: _i,
      setAPIModule: Qn,
      sendAPIQuery: oo,
      setFetch: hl,
      getFetch: pl,
      listAPIProviders: Va
    }
  };
}
var Ki = {
  "background-color": "currentColor"
};
var vo = {
  "background-color": "transparent"
};
var rs = {
  image: "var(--svg)",
  repeat: "no-repeat",
  size: "100% 100%"
};
var as = {
  "-webkit-mask": Ki,
  mask: Ki,
  background: vo
};
for (const i in as) {
  const t = as[i];
  for (const e in rs)
    t[i + "-" + e] = rs[e];
}
function ls(i) {
  return i ? i + (i.match(/^[-0-9.]+$/) ? "px" : "") : "inherit";
}
function xl(i, t, e) {
  const s = document.createElement("span");
  let n = i.body;
  n.indexOf("<a") !== -1 && (n += "<!-- " + Date.now() + " -->");
  const o = i.attributes, r = yn(n, {
    ...o,
    width: t.width + "",
    height: t.height + ""
  }), a = mo(r), l = s.style, d = {
    "--svg": a,
    width: ls(o.width),
    height: ls(o.height),
    ...e ? Ki : vo
  };
  for (const u in d)
    l.setProperty(u, d[u]);
  return s;
}
var $e;
function wl() {
  try {
    $e = window.trustedTypes.createPolicy("iconify", {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      createHTML: (i) => i
    });
  } catch {
    $e = null;
  }
}
function $l(i) {
  return $e === void 0 && wl(), $e ? $e.createHTML(i) : i;
}
function Cl(i) {
  const t = document.createElement("span"), e = i.attributes;
  let s = "";
  e.width || (s = "width: inherit;"), e.height || (s += "height: inherit;"), s && (e.style = s);
  const n = yn(i.body, e);
  return t.innerHTML = $l(n), t.firstChild;
}
function tn(i) {
  return Array.from(i.childNodes).find((t) => {
    const e = t.tagName && t.tagName.toUpperCase();
    return e === "SPAN" || e === "SVG";
  });
}
function cs(i, t) {
  const e = t.icon.data, s = t.customisations, n = fo(e, s);
  s.preserveAspectRatio && (n.attributes.preserveAspectRatio = s.preserveAspectRatio);
  const o = t.renderedMode;
  let r;
  switch (o) {
    case "svg":
      r = Cl(n);
      break;
    default:
      r = xl(n, {
        ...je,
        ...e
      }, o === "mask");
  }
  const a = tn(i);
  a ? r.tagName === "SPAN" && a.tagName === r.tagName ? a.setAttribute("style", r.getAttribute("style")) : i.replaceChild(r, a) : i.appendChild(r);
}
function ds(i, t, e) {
  const s = e && (e.rendered ? e : e.lastRender);
  return {
    rendered: false,
    inline: t,
    icon: i,
    lastRender: s
  };
}
function El(i = "iconify-icon") {
  let t, e;
  try {
    t = window.customElements, e = window.HTMLElement;
  } catch {
    return;
  }
  if (!t || !e)
    return;
  const s = t.get(i);
  if (s)
    return s;
  const n = [
    // Icon
    "icon",
    // Mode
    "mode",
    "inline",
    "observe",
    // Customisations
    "width",
    "height",
    "rotate",
    "flip"
  ], o = class extends e {
    /**
     * Constructor
     */
    constructor() {
      super(), Rt(this, "_shadowRoot"), Rt(this, "_initialised", false), Rt(this, "_state"), Rt(this, "_checkQueued", false), Rt(this, "_connected", false), Rt(this, "_observer", null), Rt(this, "_visible", true);
      const a = this._shadowRoot = this.attachShadow({
        mode: "open"
      }), l = zi(this);
      os(a, l), this._state = ds({
        value: ""
      }, l), this._queueCheck();
    }
    /**
     * Connected to DOM
     */
    connectedCallback() {
      this._connected = true, this.startObserver();
    }
    /**
     * Disconnected from DOM
     */
    disconnectedCallback() {
      this._connected = false, this.stopObserver();
    }
    /**
     * Observed attributes
     */
    static get observedAttributes() {
      return n.slice(0);
    }
    /**
     * Observed properties that are different from attributes
     *
     * Experimental! Need to test with various frameworks that support it
     */
    /*
    static get properties() {
        return {
            inline: {
                type: Boolean,
                reflect: true,
            },
            // Not listing other attributes because they are strings or combination
            // of string and another type. Cannot have multiple types
        };
    }
    */
    /**
     * Attribute has changed
     */
    attributeChangedCallback(a) {
      switch (a) {
        case "inline": {
          const l = zi(this), d = this._state;
          l !== d.inline && (d.inline = l, os(this._shadowRoot, l));
          break;
        }
        case "observer": {
          this.observer ? this.startObserver() : this.stopObserver();
          break;
        }
        default:
          this._queueCheck();
      }
    }
    /**
     * Get/set icon
     */
    get icon() {
      const a = this.getAttribute("icon");
      if (a && a.slice(0, 1) === "{")
        try {
          return JSON.parse(a);
        } catch {
        }
      return a;
    }
    set icon(a) {
      typeof a == "object" && (a = JSON.stringify(a)), this.setAttribute("icon", a);
    }
    /**
     * Get/set inline
     */
    get inline() {
      return zi(this);
    }
    set inline(a) {
      a ? this.setAttribute("inline", "true") : this.removeAttribute("inline");
    }
    /**
     * Get/set observer
     */
    get observer() {
      return this.hasAttribute("observer");
    }
    set observer(a) {
      a ? this.setAttribute("observer", "true") : this.removeAttribute("observer");
    }
    /**
     * Restart animation
     */
    restartAnimation() {
      const a = this._state;
      if (a.rendered) {
        const l = this._shadowRoot;
        if (a.renderedMode === "svg")
          try {
            l.lastChild.setCurrentTime(0);
            return;
          } catch {
          }
        cs(l, a);
      }
    }
    /**
     * Get status
     */
    get status() {
      const a = this._state;
      return a.rendered ? "rendered" : a.icon.data === null ? "failed" : "loading";
    }
    /**
     * Queue attributes re-check
     */
    _queueCheck() {
      this._checkQueued || (this._checkQueued = true, setTimeout(() => {
        this._check();
      }));
    }
    /**
     * Check for changes
     */
    _check() {
      if (!this._checkQueued)
        return;
      this._checkQueued = false;
      const a = this._state, l = this.getAttribute("icon");
      if (l !== a.icon.value) {
        this._iconChanged(l);
        return;
      }
      if (!a.rendered || !this._visible)
        return;
      const d = this.getAttribute("mode"), u = qn(this);
      (a.attrMode !== d || ka(a.customisations, u) || !tn(this._shadowRoot)) && this._renderIcon(a.icon, u, d);
    }
    /**
     * Icon value has changed
     */
    _iconChanged(a) {
      const l = el(a, (d, u, h) => {
        const c = this._state;
        if (c.rendered || this.getAttribute("icon") !== d)
          return;
        const p = {
          value: d,
          name: u,
          data: h
        };
        p.data ? this._gotIconData(p) : c.icon = p;
      });
      l.data ? this._gotIconData(l) : this._state = ds(l, this._state.inline, this._state);
    }
    /**
     * Force render icon on state change
     */
    _forceRender() {
      if (!this._visible) {
        const a = tn(this._shadowRoot);
        a && this._shadowRoot.removeChild(a);
        return;
      }
      this._queueCheck();
    }
    /**
     * Got new icon data, icon is ready to (re)render
     */
    _gotIconData(a) {
      this._checkQueued = false, this._renderIcon(a, qn(this), this.getAttribute("mode"));
    }
    /**
     * Re-render based on icon data
     */
    _renderIcon(a, l, d) {
      const u = il(a.data.body, d), h = this._state.inline;
      cs(this._shadowRoot, this._state = {
        rendered: true,
        icon: a,
        inline: h,
        customisations: l,
        attrMode: d,
        renderedMode: u
      });
    }
    /**
     * Start observer
     */
    startObserver() {
      if (!this._observer)
        try {
          this._observer = new IntersectionObserver((a) => {
            const l = a.some((d) => d.isIntersecting);
            l !== this._visible && (this._visible = l, this._forceRender());
          }), this._observer.observe(this);
        } catch {
          if (this._observer) {
            try {
              this._observer.disconnect();
            } catch {
            }
            this._observer = null;
          }
        }
    }
    /**
     * Stop observer
     */
    stopObserver() {
      this._observer && (this._observer.disconnect(), this._observer = null, this._visible = true, this._connected && this._forceRender());
    }
  };
  n.forEach((a) => {
    a in o.prototype || Object.defineProperty(o.prototype, a, {
      get: function() {
        return this.getAttribute(a);
      },
      set: function(l) {
        l !== null ? this.setAttribute(a, l) : this.removeAttribute(a);
      }
    });
  });
  const r = go();
  for (const a in r)
    o[a] = o.prototype[a] = r[a];
  return t.define(i, o), o;
}
El() || go();
var Al = Object.defineProperty;
var Sl = Object.getOwnPropertyDescriptor;
var nt = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Sl(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && Al(t, e, n), n;
};
var Qe;
var Q = (Qe = class extends I {
  constructor() {
    super(), this.labelHidden = false, this.active = false, this.disabled = false, this.vertical = false, this.tooltipVisible = false, this._stateBeforeLoading = {
      disabled: false,
      icon: ""
    }, this._loading = false, this._parent = Yt(), this._tooltip = Yt(), this._contextMenu = Yt(), this._mouseLeave = false, this.onWindowMouseUp = (i) => {
      const { value: t } = this._contextMenu;
      !this.contains(i.target) && t && (t.visible = false);
    }, this.onClick = (i) => {
      i.stopPropagation(), this.disabled || this.dispatchEvent(new Event("click"));
    }, this.mouseLeave = true;
  }
  set loading(i) {
    if (this._loading = i, i)
      this._stateBeforeLoading = {
        disabled: this.disabled,
        icon: this.icon
      }, this.disabled = i, this.icon = "eos-icons:loading";
    else {
      const { disabled: t, icon: e } = this._stateBeforeLoading;
      this.disabled = t, this.icon = e;
    }
  }
  get loading() {
    return this._loading;
  }
  set mouseLeave(i) {
    this._mouseLeave = i, i && (this.tooltipVisible = false, clearTimeout(this.timeoutID));
  }
  get mouseLeave() {
    return this._mouseLeave;
  }
  computeTooltipPosition() {
    const { value: i } = this._parent, { value: t } = this._tooltip;
    i && t && Us(i, t, {
      placement: "bottom",
      middleware: [Is(10), Fs(), Bs(), Hs({ padding: 5 })]
    }).then((e) => {
      const { x: s, y: n } = e;
      Object.assign(t.style, {
        left: `${s}px`,
        top: `${n}px`
      });
    });
  }
  onMouseEnter() {
    if (!(this.tooltipTitle || this.tooltipText))
      return;
    this.mouseLeave = false;
    const i = this.tooltipTime ?? 700;
    this.timeoutID = setTimeout(() => {
      this.mouseLeave || (this.computeTooltipPosition(), this.tooltipVisible = true);
    }, i);
  }
  onChildrenClick(i) {
    i.stopPropagation();
    const { value: t } = this._contextMenu;
    t && (t.visible = !t.visible);
  }
  onSlotChange(i) {
    const { value: t } = this._contextMenu, e = i.target.assignedElements();
    for (const s of e) {
      if (!(s instanceof Qe)) {
        s.remove(), console.warn(
          "Only bim-button is allowed inside bim-button. Child has been removed."
        );
        continue;
      }
      s.addEventListener("click", () => t == null ? void 0 : t.updatePosition());
    }
    this.requestUpdate();
  }
  click() {
    this.disabled || super.click();
  }
  connectedCallback() {
    super.connectedCallback(), window.addEventListener("mouseup", this.onWindowMouseUp);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), window.removeEventListener("mouseup", this.onWindowMouseUp);
  }
  render() {
    const i = y`
      <div ${_t(this._tooltip)} class="tooltip">
        ${this.tooltipTitle ? y`<p style="text-wrap: nowrap;">
              <strong>${this.tooltipTitle}</strong>
            </p>` : null}
        ${this.tooltipText ? y`<p style="width: 9rem;">${this.tooltipText}</p>` : null}
      </div>
    `, t = this.children.length > 0;
    return y`
      <div ${_t(this._parent)} class="parent" @click=${this.onClick}>
        ${this.label || this.icon ? y`
              <div
                class="button"
                @mouseenter=${this.onMouseEnter}
                @mouseleave=${() => this.mouseLeave = true}
              >
                <bim-label
                  .icon=${this.icon}
                  .vertical=${this.vertical}
                  .labelHidden=${this.labelHidden}
                  >${this.label}</bim-label
                >
              </div>
            ` : null}
        ${this.tooltipTitle || this.tooltipText ? i : null}
        ${t ? y`
              <div class="children" @click=${this.onChildrenClick}>
                <svg
                  style="flex-shrink: 0; fill: var(--bim-dropdown--c, var(--bim-ui_bg-contrast-100))"
                  xmlns="http://www.w3.org/2000/svg"
                  height="1.125rem"
                  viewBox="0 0 24 24"
                  width="1.125rem"
                  fill="#9ca3af"
                >
                  <path d="M0 0h24v24H0V0z" fill="none" />
                  <path
                    d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                  />
                </svg>
              </div>
            ` : null}
        <bim-context-menu
          ${_t(this._contextMenu)}
          style="row-gap: var(--bim-ui_size-4xs)"
        >
          <slot @slotchange=${this.onSlotChange}></slot>
        </bim-context-menu>
      </div>
    `;
  }
}, Qe.styles = T`
    :host {
      --bim-label--c: var(--bim-ui_bg-contrast-100, white);
      display: block;
      flex: 1;
      pointer-events: none;
      background-color: var(--bim-button--bgc, var(--bim-ui_bg-contrast-20));
      border-radius: var(--bim-ui_size-4xs);
      transition: all 0.15s;
    }

    :host(:not([disabled]):hover) {
      cursor: pointer;
    }

    bim-label {
      pointer-events: none;
    }

    .parent {
      --bim-icon--c: var(--bim-label--c);
      position: relative;
      display: flex;
      height: 100%;
      user-select: none;
      row-gap: 0.125rem;
      min-height: var(--bim-ui_size-5xl);
      min-width: var(--bim-ui_size-5xl);
    }

    .button,
    .children {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      pointer-events: auto;
    }

    .children {
      padding: 0 0.375rem;
      position: absolute;
      height: 100%;
      right: 0;
    }

    :host(:not([label-hidden])[icon][vertical]) .parent {
      min-height: 2.5rem;
    }

    .button {
      flex-grow: 1;
    }

    :host(:not([label-hidden])[label]) .button {
      justify-content: var(--bim-button--jc, center);
    }

    :host(:hover),
    :host([active]) {
      --bim-label--c: var(--bim-ui_main-contrast);
      background-color: var(--bim-ui_main-base);
    }

    :host(:not([label]):not([icon])) .children {
      flex: 1;
    }

    :host([vertical]) .parent {
      justify-content: center;
    }

    :host(:not([label-hidden])[label]) .button {
      padding: 0 0.5rem;
    }

    :host([disabled]) {
      --bim-label--c: var(--bim-ui_bg-contrast-80);
      background-color: gray;
    }

    ::slotted(bim-button) {
      --bim-icon--fz: var(--bim-ui_size-base);
      --bim-button--bdrs: var(--bim-ui_size-4xs);
      --bim-button--olw: 0;
      --bim-button--olc: transparent;
    }

    .tooltip {
      position: absolute;
      padding: 0.75rem;
      z-index: 99;
      display: flex;
      flex-flow: column;
      row-gap: 0.375rem;
      box-shadow: 0 0 10px 3px rgba(0 0 0 / 20%);
      outline: 1px solid var(--bim-ui_bg-contrast-40);
      font-size: var(--bim-ui_size-xs);
      border-radius: var(--bim-ui_size-4xs);
      background-color: var(--bim-ui_bg-contrast-20);
      color: var(--bim-ui_bg-contrast-100);
    }

    .tooltip p {
      margin: 0;
      padding: 0;
    }

    :host(:not([tooltip-visible])) .tooltip {
      display: none;
    }
  `, Qe);
nt([
  f({ type: String, reflect: true })
], Q.prototype, "label", 2);
nt([
  f({ type: Boolean, attribute: "label-hidden", reflect: true })
], Q.prototype, "labelHidden", 2);
nt([
  f({ type: Boolean, reflect: true })
], Q.prototype, "active", 2);
nt([
  f({ type: Boolean, reflect: true, attribute: "disabled" })
], Q.prototype, "disabled", 2);
nt([
  f({ type: String, reflect: true })
], Q.prototype, "icon", 2);
nt([
  f({ type: Boolean, reflect: true })
], Q.prototype, "vertical", 2);
nt([
  f({ type: Number, attribute: "tooltip-time", reflect: true })
], Q.prototype, "tooltipTime", 2);
nt([
  f({ type: Boolean, attribute: "tooltip-visible", reflect: true })
], Q.prototype, "tooltipVisible", 2);
nt([
  f({ type: String, attribute: "tooltip-title", reflect: true })
], Q.prototype, "tooltipTitle", 2);
nt([
  f({ type: String, attribute: "tooltip-text", reflect: true })
], Q.prototype, "tooltipText", 2);
nt([
  f({ type: Boolean, reflect: true })
], Q.prototype, "loading", 1);
var kl = Q;
var Ol = Object.defineProperty;
var Be = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Ol(t, e, n), n;
};
var yo = class extends I {
  constructor() {
    super(...arguments), this.checked = false, this.inverted = false, this.onValueChange = new Event("change");
  }
  /**
   * A getter that returns the current checked state of the checkbox. This is useful for retrieving the checkbox's value in form submissions or JavaScript interactions as it provides a consistent `value` property as many other components.
   * @type {boolean}
   * @default false
   * @example <script>console.log(document.querySelector('bim-checkbox').value);<\/script>
   * @example
   * const checkbox = document.createElement('bim-checkbox');
   * document.body.appendChild(checkbox);
   * console.log(checkbox.value); // false initially
   */
  get value() {
    return this.checked;
  }
  onChange(t) {
    t.stopPropagation(), this.checked = t.target.checked, this.dispatchEvent(this.onValueChange);
  }
  render() {
    return y`
      <div class="parent">
        ${this.label ? y`<bim-label .icon="${this.icon}">${this.label}</bim-label> ` : null}
        <input
          type="checkbox"
          aria-label=${this.label || this.name || "Checkbox Input"}
          @change="${this.onChange}"
          .checked="${this.checked}"
        />
      </div>
    `;
  }
};
yo.styles = T`
    :host {
      display: block;
    }

    .parent {
      display: flex;
      justify-content: space-between;
      height: 1.75rem;
      column-gap: 0.25rem;
      width: 100%;
      align-items: center;
      transition: all 0.15s;
    }

    :host([inverted]) .parent {
      flex-direction: row-reverse;
      justify-content: start;
    }

    input {
      height: 1rem;
      width: 1rem;
      cursor: pointer;
      border: none;
      outline: none;
      accent-color: var(--bim-checkbox--c, var(--bim-ui_main-base));
      transition: all 0.15s;
    }

    input:focus {
      outline: var(--bim-checkbox--olw, 2px) solid
        var(--bim-checkbox--olc, var(--bim-ui_accent-base));
    }
  `;
var ae = yo;
Be([
  f({ type: String, reflect: true })
], ae.prototype, "icon");
Be([
  f({ type: String, reflect: true })
], ae.prototype, "name");
Be([
  f({ type: String, reflect: true })
], ae.prototype, "label");
Be([
  f({ type: Boolean, reflect: true })
], ae.prototype, "checked");
Be([
  f({ type: Boolean, reflect: true })
], ae.prototype, "inverted");
var Il = Object.defineProperty;
var le = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Il(t, e, n), n;
};
var _o = class extends I {
  constructor() {
    super(...arguments), this.vertical = false, this.color = "#bcf124", this._colorInput = Yt(), this._textInput = Yt(), this.onValueChange = new Event("input"), this.onOpacityInput = (t) => {
      const e = t.target;
      this.opacity = e.value, this.dispatchEvent(this.onValueChange);
    };
  }
  /**
   * Represents both the color and opacity values combined into a single object. This is an instance property, not an HTMLElement attribute.
   * @type {Object}
   * @example
   * const colorInput = document.createElement('bim-color-input');
   * colorInput.value = { color: '#ff0000', opacity: 0.5 };
   */
  set value(t) {
    const { color: e, opacity: s } = t;
    this.color = e, s && (this.opacity = s);
  }
  get value() {
    const t = {
      color: this.color
    };
    return this.opacity && (t.opacity = this.opacity), t;
  }
  onColorInput(t) {
    t.stopPropagation();
    const { value: e } = this._colorInput;
    e && (this.color = e.value, this.dispatchEvent(this.onValueChange));
  }
  onTextInput(t) {
    t.stopPropagation();
    const { value: e } = this._textInput;
    if (!e)
      return;
    const { value: s } = e;
    let n = s.replace(/[^a-fA-F0-9]/g, "");
    n.startsWith("#") || (n = `#${n}`), e.value = n.slice(0, 7), e.value.length === 7 && (this.color = e.value, this.dispatchEvent(this.onValueChange));
  }
  /**
   * Focuses on the color input by programmatically triggering a click event on the underlying color input element.
   * If the color input element is not available, the function does nothing.
   */
  focus() {
    const { value: t } = this._colorInput;
    t && t.click();
  }
  render() {
    return y`
      <div class="parent">
        <bim-input
          .label=${this.label}
          .icon=${this.icon}
          .vertical="${this.vertical}"
        >
          <div class="color-container">
            <div
              style="display: flex; align-items: center; gap: .375rem; height: 100%; flex: 1; padding: 0 0.5rem;"
            >
              <input
                ${_t(this._colorInput)}
                @input="${this.onColorInput}"
                type="color"
                aria-label=${this.label || this.name || "Color Input"}
                value="${this.color}"
              />
              <div
                @click=${this.focus}
                class="sample"
                style="background-color: ${this.color}"
              ></div>
              <input
                ${_t(this._textInput)}
                @input="${this.onTextInput}"
                value="${this.color}"
                type="text"
                aria-label=${this.label || this.name || "Text Color Input"}
              />
            </div>
            ${this.opacity !== void 0 ? y`<bim-number-input
                  @change=${this.onOpacityInput}
                  slider
                  suffix="%"
                  min="0"
                  value=${this.opacity}
                  max="100"
                ></bim-number-input>` : null}
          </div>
        </bim-input>
      </div>
    `;
  }
};
_o.styles = T`
    :host {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
      flex: 1;
      display: block;
    }

    :host(:focus) {
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(--bim-ui_accent-base);
    }

    .parent {
      display: flex;
      gap: 0.375rem;
    }

    .color-container {
      position: relative;
      outline: none;
      display: flex;
      height: 100%;
      gap: 0.5rem;
      justify-content: flex-start;
      align-items: center;
      flex: 1;
      border-radius: var(--bim-color-input--bdrs, var(--bim-ui_size-4xs));
    }

    .color-container input[type="color"] {
      position: absolute;
      bottom: -0.25rem;
      visibility: hidden;
      width: 0;
      height: 0;
    }

    .color-container .sample {
      width: 1rem;
      height: 1rem;
      border-radius: 0.125rem;
      background-color: #fff;
    }

    .color-container input[type="text"] {
      height: 100%;
      flex: 1;
      width: 3.25rem;
      text-transform: uppercase;
      font-size: 0.75rem;
      background-color: transparent;
      padding: 0%;
      outline: none;
      border: none;
      color: var(--bim-color-input--c, var(--bim-ui_bg-contrast-100));
    }

    bim-number-input {
      flex-grow: 0;
    }
  `;
var Bt = _o;
le([
  f({ type: String, reflect: true })
], Bt.prototype, "name");
le([
  f({ type: String, reflect: true })
], Bt.prototype, "label");
le([
  f({ type: String, reflect: true })
], Bt.prototype, "icon");
le([
  f({ type: Boolean, reflect: true })
], Bt.prototype, "vertical");
le([
  f({ type: Number, reflect: true })
], Bt.prototype, "opacity");
le([
  f({ type: String, reflect: true })
], Bt.prototype, "color");
var Tl = T`
  ::-webkit-scrollbar {
    width: 0.4rem;
    height: 0.4rem;
    overflow: hidden;
  }

  ::-webkit-scrollbar-thumb {
    border-radius: 0.25rem;
    background-color: var(
      --bim-scrollbar--c,
      color-mix(in lab, var(--bim-ui_main-base), white 15%)
    );
  }

  ::-webkit-scrollbar-track {
    background-color: var(--bim-scrollbar--bgc, var(--bim-ui_bg-base));
  }
`;
var Rl = T`
  :root {
    /* Grayscale Colors */
    --bim-ui_gray-0: hsl(210 10% 5%);
    --bim-ui_gray-1: hsl(210 10% 10%);
    --bim-ui_gray-2: hsl(210 10% 20%);
    --bim-ui_gray-3: hsl(210 10% 30%);
    --bim-ui_gray-4: hsl(210 10% 40%);
    --bim-ui_gray-6: hsl(210 10% 60%);
    --bim-ui_gray-7: hsl(210 10% 70%);
    --bim-ui_gray-8: hsl(210 10% 80%);
    --bim-ui_gray-9: hsl(210 10% 90%);
    --bim-ui_gray-10: hsl(210 10% 95%);

    /* Brand Colors */
    --bim-ui_main-base: #6528d7;
    --bim-ui_accent-base: #bcf124;

    /* Brand Colors Contrasts */
    --bim-ui_main-contrast: var(--bim-ui_gray-10);
    --bim-ui_accent-contrast: var(--bim-ui_gray-0);

    /* Sizes */
    --bim-ui_size-4xs: 0.375rem;
    --bim-ui_size-3xs: 0.5rem;
    --bim-ui_size-2xs: 0.625rem;
    --bim-ui_size-xs: 0.75rem;
    --bim-ui_size-sm: 0.875rem;
    --bim-ui_size-base: 1rem;
    --bim-ui_size-lg: 1.125rem;
    --bim-ui_size-xl: 1.25rem;
    --bim-ui_size-2xl: 1.375rem;
    --bim-ui_size-3xl: 1.5rem;
    --bim-ui_size-4xl: 1.625rem;
    --bim-ui_size-5xl: 1.75rem;
    --bim-ui_size-6xl: 1.875rem;
    --bim-ui_size-7xl: 2rem;
    --bim-ui_size-8xl: 2.125rem;
    --bim-ui_size-9xl: 2.25rem;
  }

  /* Background Colors */
  @media (prefers-color-scheme: dark) {
    :root {
      --bim-ui_bg-base: var(--bim-ui_gray-0);
      --bim-ui_bg-contrast-10: var(--bim-ui_gray-1);
      --bim-ui_bg-contrast-20: var(--bim-ui_gray-2);
      --bim-ui_bg-contrast-30: var(--bim-ui_gray-3);
      --bim-ui_bg-contrast-40: var(--bim-ui_gray-4);
      --bim-ui_bg-contrast-60: var(--bim-ui_gray-6);
      --bim-ui_bg-contrast-80: var(--bim-ui_gray-8);
      --bim-ui_bg-contrast-100: var(--bim-ui_gray-10);
    }
  }

  @media (prefers-color-scheme: light) {
    :root {
      --bim-ui_bg-base: var(--bim-ui_gray-10);
      --bim-ui_bg-contrast-10: var(--bim-ui_gray-9);
      --bim-ui_bg-contrast-20: var(--bim-ui_gray-8);
      --bim-ui_bg-contrast-30: var(--bim-ui_gray-7);
      --bim-ui_bg-contrast-40: var(--bim-ui_gray-6);
      --bim-ui_bg-contrast-60: var(--bim-ui_gray-4);
      --bim-ui_bg-contrast-80: var(--bim-ui_gray-2);
      --bim-ui_bg-contrast-100: var(--bim-ui_gray-0);
      --bim-ui_accent-base: #6528d7;
    }
  }

  html.bim-ui-dark {
    --bim-ui_bg-base: var(--bim-ui_gray-0);
    --bim-ui_bg-contrast-10: var(--bim-ui_gray-1);
    --bim-ui_bg-contrast-20: var(--bim-ui_gray-2);
    --bim-ui_bg-contrast-30: var(--bim-ui_gray-3);
    --bim-ui_bg-contrast-40: var(--bim-ui_gray-4);
    --bim-ui_bg-contrast-60: var(--bim-ui_gray-6);
    --bim-ui_bg-contrast-80: var(--bim-ui_gray-8);
    --bim-ui_bg-contrast-100: var(--bim-ui_gray-10);
  }

  html.bim-ui-light {
    --bim-ui_bg-base: var(--bim-ui_gray-10);
    --bim-ui_bg-contrast-10: var(--bim-ui_gray-9);
    --bim-ui_bg-contrast-20: var(--bim-ui_gray-8);
    --bim-ui_bg-contrast-30: var(--bim-ui_gray-7);
    --bim-ui_bg-contrast-40: var(--bim-ui_gray-6);
    --bim-ui_bg-contrast-60: var(--bim-ui_gray-4);
    --bim-ui_bg-contrast-80: var(--bim-ui_gray-2);
    --bim-ui_bg-contrast-100: var(--bim-ui_gray-0);
    --bim-ui_accent-base: #6528d7;
  }
`;
var Ft = {
  scrollbar: Tl,
  globalStyles: Rl
};
var Pl = Object.defineProperty;
var Nl = Object.getOwnPropertyDescriptor;
var Ml = (i, t, e, s) => {
  for (var n = Nl(t, e), o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Pl(t, e, n), n;
};
var xo = class extends I {
  constructor() {
    super(...arguments), this._visible = false, this._middleware = {
      name: "middleware",
      async fn(t) {
        const { right: e, top: s } = await an(t);
        return t.x -= Math.sign(e) === 1 ? e + 5 : 0, t.y -= Math.sign(s) === 1 ? s + 5 : 0, t;
      }
    };
  }
  get visible() {
    return this._visible;
  }
  set visible(t) {
    this._visible = t, t && this.updatePosition();
  }
  /**
   * Asynchronously updates the position of the context menu relative to a target element.
   * If no target element is provided, it attempts to use the parent node as the target.
   * The position is calculated using the `computePosition` function from `@floating-ui/dom`,
   * which considers various adjustments like offset, inline positioning, flipping, and shifting
   * to ensure the context menu is properly placed relative to the target element.
   *
   * @param [target] - The target element relative to which the context menu should be positioned.
   *                                 If not provided, the parent node is used as the target.
   * @returns A promise that resolves once the position has been updated. This method
   *                          does not explicitly return a value but updates the context menu's style
   *                          properties to position it on the screen.
   */
  async updatePosition(t) {
    const e = t || this.parentNode;
    if (!e) {
      this.visible = false, console.warn("No target element found for context-menu.");
      return;
    }
    const s = await Us(e, this, {
      placement: "right",
      middleware: [
        Is(10),
        Fs(),
        Bs(),
        Hs({ padding: 5 }),
        this._middleware
      ]
    }), { x: n, y: o } = s;
    this.style.left = `${n}px`, this.style.top = `${o}px`;
  }
  render() {
    return y` <slot></slot> `;
  }
};
xo.styles = [
  Ft.scrollbar,
  T`
      :host {
        --bim-label--fz: var(--bim-ui_size-xs);
        position: absolute;
        top: 0;
        left: 0;
        z-index: 999;
        overflow: auto;
        max-height: 20rem;
        min-width: 3rem;
        flex-direction: column;
        box-shadow: 1px 2px 8px 2px rgba(0, 0, 0, 0.15);
        padding: 0.5rem;
        border-radius: var(--bim-ui_size-4xs);
        background-color: var(
          --bim-context-menu--bgc,
          var(--bim-ui_bg-contrast-20)
        );
      }

      :host([visible]) {
        display: flex;
      }

      :host(:not([visible])) {
        display: none;
      }
    `
];
var wo = xo;
Ml([
  f({ type: Boolean, reflect: true })
], wo.prototype, "visible");
var St = class extends I {
  constructor() {
    super(...arguments), this._lazyLoadObserver = null, this._visibleElements = [], this.ELEMENTS_BEFORE_OBSERVER = 20, this.useObserver = false, this.elements = /* @__PURE__ */ new Set(), this.observe = (t) => {
      if (!this.useObserver)
        return;
      for (const s of t)
        this.elements.add(s);
      const e = t.slice(this.ELEMENTS_BEFORE_OBSERVER);
      for (const s of e)
        s.remove();
      this.observeLastElement();
    };
  }
  set visibleElements(t) {
    this._visibleElements = this.useObserver ? t : [], this.requestUpdate();
  }
  get visibleElements() {
    return this._visibleElements;
  }
  getLazyObserver() {
    if (!this.useObserver)
      return null;
    if (this._lazyLoadObserver)
      return this._lazyLoadObserver;
    const t = new IntersectionObserver(
      (e) => {
        const s = e[0];
        if (!s.isIntersecting)
          return;
        const n = s.target;
        t.unobserve(n);
        const o = this.ELEMENTS_BEFORE_OBSERVER + this.visibleElements.length, r = [...this.elements][o];
        r && (this.visibleElements = [...this.visibleElements, r], t.observe(r));
      },
      { threshold: 0.5 }
    );
    return t;
  }
  observeLastElement() {
    const t = this.getLazyObserver();
    if (!t)
      return;
    const e = this.ELEMENTS_BEFORE_OBSERVER + this.visibleElements.length - 1, s = [...this.elements][e];
    s && t.observe(s);
  }
  resetVisibleElements() {
    const t = this.getLazyObserver();
    if (t) {
      for (const e of this.elements)
        t.unobserve(e);
      this.visibleElements = [], this.observeLastElement();
    }
  }
  /**
   * Creates a new UI component instance based on the provided template and initial state.
   *
   * @template T - The type of the UI component element.
   * @template S - The type of the component state.
   *
   * @param template - The component template function (stateless or stateful).
   * @param initialState - The initial state of the component (optional for stateless components).
   * @returns The created UI component element or an array containing the element and a function to update its state.
   */
  static create(t, e) {
    const s = document.createDocumentFragment();
    if (t.length === 0)
      return ie(t(), s), s.firstElementChild;
    if (!e)
      throw new Error(
        "UIComponent: Initial state is required for statefull components."
      );
    let n = e;
    const o = t, r = (a) => (n = { ...n, ...a }, ie(o(n), s), n);
    return r(e), [s.firstElementChild, r];
  }
};
var hi = (i, t = true) => {
  let e = {};
  for (const s of i.children) {
    const n = s, o = n.getAttribute("name") || n.getAttribute("label");
    if (o) {
      if ("value" in n) {
        const r = n.value;
        if (typeof r == "object" && !Array.isArray(r) && Object.keys(r).length === 0)
          continue;
        e[o] = n.value;
      } else if (t) {
        const r = hi(n);
        if (Object.keys(r).length === 0)
          continue;
        e[o] = r;
      }
    } else
      t && (e = { ...e, ...hi(n) });
  }
  return e;
};
var xi = (i) => i === "true" || i === "false" ? i === "true" : i && !isNaN(Number(i)) && i.trim() !== "" ? Number(i) : i;
var Ll = [">=", "<=", "=", ">", "<", "?", "/", "#"];
function us(i) {
  const t = Ll.find(
    (r) => i.split(r).length === 2
  ), e = i.split(t).map((r) => r.trim()), [s, n] = e, o = n.startsWith("'") && n.endsWith("'") ? n.replace(/'/g, "") : xi(n);
  return { key: s, condition: t, value: o };
}
var en = (i) => {
  try {
    const t = [], e = i.split(/&(?![^()]*\))/).map((s) => s.trim());
    for (const s of e) {
      const n = !s.startsWith("(") && !s.endsWith(")"), o = s.startsWith("(") && s.endsWith(")");
      if (n) {
        const r = us(s);
        t.push(r);
      }
      if (o) {
        const r = {
          operator: "&",
          queries: s.replace(/^(\()|(\))$/g, "").split("&").map((a) => a.trim()).map((a, l) => {
            const d = us(a);
            return l > 0 && (d.operator = "&"), d;
          })
        };
        t.push(r);
      }
    }
    return t;
  } catch {
    return null;
  }
};
var hs = (i, t, e) => {
  let s = false;
  switch (t) {
    case "=":
      s = i === e;
      break;
    case "?":
      s = String(i).includes(String(e));
      break;
    case "<":
      (typeof i == "number" || typeof e == "number") && (s = i < e);
      break;
    case "<=":
      (typeof i == "number" || typeof e == "number") && (s = i <= e);
      break;
    case ">":
      (typeof i == "number" || typeof e == "number") && (s = i > e);
      break;
    case ">=":
      (typeof i == "number" || typeof e == "number") && (s = i >= e);
      break;
    case "/":
      s = String(i).startsWith(String(e));
      break;
  }
  return s;
};
var zl = Object.defineProperty;
var Dl = Object.getOwnPropertyDescriptor;
var kt = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Dl(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && zl(t, e, n), n;
};
var $o = class extends I {
  constructor() {
    super(...arguments), this.checked = false, this.checkbox = false, this.noMark = false, this.vertical = false;
  }
  get value() {
    return this._value !== void 0 ? this._value : this.label ? xi(this.label) : this.label;
  }
  set value(t) {
    this._value = t;
  }
  render() {
    return y`
      <div class="parent" .title=${this.label ?? ""}>
        ${this.img || this.icon || this.label ? y` <div style="display: flex; column-gap: 0.375rem">
              ${this.checkbox && !this.noMark ? y`<bim-checkbox
                    style="pointer-events: none"
                    .checked=${this.checked}
                  ></bim-checkbox>` : null}
              <bim-label
                .vertical=${this.vertical}
                .icon=${this.icon}
                .img=${this.img}
                >${this.label}</bim-label
              >
            </div>` : null}
        ${!this.checkbox && !this.noMark && this.checked ? y`<svg
              xmlns="http://www.w3.org/2000/svg"
              height="1.125rem"
              viewBox="0 0 24 24"
              width="1.125rem"
              fill="#FFFFFF"
            >
              <path d="M0 0h24v24H0z" fill="none" />
              <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" />
            </svg>` : null}
        <slot></slot>
      </div>
    `;
  }
};
$o.styles = T`
    :host {
      --bim-label--c: var(--bim-ui_bg-contrast-100);
      display: block;
      box-sizing: border-box;
      flex: 1;
      padding: 0rem 0.5rem;
      border-radius: var(--bim-ui_size-4xs);
      transition: all 0.15s;
    }

    :host(:hover) {
      cursor: pointer;
      background-color: color-mix(
        in lab,
        var(--bim-selector--bgc, var(--bim-ui_bg-contrast-20)),
        var(--bim-ui_main-base) 10%
      );
    }

    :host([checked]) {
      --bim-label--c: color-mix(in lab, var(--bim-ui_main-base), white 30%);
    }

    :host([checked]) svg {
      fill: color-mix(in lab, var(--bim-ui_main-base), white 30%);
    }

    .parent {
      box-sizing: border-box;
      display: flex;
      justify-content: var(--bim-option--jc, space-between);
      column-gap: 0.5rem;
      align-items: center;
      min-height: 1.75rem;
      height: 100%;
    }

    input {
      height: 1rem;
      width: 1rem;
      cursor: pointer;
      border: none;
      outline: none;
      accent-color: var(--bim-checkbox--c, var(--bim-ui_main-base));
    }

    input:focus {
      outline: var(--bim-checkbox--olw, 2px) solid
        var(--bim-checkbox--olc, var(--bim-ui_accent-base));
    }

    bim-label {
      pointer-events: none;
    }
  `;
var H = $o;
kt([
  f({ type: String, reflect: true })
], H.prototype, "img", 2);
kt([
  f({ type: String, reflect: true })
], H.prototype, "label", 2);
kt([
  f({ type: String, reflect: true })
], H.prototype, "icon", 2);
kt([
  f({ type: Boolean, reflect: true })
], H.prototype, "checked", 2);
kt([
  f({ type: Boolean, reflect: true })
], H.prototype, "checkbox", 2);
kt([
  f({ type: Boolean, attribute: "no-mark", reflect: true })
], H.prototype, "noMark", 2);
kt([
  f({
    converter: {
      fromAttribute(i) {
        return i && xi(i);
      }
    }
  })
], H.prototype, "value", 1);
kt([
  f({ type: Boolean, reflect: true })
], H.prototype, "vertical", 2);
var jl = Object.defineProperty;
var Hl = Object.getOwnPropertyDescriptor;
var Ot = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Hl(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && jl(t, e, n), n;
};
var Co = class extends St {
  constructor() {
    super(), this.multiple = false, this.required = false, this.vertical = false, this._visible = false, this._value = /* @__PURE__ */ new Set(), this.onValueChange = new Event("change"), this.onWindowMouseUp = (t) => {
      this.visible && (this.contains(t.target) || (this.visible = false));
    }, this.onOptionClick = (t) => {
      const e = t.target, s = this._value.has(e);
      if (!this.multiple && !this.required && !s)
        this._value = /* @__PURE__ */ new Set([e]);
      else if (!this.multiple && !this.required && s)
        this._value = /* @__PURE__ */ new Set([]);
      else if (!this.multiple && this.required && !s)
        this._value = /* @__PURE__ */ new Set([e]);
      else if (this.multiple && !this.required && !s)
        this._value = /* @__PURE__ */ new Set([...this._value, e]);
      else if (this.multiple && !this.required && s) {
        const n = [...this._value].filter((o) => o !== e);
        this._value = new Set(n);
      } else if (this.multiple && this.required && !s)
        this._value = /* @__PURE__ */ new Set([...this._value, e]);
      else if (this.multiple && this.required && s) {
        const n = [...this._value].filter((r) => r !== e), o = new Set(n);
        o.size !== 0 && (this._value = o);
      }
      this.updateOptionsState(), this.dispatchEvent(this.onValueChange);
    }, this.useObserver = true;
  }
  set visible(t) {
    this._visible = t, t || this.resetVisibleElements();
  }
  get visible() {
    return this._visible;
  }
  /**
   * The selected values in the dropdown.
   * @type {any[]}
   * @example
   * const dropdown = document.createElement('bim-dropdown');
   * dropdown.value = ['option1', 'option2'];
   */
  set value(t) {
    if (this.required && Object.keys(t).length === 0)
      return;
    const e = /* @__PURE__ */ new Set();
    for (const s of t) {
      const n = this.findOption(s);
      if (n && (e.add(n), !this.multiple && Object.keys(t).length === 1))
        break;
    }
    this._value = e, this.updateOptionsState(), this.dispatchEvent(this.onValueChange);
  }
  get value() {
    return [...this._value].filter(
      (t) => t instanceof H && t.checked
    ).map((t) => t.value);
  }
  get _options() {
    const t = /* @__PURE__ */ new Set([...this.elements]);
    for (const e of this.children)
      e instanceof H && t.add(e);
    return [...t];
  }
  onSlotChange(t) {
    const e = t.target.assignedElements();
    this.observe(e);
    const s = /* @__PURE__ */ new Set();
    for (const n of this.elements) {
      if (!(n instanceof H)) {
        n.remove();
        continue;
      }
      n.checked && s.add(n), n.removeEventListener("click", this.onOptionClick), n.addEventListener("click", this.onOptionClick);
    }
    this._value = s;
  }
  updateOptionsState() {
    for (const t of this._options)
      t instanceof H && (t.checked = this._value.has(t));
  }
  findOption(t) {
    return this._options.find((e) => e instanceof H ? e.label === t || e.value === t : false);
  }
  connectedCallback() {
    super.connectedCallback(), window.addEventListener("mouseup", this.onWindowMouseUp);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), window.removeEventListener("mouseup", this.onWindowMouseUp);
  }
  render() {
    let t, e, s;
    if (this._value.size === 0)
      t = "Select an option...";
    else if (this._value.size === 1) {
      const n = [...this._value][0];
      t = (n == null ? void 0 : n.label) || (n == null ? void 0 : n.value), e = n == null ? void 0 : n.img, s = n == null ? void 0 : n.icon;
    } else
      t = `Multiple (${this._value.size})`;
    return y`
      <bim-input
        title=${this.label ?? ""}
        .label=${this.label}
        .icon=${this.icon}
        .vertical=${this.vertical}
      >
        <div class="input" @click=${() => this.visible = !this.visible}>
          <bim-label
            .img=${e}
            .icon=${s}
            style="overflow: hidden;"
            >${t}</bim-label
          >
          <svg
            style="flex-shrink: 0; fill: var(--bim-dropdown--c, var(--bim-ui_bg-contrast-100))"
            xmlns="http://www.w3.org/2000/svg"
            height="1.125rem"
            viewBox="0 0 24 24"
            width="1.125rem"
            fill="#9ca3af"
          >
            <path d="M0 0h24v24H0V0z" fill="none" />
            <path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" />
          </svg>
        </div>
        <bim-context-menu .visible=${this.visible}>
          <slot @slotchange=${this.onSlotChange}></slot>
          ${this.visibleElements.map((n) => n)}
        </bim-context-menu>
      </bim-input>
    `;
  }
};
Co.styles = [
  Ft.scrollbar,
  T`
      :host {
        --bim-input--bgc: var(
          --bim-dropdown--bgc,
          var(--bim-ui_bg-contrast-20)
        );
        --bim-input--olw: 2px;
        --bim-input--olc: transparent;
        --bim-input--bdrs: var(--bim-ui_size-4xs);
        flex: 1;
        display: block;
      }

      :host([visible]) {
        --bim-input--olc: var(--bim-ui_accent-base);
      }

      .input {
        --bim-label--fz: var(--bim-drodown--fz, var(--bim-ui_size-xs));
        --bim-label--c: var(--bim-dropdown--c, var(--bim-ui_bg-contrast-100));
        height: 100%;
        display: flex;
        flex: 1;
        overflow: hidden;
        column-gap: 0.25rem;
        outline: none;
        cursor: pointer;
        align-items: center;
        justify-content: space-between;
        padding: 0 0.5rem;
      }

      bim-label {
        pointer-events: none;
      }
    `
];
var pt = Co;
Ot([
  f({ type: String, reflect: true })
], pt.prototype, "name", 2);
Ot([
  f({ type: String, reflect: true })
], pt.prototype, "icon", 2);
Ot([
  f({ type: String, reflect: true })
], pt.prototype, "label", 2);
Ot([
  f({ type: Boolean, reflect: true })
], pt.prototype, "multiple", 2);
Ot([
  f({ type: Boolean, reflect: true })
], pt.prototype, "required", 2);
Ot([
  f({ type: Boolean, reflect: true })
], pt.prototype, "vertical", 2);
Ot([
  f({ type: Boolean, reflect: true })
], pt.prototype, "visible", 1);
Ot([
  re()
], pt.prototype, "_value", 2);
var Bl = Object.defineProperty;
var Eo = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Bl(t, e, n), n;
};
var Ao = class extends I {
  constructor() {
    super(...arguments), this.floating = false, this.layouts = {};
  }
  // private isVerticalArea(area: string) {
  //   const { rows } = this;
  //   const row = rows.find((row) => row.includes(area));
  //   if (!row)
  //     throw new Error(
  //       `${area} wasn't defined in the grid-template of this bim-grid`,
  //     );
  //   const index = rows.indexOf(row);
  //   const abovePanel = index > 0 && rows[index - 1].includes(area);
  //   const belowPanel =
  //     index < rows.length - 1 && rows[index + 1].includes(area);
  //   return abovePanel || belowPanel;
  // }
  getUniqueAreasFromTemplate(t) {
    const e = t.split(`
`).map((s) => s.trim()).map((s) => s.split('"')[1]).filter((s) => s !== void 0).flatMap((s) => s.split(/\s+/));
    return [...new Set(e)].filter((s) => s !== "");
  }
  firstUpdated() {
    this._onLayoutChange = new Event("layoutchange");
  }
  render() {
    if (this.layout) {
      if (this.layouts[this.layout]) {
        this.innerHTML = "";
        const t = this.layouts[this.layout], e = this.getUniqueAreasFromTemplate(t.template).map((s) => {
          const n = t.elements[s];
          return n && (n.style.gridArea = s), n;
        }).filter((s) => !!s);
        this.style.gridTemplate = t.template, this._onLayoutChange && this.dispatchEvent(this._onLayoutChange), this.append(...e);
      }
    } else
      this.innerHTML = "", this.style.gridTemplate = "", this._onLayoutChange && this.dispatchEvent(this._onLayoutChange);
    return y`<slot></slot>`;
  }
};
Ao.styles = T`
    :host {
      display: grid;
      height: 100%;
      width: 100%;
      overflow: hidden;
      box-sizing: border-box;
    }

    /* :host(:not([layout])) {
      display: none;
    } */

    :host([floating]) {
      --bim-panel--bdrs: var(--bim-ui_size-4xs);
      background-color: transparent;
      padding: 1rem;
      gap: 1rem;
      position: absolute;
      pointer-events: none;
      top: 0px;
      left: 0px;
    }

    :host(:not([floating])) {
      --bim-panel--bdrs: 0;
      background-color: var(--bim-ui_bg-contrast-20);
      gap: 1px;
    }
  `;
var _n2 = Ao;
Eo([
  f({ type: Boolean, reflect: true })
], _n2.prototype, "floating");
Eo([
  f({ type: String, reflect: true })
], _n2.prototype, "layout");
var nn = class extends I {
  render() {
    return y`
      <iconify-icon .icon=${this.icon} height="none"></iconify-icon>
    `;
  }
};
nn.styles = T`
    :host {
      height: var(--bim-icon--fz, var(--bim-ui_size-sm));
      width: var(--bim-icon--fz, var(--bim-ui_size-sm));
    }

    iconify-icon {
      height: var(--bim-icon--fz, var(--bim-ui_size-sm));
      width: var(--bim-icon--fz, var(--bim-ui_size-sm));
      color: var(--bim-icon--c);
      transition: all 0.15s;
    }
  `, nn.properties = {
  icon: { type: String }
};
var Fl = nn;
var Ul = Object.defineProperty;
var wi = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Ul(t, e, n), n;
};
var So = class extends I {
  constructor() {
    super(...arguments), this.vertical = false, this.onValueChange = new Event("change");
  }
  get value() {
    const t = {};
    for (const e of this.children) {
      const s = e;
      "value" in s ? t[s.name || s.label] = s.value : "checked" in s && (t[s.name || s.label] = s.checked);
    }
    return t;
  }
  set value(t) {
    const e = [...this.children];
    for (const s in t) {
      const n = e.find((a) => {
        const l = a;
        return l.name === s || l.label === s;
      });
      if (!n)
        continue;
      const o = n, r = t[s];
      typeof r == "boolean" ? o.checked = r : o.value = r;
    }
  }
  render() {
    return y`
      <div class="parent">
        ${this.label || this.icon ? y`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        <div class="input">
          <slot></slot>
        </div>
      </div>
    `;
  }
};
So.styles = T`
    :host {
      flex: 1;
      display: block;
    }

    .parent {
      display: flex;
      flex-wrap: wrap;
      column-gap: 1rem;
      row-gap: 0.375rem;
      user-select: none;
      flex: 1;
    }

    :host(:not([vertical])) .parent {
      justify-content: space-between;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    .input {
      overflow: hidden;
      box-sizing: border-box;
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      min-height: 1.75rem;
      min-width: 3rem;
      gap: var(--bim-input--g, var(--bim-ui_size-4xs));
      padding: var(--bim-input--p, 0);
      background-color: var(--bim-input--bgc, transparent);
      outline: var(--bim-input--olw, 2px) solid
        var(--bim-input--olc, transparent);
      border-radius: var(--bim-input--bdrs, var(--bim-ui_size-4xs));
      transition: all 0.15s;
    }

    :host(:not([vertical])) .input {
      flex: 1;
      justify-content: flex-end;
    }

    :host(:not([vertical])[label]) .input {
      max-width: fit-content;
    }
  `;
var Fe = So;
wi([
  f({ type: String, reflect: true })
], Fe.prototype, "name");
wi([
  f({ type: String, reflect: true })
], Fe.prototype, "label");
wi([
  f({ type: String, reflect: true })
], Fe.prototype, "icon");
wi([
  f({ type: Boolean, reflect: true })
], Fe.prototype, "vertical");
var Vl = Object.defineProperty;
var Ue = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Vl(t, e, n), n;
};
var ko = class extends I {
  constructor() {
    super(...arguments), this.labelHidden = false, this.iconHidden = false, this.vertical = false;
  }
  get value() {
    return this.textContent ? xi(this.textContent) : this.textContent;
  }
  render() {
    return y`
      <div class="parent" .title=${this.textContent ?? ""}>
        ${this.img ? y`<img .src=${this.img} .alt=${this.textContent || ""} />` : null}
        ${!this.iconHidden && this.icon ? y`<bim-icon .icon=${this.icon}></bim-icon>` : null}
        <p><slot></slot></p>
      </div>
    `;
  }
};
ko.styles = T`
    :host {
      --bim-icon--c: var(--bim-label--c);
      color: var(--bim-label--c, var(--bim-ui_bg-contrast-60));
      font-size: var(--bim-label--fz, var(--bim-ui_size-xs));
      overflow: hidden;
      display: block;
      white-space: nowrap;
      line-height: 1.1rem;
      transition: all 0.15s;
    }

    .parent {
      display: flex;
      align-items: center;
      column-gap: 0.25rem;
      row-gap: 0.125rem;
      user-select: none;
      height: 100%;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    .parent p {
      margin: 0;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    :host([label-hidden]) .parent p,
    :host(:empty) .parent p {
      display: none;
    }

    img {
      height: 100%;
      aspect-ratio: 1;
      border-radius: 100%;
      margin-right: 0.125rem;
    }

    :host(:not([vertical])) img {
      max-height: var(
        --bim-label_icon--sz,
        calc(var(--bim-label--fz, var(--bim-ui_size-xs)) * 1.8)
      );
    }

    :host([vertical]) img {
      max-height: var(
        --bim-label_icon--sz,
        calc(var(--bim-label--fz, var(--bim-ui_size-xs)) * 4)
      );
    }
  `;
var ce = ko;
Ue([
  f({ type: String, reflect: true })
], ce.prototype, "img");
Ue([
  f({ type: Boolean, attribute: "label-hidden", reflect: true })
], ce.prototype, "labelHidden");
Ue([
  f({ type: String, reflect: true })
], ce.prototype, "icon");
Ue([
  f({ type: Boolean, attribute: "icon-hidden", reflect: true })
], ce.prototype, "iconHidden");
Ue([
  f({ type: Boolean, reflect: true })
], ce.prototype, "vertical");
var Wl = Object.defineProperty;
var Gl = Object.getOwnPropertyDescriptor;
var Z = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Gl(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && Wl(t, e, n), n;
};
var Oo = class extends I {
  constructor() {
    super(...arguments), this._value = 0, this.vertical = false, this.slider = false, this._input = Yt(), this.onValueChange = new Event("change");
  }
  set value(t) {
    this.setValue(t.toString());
  }
  get value() {
    return this._value;
  }
  onChange(t) {
    t.stopPropagation();
    const { value: e } = this._input;
    e && this.setValue(e.value);
  }
  setValue(t) {
    const { value: e } = this._input;
    let s = t;
    if (s = s.replace(/[^0-9.-]/g, ""), s = s.replace(/(\..*)\./g, "$1"), s.endsWith(".") || (s.lastIndexOf("-") > 0 && (s = s[0] + s.substring(1).replace(/-/g, "")), s === "-" || s === "-0"))
      return;
    let n = Number(s);
    Number.isNaN(n) || (n = this.min !== void 0 ? Math.max(n, this.min) : n, n = this.max !== void 0 ? Math.min(n, this.max) : n, this.value !== n && (this._value = n, e && (e.value = this.value.toString()), this.requestUpdate(), this.dispatchEvent(this.onValueChange)));
  }
  onBlur() {
    const { value: t } = this._input;
    t && Number.isNaN(Number(t.value)) && (t.value = this.value.toString());
  }
  onSliderMouseDown(t) {
    document.body.style.cursor = "w-resize";
    const { clientX: e } = t, s = this.value;
    let n = false;
    const o = (l) => {
      var d;
      n = true;
      const { clientX: u } = l, h = this.step ?? 1, c = ((d = h.toString().split(".")[1]) == null ? void 0 : d.length) || 0, p = 1 / (this.sensitivity ?? 1), b = (u - e) / p;
      if (Math.floor(Math.abs(b)) !== Math.abs(b))
        return;
      const v = s + b * h;
      this.setValue(v.toFixed(c));
    }, r = () => {
      this.slider = true, this.removeEventListener("blur", r);
    }, a = () => {
      document.removeEventListener("mousemove", o), document.body.style.cursor = "default", n ? n = false : (this.addEventListener("blur", r), this.slider = false, requestAnimationFrame(() => this.focus())), document.removeEventListener("mouseup", a);
    };
    document.addEventListener("mousemove", o), document.addEventListener("mouseup", a);
  }
  onFocus(t) {
    t.stopPropagation();
    const e = (s) => {
      s.key === "Escape" && (this.blur(), window.removeEventListener("keydown", e));
    };
    window.addEventListener("keydown", e);
  }
  connectedCallback() {
    super.connectedCallback(), this.min && this.min > this.value && (this._value = this.min), this.max && this.max < this.value && (this._value = this.max);
  }
  /**
   * Sets focus to the input element of the number input component.
   * This method is useful for programmatically focusing the input element, for example,
   * in response to a user action or to emphasize the input in the UI.
   *
   * If the input element reference is not available (not yet rendered or disconnected),
   * this method will do nothing.
   */
  focus() {
    const { value: t } = this._input;
    t && t.focus();
  }
  render() {
    const t = y`
      ${this.pref || this.icon ? y`<bim-label
            style="pointer-events: auto"
            @mousedown=${this.onSliderMouseDown}
            .icon=${this.icon}
            >${this.pref}</bim-label
          >` : null}
      <input
        ${_t(this._input)}
        type="text"
        aria-label=${this.label || this.name || "Number Input"}
        size="1"
        @input=${(a) => a.stopPropagation()}
        @change=${this.onChange}
        @blur=${this.onBlur}
        @focus=${this.onFocus}
        .value=${this.value.toString()}
      />
      ${this.suffix ? y`<bim-label
            style="pointer-events: auto"
            @mousedown=${this.onSliderMouseDown}
            >${this.suffix}</bim-label
          >` : null}
    `, e = this.min ?? -1 / 0, s = this.max ?? 1 / 0, n = 100 * (this.value - e) / (s - e), o = y`
      <style>
        .slider-indicator {
          width: ${`${n}%`};
        }
      </style>
      <div class="slider" @mousedown=${this.onSliderMouseDown}>
        <div class="slider-indicator"></div>
        ${this.pref || this.icon ? y`<bim-label
              style="z-index: 1; margin-right: 0.125rem"
              .icon=${this.icon}
              >${`${this.pref}: `}</bim-label
            >` : null}
        <bim-label style="z-index: 1;">${this.value}</bim-label>
        ${this.suffix ? y`<bim-label style="z-index: 1;">${this.suffix}</bim-label>` : null}
      </div>
    `, r = `${this.label || this.name || this.pref ? `${this.label || this.name || this.pref}: ` : ""}${this.value}${this.suffix ?? ""}`;
    return y`
      <bim-input
        title=${r}
        .label=${this.label}
        .icon=${this.icon}
        .vertical=${this.vertical}
      >
        ${this.slider ? o : t}
      </bim-input>
    `;
  }
};
Oo.styles = T`
    :host {
      --bim-input--bgc: var(
        --bim-number-input--bgc,
        var(--bim-ui_bg-contrast-20)
      );
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(--bim-number-input--olc, transparent);
      --bim-input--bdrs: var(--bim-number-input--bdrs, var(--bim-ui_size-4xs));
      --bim-input--p: 0 0.375rem;
      flex: 1;
      display: block;
    }

    :host(:focus) {
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(
        --bim-number-input¡focus--c,
        var(--bim-ui_accent-base)
      );
    }

    :host(:not([slider])) bim-label {
      --bim-label--c: var(
        --bim-number-input_affixes--c,
        var(--bim-ui_bg-contrast-60)
      );
      --bim-label--fz: var(
        --bim-number-input_affixes--fz,
        var(--bim-ui_size-xs)
      );
    }

    p {
      margin: 0;
      padding: 0;
    }

    input {
      background-color: transparent;
      outline: none;
      border: none;
      padding: 0;
      flex-grow: 1;
      text-align: right;
      font-family: inherit;
      font-feature-settings: inherit;
      font-variation-settings: inherit;
      font-size: var(--bim-number-input--fz, var(--bim-ui_size-xs));
      color: var(--bim-number-input--c, var(--bim-ui_bg-contrast-100));
    }

    :host([suffix]:not([pref])) input {
      text-align: left;
    }

    :host([slider]) {
      --bim-input--p: 0;
    }

    :host([slider]) .slider {
      --bim-label--c: var(--bim-ui_bg-contrast-100);
    }

    .slider {
      position: relative;
      display: flex;
      justify-content: center;
      width: 100%;
      height: 100%;
      padding: 0 0.5rem;
    }

    .slider-indicator {
      height: 100%;
      background-color: var(--bim-ui_main-base);
      position: absolute;
      top: 0;
      left: 0;
      border-radius: var(--bim-input--bdrs, var(--bim-ui_size-4xs));
    }

    bim-input {
      display: flex;
    }

    bim-label {
      pointer-events: none;
    }
  `;
var W = Oo;
Z([
  f({ type: String, reflect: true })
], W.prototype, "name", 2);
Z([
  f({ type: String, reflect: true })
], W.prototype, "icon", 2);
Z([
  f({ type: String, reflect: true })
], W.prototype, "label", 2);
Z([
  f({ type: String, reflect: true })
], W.prototype, "pref", 2);
Z([
  f({ type: Number, reflect: true })
], W.prototype, "min", 2);
Z([
  f({ type: Number, reflect: true })
], W.prototype, "value", 1);
Z([
  f({ type: Number, reflect: true })
], W.prototype, "step", 2);
Z([
  f({ type: Number, reflect: true })
], W.prototype, "sensitivity", 2);
Z([
  f({ type: Number, reflect: true })
], W.prototype, "max", 2);
Z([
  f({ type: String, reflect: true })
], W.prototype, "suffix", 2);
Z([
  f({ type: Boolean, reflect: true })
], W.prototype, "vertical", 2);
Z([
  f({ type: Boolean, reflect: true })
], W.prototype, "slider", 2);
var ql = Object.defineProperty;
var Yl = Object.getOwnPropertyDescriptor;
var Ve = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? Yl(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && ql(t, e, n), n;
};
var Io = class extends I {
  constructor() {
    super(...arguments), this.onValueChange = new Event("change"), this._hidden = false, this.headerHidden = false, this.activationButton = document.createElement("bim-button");
  }
  set hidden(t) {
    this._hidden = t, this.activationButton.active = !t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  /**
   * The `value` getter computes and returns the current state of the panel's form elements as an object. This property is dynamic and reflects the current input values within the panel. When accessed, it traverses the panel's child elements, collecting values from those that have a `name` or `label` attribute, and constructs an object where each key corresponds to the `name` or `label` of the element, and the value is the element's value. This property is particularly useful for forms or interactive panels where the user's input needs to be retrieved programmatically. The value returned is a snapshot of the panel's state at the time of access, and it does not maintain a live link to the input elements.
   *
   * @type {Record<string, any>}
   * @default {}
   * @example <bim-panel></bim-panel> <!-- Access via JavaScript to get value -->
   * @example
   * const panel = document.createElement('bim-panel');
   * document.body.appendChild(panel);
   * console.log(panel.value); // Logs the current value object of the panel
   */
  get value() {
    return hi(this);
  }
  /**
   * The `value` setter allows programmatically updating the values of the panel's form elements. When a data object is passed to this property, it attempts to match the object's keys with the `name` or `label` attributes of the panel's child elements. If a match is found, the corresponding element's value is updated to the value associated with the key in the data object. This property is useful for initializing the panel with specific data or updating its state based on external inputs. Note that this operation does not affect elements without a matching `name` or `label`, and it only updates the values of elements that are direct children of the panel.
   *
   * @type {Record<string, any>}
   * @example <bim-panel></bim-panel> <!-- Set value via JavaScript -->
   * @example
   * const panel = document.createElement('bim-panel');
   * document.body.appendChild(panel);
   * panel.value = { 'input-name': 'John Doe', 'checkbox-name': true };
   */
  set value(t) {
    const e = [...this.children];
    for (const s in t) {
      const n = e.find((r) => {
        const a = r;
        return a.name === s || a.label === s;
      });
      if (!n)
        continue;
      const o = n;
      o.value = t[s];
    }
  }
  connectedCallback() {
    super.connectedCallback(), this.activationButton.active = !this.hidden, this.activationButton.onclick = () => this.hidden = !this.hidden;
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.activationButton.remove();
  }
  /**
   * Collapses all `bim-panel-section` elements within the panel.
   * This method iterates over each `bim-panel-section` found within the panel's DOM and sets their `collapsed` property to `true`,
   * effectively hiding their content from view. This can be used to programmatically minimize the space taken up by sections
   * within the panel, making the panel more compact or to hide details that are not immediately necessary.
   */
  collapseSections() {
    const t = this.querySelectorAll("bim-panel-section");
    for (const e of t)
      e.collapsed = true;
  }
  /**
   * Expands all `bim-panel-section` elements within the panel.
   * This method iterates over each `bim-panel-section` found within the panel's DOM and sets their `collapsed` property to `false`,
   * effectively showing their content. This can be used to programmatically reveal the content of sections within the panel,
   * making the panel more informative or to display details that are necessary for the user.
   */
  expandSections() {
    const t = this.querySelectorAll("bim-panel-section");
    for (const e of t)
      e.collapsed = false;
  }
  render() {
    return this.activationButton.icon = this.icon, this.activationButton.label = this.label || this.name, this.activationButton.tooltipTitle = this.label || this.name, y`
      <div class="parent">
        ${this.label || this.name || this.icon ? y`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        <div class="sections">
          <slot></slot>
        </div>
      </div>
    `;
  }
};
Io.styles = [
  Ft.scrollbar,
  T`
      :host {
        display: flex;
        border-radius: var(--bim-ui_size-base);
        background-color: var(--bim-ui_bg-base);
        overflow: auto;
      }

      :host([hidden]) {
        display: none;
      }

      .parent {
        display: flex;
        flex: 1;
        flex-direction: column;
        pointer-events: auto;
        overflow: auto;
      }

      .parent bim-label {
        --bim-label--c: var(--bim-panel--c, var(--bim-ui_bg-contrast-80));
        --bim-label--fz: var(--bim-panel--fz, var(--bim-ui_size-sm));
        font-weight: 600;
        padding: 1rem;
        flex-shrink: 0;
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([header-hidden]) .parent bim-label {
        display: none;
      }

      .sections {
        display: flex;
        flex-direction: column;
        overflow: auto;
      }

      ::slotted(bim-panel-section:not(:last-child)) {
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }
    `
];
var de = Io;
Ve([
  f({ type: String, reflect: true })
], de.prototype, "icon", 2);
Ve([
  f({ type: String, reflect: true })
], de.prototype, "name", 2);
Ve([
  f({ type: String, reflect: true })
], de.prototype, "label", 2);
Ve([
  f({ type: Boolean, reflect: true })
], de.prototype, "hidden", 1);
Ve([
  f({ type: Boolean, attribute: "header-hidden", reflect: true })
], de.prototype, "headerHidden", 2);
var Xl = Object.defineProperty;
var We = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Xl(t, e, n), n;
};
var To = class extends I {
  constructor() {
    super(...arguments), this.onValueChange = new Event("change");
  }
  /**
   * The `value` getter computes and returns the current state of the panel section's form elements as an object. This object's keys are the `name` or `label` attributes of the child elements, and the values are the corresponding values of these elements. This property is particularly useful for retrieving a consolidated view of the user's input or selections within the panel section. When the value of any child element changes, the returned object from this getter will reflect those changes, providing a dynamic snapshot of the panel section's state. Note that this property does not have a default value as it dynamically reflects the current state of the panel section's form elements.
   * @type {Record<string, any>}
   * @example <bim-panel-section></bim-panel-section> <!-- Usage in HTML not directly applicable as this is a getter -->
   * @example
   * const section = document.createElement('bim-panel-section');
   * console.log(section.value); // Logs the current value object
   */
  get value() {
    return hi(this);
  }
  /**
   * The `value` setter allows programmatically updating the values of the panel section's child elements. It accepts an object where keys correspond to the `name` or `label` attributes of the child elements, and the values are the new values to be set for these elements. This property is useful for initializing the panel section with specific values or updating its state based on external data. When the property changes, the corresponding child elements' values are updated to reflect the new state. This does not have a default value as it is a method for updating child elements' values.
   * @type {Record<string, any>}
   * @default undefined
   * @example <bim-panel-section></bim-panel-section> <!-- Usage in HTML not directly applicable as this is a setter -->
   * @example
   * const section = document.createElement('bim-panel-section');
   * section.value = { 'user-settings': 'John Doe' }; // Programmatically sets the value of a child element named 'user-settings'
   */
  set value(t) {
    const e = [...this.children];
    for (const s in t) {
      const n = e.find((r) => {
        const a = r;
        return a.name === s || a.label === s;
      });
      if (!n)
        continue;
      const o = n;
      o.value = t[s];
    }
  }
  onHeaderClick() {
    this.fixed || (this.collapsed = !this.collapsed);
  }
  render() {
    const t = this.label || this.icon || this.name || this.fixed, e = y`<svg
      xmlns="http://www.w3.org/2000/svg"
      height="1.125rem"
      viewBox="0 0 24 24"
      width="1.125rem"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" />
    </svg>`, s = y`<svg
      xmlns="http://www.w3.org/2000/svg"
      height="1.125rem"
      viewBox="0 0 24 24"
      width="1.125rem"
    >
      <path d="M0 0h24v24H0z" fill="none" />
      <path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z" />
    </svg>`, n = this.collapsed ? e : s, o = y`
      <div
        class="header"
        title=${this.label ?? ""}
        @click=${this.onHeaderClick}
      >
        ${this.label || this.icon || this.name ? y`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        ${this.fixed ? null : n}
      </div>
    `;
    return y`
      <div class="parent">
        ${t ? o : null}
        <div class="components">
          <slot></slot>
        </div>
      </div>
    `;
  }
};
To.styles = [
  Ft.scrollbar,
  T`
      :host {
        display: block;
        pointer-events: auto;
      }

      :host(:not([fixed])) .header:hover {
        --bim-label--c: var(--bim-ui_accent-base);
        color: var(--bim-ui_accent-base);
        cursor: pointer;
      }

      :host(:not([fixed])) .header:hover svg {
        fill: var(--bim-ui_accent-base);
      }

      .header {
        --bim-label--fz: var(--bim-ui_size-sm);
        --bim-label--c: var(--bim-ui_bg-contrast-80);
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 600;
        height: 1.5rem;
        padding: 0.75rem 1rem;
      }

      .header svg {
        fill: var(--bim-ui_bg-contrast-80);
      }

      .title {
        display: flex;
        align-items: center;
        column-gap: 0.5rem;
      }

      .title p {
        font-size: var(--bim-ui_size-sm);
      }

      .components {
        display: flex;
        flex-direction: column;
        row-gap: 0.75rem;
        padding: 0.125rem 1rem 1rem;
      }

      :host(:not([fixed])[collapsed]) .components {
        display: none;
        height: 0px;
      }

      bim-label {
        pointer-events: none;
      }
    `
];
var ue = To;
We([
  f({ type: String, reflect: true })
], ue.prototype, "icon");
We([
  f({ type: String, reflect: true })
], ue.prototype, "label");
We([
  f({ type: String, reflect: true })
], ue.prototype, "name");
We([
  f({ type: Boolean, reflect: true })
], ue.prototype, "fixed");
We([
  f({ type: Boolean, reflect: true })
], ue.prototype, "collapsed");
var Jl = Object.defineProperty;
var Ge = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Jl(t, e, n), n;
};
var Ro = class extends I {
  constructor() {
    super(...arguments), this.vertical = false, this.onValueChange = new Event("change"), this._canEmitEvents = false, this._value = document.createElement("bim-option"), this.onOptionClick = (t) => {
      this._value = t.target, this.dispatchEvent(this.onValueChange);
      for (const e of this.children)
        e instanceof H && (e.checked = e === t.target);
    };
  }
  get _options() {
    return [...this.querySelectorAll("bim-option")];
  }
  /**
   * Sets the value of the selector.
   * It finds the matching option based on the provided value and sets it as the selected option.
   * If no matching option is found, it does nothing.
   *
   * @param value - The value to set for the selector.
   */
  set value(t) {
    const e = this.findOption(t);
    if (e) {
      for (const s of this._options)
        s.checked = s === e;
      this._value = e, this._canEmitEvents && this.dispatchEvent(this.onValueChange);
    }
  }
  get value() {
    return this._value.value;
  }
  onSlotChange(t) {
    const e = t.target.assignedElements();
    for (const s of e)
      s instanceof H && (s.noMark = true, s.removeEventListener("click", this.onOptionClick), s.addEventListener("click", this.onOptionClick));
  }
  findOption(t) {
    return this._options.find((e) => e instanceof H ? e.label === t || e.value === t : false);
  }
  firstUpdated() {
    const t = [...this.children].find(
      (e) => e instanceof H && e.checked
    );
    t && (this._value = t);
  }
  render() {
    return y`
      <bim-input
        .vertical=${this.vertical}
        .label=${this.label}
        .icon=${this.icon}
      >
        <slot @slotchange=${this.onSlotChange}></slot>
      </bim-input>
    `;
  }
};
Ro.styles = T`
    :host {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
      --bim-input--g: 0;
      --bim-option--jc: center;
      flex: 1;
      display: block;
    }

    ::slotted(bim-option) {
      border-radius: 0;
    }

    ::slotted(bim-option[checked]) {
      --bim-label--c: var(--bim-ui_main-contrast);
      background-color: var(--bim-ui_main-base);
    }
  `;
var he = Ro;
Ge([
  f({ type: String, reflect: true })
], he.prototype, "name");
Ge([
  f({ type: String, reflect: true })
], he.prototype, "icon");
Ge([
  f({ type: String, reflect: true })
], he.prototype, "label");
Ge([
  f({ type: Boolean, reflect: true })
], he.prototype, "vertical");
Ge([
  re()
], he.prototype, "_value");
var Ql = () => y`
    <style>
      div {
        display: flex;
        gap: 0.375rem;
        border-radius: 0.25rem;
        min-height: 1.25rem;
      }

      [data-type="row"] {
        background-color: var(--bim-ui_bg-contrast-10);
        animation: row-loading 1s linear infinite alternate;
        padding: 0.5rem;
      }

      [data-type="cell"] {
        background-color: var(--bim-ui_bg-contrast-20);
        flex: 0.25;
      }

      @keyframes row-loading {
        0% {
          background-color: var(--bim-ui_bg-contrast-10);
        }
        100% {
          background-color: var(--bim-ui_bg-contrast-20);
        }
      }
    </style>
    <div style="display: flex; flex-direction: column;">
      <div data-type="row" style="gap: 2rem">
        <div data-type="cell" style="flex: 1"></div>
        <div data-type="cell" style="flex: 2"></div>
        <div data-type="cell" style="flex: 1"></div>
        <div data-type="cell" style="flex: 0.5"></div>
      </div>
      <div style="display: flex;">
        <div data-type="row" style="flex: 1">
          <div data-type="cell" style="flex: 0.5"></div>
        </div>
        <div data-type="row" style="flex: 2">
          <div data-type="cell" style="flex: 0.75"></div>
        </div>
        <div data-type="row" style="flex: 1">
          <div data-type="cell"></div>
        </div>
        <div data-type="row" style="flex: 0.5">
          <div data-type="cell" style="flex: 0.75"></div>
        </div>
      </div>
      <div style="display: flex;">
        <div data-type="row" style="flex: 1">
          <div data-type="cell" style="flex: 0.75"></div>
        </div>
        <div data-type="row" style="flex: 2">
          <div data-type="cell"></div>
        </div>
        <div data-type="row" style="flex: 1">
          <div data-type="cell" style="flex: 0.5"></div>
        </div>
        <div data-type="row" style="flex: 0.5">
          <div data-type="cell" style="flex: 0.5"></div>
        </div>
      </div>
      <div style="display: flex;">
        <div data-type="row" style="flex: 1">
          <div data-type="cell"></div>
        </div>
        <div data-type="row" style="flex: 2">
          <div data-type="cell" style="flex: 0.5"></div>
        </div>
        <div data-type="row" style="flex: 1">
          <div data-type="cell" style="flex: 0.75"></div>
        </div>
        <div data-type="row" style="flex: 0.5">
          <div data-type="cell" style="flex: 0.7s5"></div>
        </div>
      </div>
    </div>
  `;
var Zl = () => y`
    <style>
      .loader {
        grid-area: Processing;
        position: relative;
        padding: 0.125rem;
      }
      .loader:before {
        content: "";
        position: absolute;
      }
      .loader .loaderBar {
        position: absolute;
        top: 0;
        right: 100%;
        bottom: 0;
        left: 0;
        background: var(--bim-ui_main-base);
        /* width: 25%; */
        width: 0;
        animation: borealisBar 2s linear infinite;
      }

      @keyframes borealisBar {
        0% {
          left: 0%;
          right: 100%;
          width: 0%;
        }
        10% {
          left: 0%;
          right: 75%;
          width: 25%;
        }
        90% {
          right: 0%;
          left: 75%;
          width: 25%;
        }
        100% {
          left: 100%;
          right: 0%;
          width: 0%;
        }
      }
    </style>
    <div class="loader">
      <div class="loaderBar"></div>
    </div>
  `;
var Kl = Object.defineProperty;
var tc = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Kl(t, e, n), n;
};
var Po = class extends I {
  constructor() {
    super(...arguments), this.column = "", this.columnIndex = 0, this.rowData = {};
  }
  get data() {
    return this.column ? this.rowData[this.column] : null;
  }
  render() {
    return y`
      <style>
        :host {
          grid-area: ${this.column ?? "unset"};
        }
      </style>
      <slot></slot>
    `;
  }
};
Po.styles = T`
    :host {
      padding: 0.25rem 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    :host([data-column-index="0"]:not([data-no-indentation])) {
      justify-content: normal;
    }

    :host([data-column-index="0"]:not([data-cell-header]))
      ::slotted(bim-label) {
      text-align: left;
    }

    ::slotted(*) {
      --bim-input--bgc: transparent;
      --bim-input--olc: var(--bim-ui_bg-contrast-20);
      --bim-input--olw: 1px;
    }

    ::slotted(bim-input) {
      --bim-input--olw: 0;
    }

    ::slotted(bim-label) {
      white-space: normal;
      text-align: center;
    }
  `;
var No = Po;
tc([
  f({ type: String, reflect: true })
], No.prototype, "column");
var ec = Object.defineProperty;
var ic = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && ec(t, e, n), n;
};
var Mo = class extends I {
  constructor() {
    super(...arguments), this._groups = [], this.data = [], this.table = this.closest("bim-table");
  }
  toggleGroups(t, e = false) {
    for (const s of this._groups)
      s.childrenHidden = typeof t > "u" ? !s.childrenHidden : !t, e && s.toggleChildren(t, e);
  }
  render() {
    return this._groups = [], y`
      <slot></slot>
      ${this.data.map((t) => {
      const e = document.createElement(
        "bim-table-group"
      );
      return this._groups.push(e), e.table = this.table, e.data = t, e;
    })}
    `;
  }
};
Mo.styles = T`
    :host {
      --bim-button--bgc: transparent;
      position: relative;
      grid-area: Children;
    }

    :host([hidden]) {
      display: none;
    }

    ::slotted(.branch.branch-vertical) {
      top: 0;
      bottom: 1.125rem;
    }
  `;
var Lo = Mo;
ic([
  f({ type: Array, attribute: false })
], Lo.prototype, "data");
var nc = Object.defineProperty;
var sc = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && nc(t, e, n), n;
};
var zo = class extends I {
  constructor() {
    super(...arguments), this.data = { data: {} }, this.childrenHidden = true, this.table = this.closest("bim-table");
  }
  connectedCallback() {
    super.connectedCallback(), this.table && this.table.expanded ? this.childrenHidden = false : this.childrenHidden = true;
  }
  toggleChildren(t, e = false) {
    this._children && (this.childrenHidden = typeof t > "u" ? !this.childrenHidden : !t, e && this._children.toggleGroups(t, e));
  }
  render() {
    if (!this.table)
      throw new Error("TableGroup: parent table wasn't found!");
    const t = this.table.getGroupIndentation(this.data) ?? 0, e = y`
      ${this.table.noIndentation ? null : y`
            <style>
              .branch-vertical {
                left: ${t + (this.table.selectableRows ? 1.9375 : 0.5625)}rem;
              }
            </style>
            <div class="branch branch-vertical"></div>
          `}
    `, s = document.createDocumentFragment();
    ie(e, s);
    let n = null;
    this.table.noIndentation || (n = document.createElement("div"), n.classList.add("branch", "branch-horizontal"), n.style.left = `${t - 1 + (this.table.selectableRows ? 2.05 : 0.5625)}rem`);
    let o = null;
    if (!this.table.noIndentation) {
      const l = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "svg"
      );
      l.setAttribute("height", "9.5"), l.setAttribute("width", "7.5"), l.setAttribute("viewBox", "0 0 4.6666672 7.3333333");
      const d = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "path"
      );
      d.setAttribute(
        "d",
        "m 1.7470835,6.9583848 2.5899999,-2.59 c 0.39,-0.39 0.39,-1.02 0,-1.41 L 1.7470835,0.36838483 c -0.63,-0.62000003 -1.71000005,-0.18 -1.71000005,0.70999997 v 5.17 c 0,0.9 1.08000005,1.34 1.71000005,0.71 z"
      ), l.append(d);
      const u = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "svg"
      );
      u.setAttribute("height", "6.5"), u.setAttribute("width", "9.5"), u.setAttribute("viewBox", "0 0 5.9111118 5.0175439");
      const h = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "path"
      );
      h.setAttribute(
        "d",
        "M -0.33616196,1.922522 2.253838,4.5125219 c 0.39,0.39 1.02,0.39 1.41,0 L 6.2538379,1.922522 c 0.6200001,-0.63 0.18,-1.71000007 -0.7099999,-1.71000007 H 0.37383804 c -0.89999997,0 -1.33999997,1.08000007 -0.71,1.71000007 z"
      ), u.append(h), o = document.createElement("div"), o.addEventListener("click", (c) => {
        c.stopPropagation(), this.toggleChildren();
      }), o.classList.add("caret"), o.style.left = `${(this.table.selectableRows ? 1.5 : 0.125) + t}rem`, this.childrenHidden ? o.append(l) : o.append(u);
    }
    const r = document.createElement("bim-table-row");
    this.data.children && !this.childrenHidden && r.append(s), r.table = this.table, r.data = this.data.data, this.table.dispatchEvent(
      new CustomEvent("rowcreated", { detail: { row: r } })
    ), o && this.data.children && r.append(o), t !== 0 && (!this.data.children || this.childrenHidden) && n && r.append(n);
    let a;
    if (this.data.children) {
      a = document.createElement("bim-table-children"), this._children = a, a.table = this.table, a.data = this.data.children;
      const l = document.createDocumentFragment();
      ie(e, l), a.append(l);
    }
    return y`
      <div class="parent">${r} ${this.childrenHidden ? null : a}</div>
    `;
  }
};
zo.styles = T`
    :host {
      position: relative;
    }

    .parent {
      display: grid;
      grid-template-areas: "Data" "Children";
    }

    .branch {
      position: absolute;
      z-index: 1;
    }

    .branch-vertical {
      border-left: 1px dotted var(--bim-ui_bg-contrast-40);
    }

    .branch-horizontal {
      top: 50%;
      width: 1rem;
      border-bottom: 1px dotted var(--bim-ui_bg-contrast-40);
    }

    .caret {
      position: absolute;
      z-index: 2;
      transform: translateY(-50%) rotate(0deg);
      top: 50%;
      display: flex;
      width: 0.95rem;
      height: 0.95rem;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }

    .caret svg {
      fill: var(--bim-ui_bg-contrast-60);
    }
  `;
var Do = zo;
sc([
  f({ type: Boolean, attribute: "children-hidden", reflect: true })
], Do.prototype, "childrenHidden");
var oc = Object.defineProperty;
var pe = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && oc(t, e, n), n;
};
var jo = class extends I {
  constructor() {
    super(...arguments), this.selected = false, this.columns = [], this.hiddenColumns = [], this.data = {}, this.isHeader = false, this.table = this.closest("bim-table"), this.onTableColumnsChange = () => {
      this.table && (this.columns = this.table.columns);
    }, this.onTableColumnsHidden = () => {
      this.table && (this.hiddenColumns = this.table.hiddenColumns);
    }, this._observer = new IntersectionObserver(
      (t) => {
        this._intersecting = t[0].isIntersecting;
      },
      { rootMargin: "36px" }
    );
  }
  get _columnNames() {
    return this.columns.filter(
      (t) => !this.hiddenColumns.includes(t.name)
    ).map((t) => t.name);
  }
  get _columnWidths() {
    return this.columns.filter(
      (t) => !this.hiddenColumns.includes(t.name)
    ).map((t) => t.width);
  }
  get _isSelected() {
    var t;
    return (t = this.table) == null ? void 0 : t.selection.has(this.data);
  }
  onSelectionChange(t) {
    if (!this.table)
      return;
    const e = t.target;
    this.selected = e.value, e.value ? (this.table.selection.add(this.data), this.table.dispatchEvent(
      new CustomEvent("rowselected", {
        detail: {
          data: this.data
        }
      })
    )) : (this.table.selection.delete(this.data), this.table.dispatchEvent(
      new CustomEvent("rowdeselected", {
        detail: {
          data: this.data
        }
      })
    ));
  }
  connectedCallback() {
    super.connectedCallback(), this._observer.observe(this), this.table && (this.columns = this.table.columns, this.hiddenColumns = this.table.hiddenColumns, this.table.addEventListener("columnschange", this.onTableColumnsChange), this.table.addEventListener("columnshidden", this.onTableColumnsHidden), this.toggleAttribute("selected", this._isSelected));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this._observer.unobserve(this), this.table && (this.columns = [], this.hiddenColumns = [], this.table.removeEventListener("columnschange", this.onTableColumnsChange), this.table.removeEventListener("columnshidden", this.onTableColumnsHidden), this.toggleAttribute("selected", false));
  }
  compute() {
    if (!this.table)
      throw new Error("TableRow: parent table wasn't found!");
    const t = this.table.getRowIndentation(this.data) ?? 0, e = this.isHeader ? this.data : this.table.computeRowDeclaration(this.data) ?? this.data, s = [];
    for (const n in e) {
      if (this.hiddenColumns.includes(n))
        continue;
      const o = e[n];
      let r;
      if (typeof o == "string" || typeof o == "boolean" || typeof o == "number" ? (r = document.createElement("bim-label"), r.textContent = String(o)) : o instanceof HTMLElement ? r = o : (r = document.createDocumentFragment(), ie(o, r)), !r)
        continue;
      const a = document.createElement("bim-table-cell");
      a.append(r), a.column = n, this._columnNames.indexOf(n) === 0 && !this.isHeader && (a.style.marginLeft = `${(this.table.noIndentation ? 0 : t) + 0.125}rem`);
      const l = this._columnNames.indexOf(n);
      a.setAttribute("data-column-index", String(l)), a.toggleAttribute(
        "data-no-indentation",
        l === 0 && this.table.noIndentation
      ), a.toggleAttribute("data-cell-header", this.isHeader), a.rowData = this.data, this.table.dispatchEvent(
        new CustomEvent("cellcreated", {
          detail: { cell: a }
        })
      ), s.push(a);
    }
    return this.style.gridTemplateAreas = `"${this.table.selectableRows ? "Selection" : ""} ${this._columnNames.join(" ")}"`, this.style.gridTemplateColumns = `${this.table.selectableRows ? "1.6rem" : ""} ${this._columnWidths.join(" ")}`, y`
      ${!this.isHeader && this.table.selectableRows ? y`<bim-checkbox
            @change=${this.onSelectionChange}
            .checked=${this._isSelected}
            style="align-self: center; justify-self: center"
          ></bim-checkbox>` : null}
      ${s}
      <slot></slot>
    `;
  }
  render() {
    return y`${this._intersecting ? this.compute() : y``}`;
  }
};
jo.styles = T`
    :host {
      position: relative;
      grid-area: Data;
      display: grid;
      min-height: 2.25rem;
      transition: all 0.15s;
    }

    ::slotted(.branch.branch-vertical) {
      top: 50%;
      bottom: 0;
    }

    :host([selected]) {
      background-color: color-mix(
        in lab,
        var(--bim-ui_bg-contrast-20) 30%,
        var(--bim-ui_main-base) 10%
      );
    }
  `;
var Ut = jo;
pe([
  f({ type: Boolean, reflect: true })
], Ut.prototype, "selected");
pe([
  f({ attribute: false })
], Ut.prototype, "columns");
pe([
  f({ attribute: false })
], Ut.prototype, "hiddenColumns");
pe([
  f({ attribute: false })
], Ut.prototype, "data");
pe([
  f({ type: Boolean, attribute: "is-header", reflect: true })
], Ut.prototype, "isHeader");
pe([
  re()
], Ut.prototype, "_intersecting");
var rc = Object.defineProperty;
var ac = Object.getOwnPropertyDescriptor;
var st = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? ac(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && rc(t, e, n), n;
};
var Ho = class extends I {
  constructor() {
    super(...arguments), this._columnsChange = new Event("columnschange"), this._filteredData = [], this.headersHidden = false, this.minColWidth = "4rem", this._columns = [], this._textDelimiters = {
      comma: ",",
      tab: "	"
    }, this._queryString = null, this._data = [], this.expanded = false, this.preserveStructureOnFilter = false, this.indentationInText = false, this.dataTransform = {}, this.selectableRows = false, this.selection = /* @__PURE__ */ new Set(), this.noIndentation = false, this.loading = false, this._errorLoading = false, this._onColumnsHidden = new Event("columnshidden"), this._hiddenColumns = [], this.loadingErrorElement = null, this._stringFilterFunction = (t, e) => Object.values(e.data).some((s) => String(s).toLowerCase().includes(t.toLowerCase())), this._queryFilterFunction = (t, e) => {
      let s = false;
      const n = en(t) ?? [];
      for (const o of n) {
        if ("queries" in o) {
          s = false;
          break;
        }
        const { condition: r, value: a } = o;
        let { key: l } = o;
        if (l.startsWith("[") && l.endsWith("]")) {
          const d = l.replace("[", "").replace("]", "");
          l = d, s = Object.keys(e.data).filter((u) => u.includes(d)).map(
            (u) => hs(e.data[u], r, a)
          ).some((u) => u);
        } else
          s = hs(e.data[l], r, a);
        if (!s)
          break;
      }
      return s;
    };
  }
  set columns(t) {
    const e = [];
    for (const s of t) {
      const n = typeof s == "string" ? { name: s, width: `minmax(${this.minColWidth}, 1fr)` } : s;
      e.push(n);
    }
    this._columns = e, this.computeMissingColumns(this.data), this.dispatchEvent(this._columnsChange);
  }
  get columns() {
    return this._columns;
  }
  get _headerRowData() {
    const t = {};
    for (const e of this.columns)
      if (typeof e == "string")
        t[e] = e;
      else {
        const { name: s } = e;
        t[s] = s;
      }
    return t;
  }
  /**
   * Getter for the `value` property.
   * Returns the filtered data if a search string is provided, otherwise returns the original data.
   *
   * @example
   * ```typescript
   * const tableValue = table.value;
   * console.log(tableValue); // Output: The filtered or original data.
   * ```
   */
  get value() {
    return this._filteredData;
  }
  /**
   * Sets the search string for filtering the table data.
   * This property allows you to filter the table data based on a search string.
   * If a search string is provided, the table will only display rows that match the search criteria.
   * The search criteria can be a simple string or a complex query.
   * If a simple string is provided, the table will filter rows based on the string's presence in any column.
   * If a complex query is provided, the table will filter rows based on the query's conditions and values.
   *
   * @example Simple Query
   * ```typescript
   * table.queryString = "example";
   * ```
   *
   * @example Complex Query
   * ```typescript
   * table.queryString = "column1="Jhon Doe" & column2=20";
   * ```
   */
  set queryString(t) {
    this.toggleAttribute("data-processing", true), this._queryString = t && t.trim() !== "" ? t.trim() : null, this.updateFilteredData(), this.toggleAttribute("data-processing", false);
  }
  get queryString() {
    return this._queryString;
  }
  set data(t) {
    this._data = t, this.updateFilteredData(), this.computeMissingColumns(t) && (this.columns = this._columns);
  }
  get data() {
    return this._data;
  }
  get dataAsync() {
    return new Promise((t) => {
      setTimeout(() => {
        t(this.data);
      });
    });
  }
  set hiddenColumns(t) {
    this._hiddenColumns = t, setTimeout(() => {
      this.dispatchEvent(this._onColumnsHidden);
    });
  }
  get hiddenColumns() {
    return this._hiddenColumns;
  }
  updateFilteredData() {
    this.queryString ? (en(this.queryString) ? (this.filterFunction = this._queryFilterFunction, this._filteredData = this.filter(this.queryString)) : (this.filterFunction = this._stringFilterFunction, this._filteredData = this.filter(this.queryString)), this.preserveStructureOnFilter && (this._expandedBeforeFilter === void 0 && (this._expandedBeforeFilter = this.expanded), this.expanded = true)) : (this.preserveStructureOnFilter && this._expandedBeforeFilter !== void 0 && (this.expanded = this._expandedBeforeFilter, this._expandedBeforeFilter = void 0), this._filteredData = this.data);
  }
  computeMissingColumns(t) {
    let e = false;
    for (const s of t) {
      const { children: n, data: o } = s;
      for (const r in o)
        this._columns.map((a) => typeof a == "string" ? a : a.name).includes(r) || (this._columns.push({
          name: r,
          width: `minmax(${this.minColWidth}, 1fr)`
        }), e = true);
      if (n) {
        const r = this.computeMissingColumns(n);
        r && !e && (e = r);
      }
    }
    return e;
  }
  generateText(t = "comma", e = this.value, s = "", n = true) {
    const o = this._textDelimiters[t];
    let r = "";
    const a = this.columns.map((l) => l.name);
    if (n) {
      this.indentationInText && (r += `Indentation${o}`);
      const l = `${a.join(o)}
`;
      r += l;
    }
    for (const [l, d] of e.entries()) {
      const { data: u, children: h } = d, c = this.indentationInText ? `${s}${l + 1}${o}` : "", p = a.map((v) => u[v] ?? ""), b = `${c}${p.join(o)}
`;
      r += b, h && (r += this.generateText(
        t,
        d.children,
        `${s}${l + 1}.`,
        false
      ));
    }
    return r;
  }
  /**
   * A getter function that generates a CSV (Comma Separated Values) representation of the table data.
   *
   * @returns A string containing the CSV representation of the table data.
   *
   * @example
   * ```typescript
   * const csvData = table.csv;
   * console.log(csvData); // Output: "Column 1,Column 2\nValue 1,Value 2\nValue 3,Value 4"
   * ```
   */
  get csv() {
    return this.generateText("comma");
  }
  /**
   * A getter function that generates a Tab Separated Values (TSV) representation of the table data.
   *
   * @returns A string containing the TSV representation of the table data.
   *
   * @example
   * ```typescript
   * const tsvData = table.tsv;
   * console.log(tsvData); // Output: "Column 1\tColumn 2\nValue 1\tValue 2\nValue 3\tValue 4"
   * ```
   */
  get tsv() {
    return this.generateText("tab");
  }
  computeRowDeclaration(t) {
    const e = {};
    for (const s in t) {
      const n = this.dataTransform[s];
      n ? e[s] = n(t[s], t) : e[s] = t[s];
    }
    return e;
  }
  /**
   * The `downloadData` method is used to download the table data in different formats.
   *
   * @param fileName - The name of the downloaded file. Default is "BIM Table Data".
   * @param format - The format of the downloaded file. Can be "json", "tsv", or "csv". Default is "json".
   *
   * @returns - This method does not return any value.
   *
   * @example
   * ```typescript
   * table.downloadData("MyTableData", "tsv");
   * ```
   */
  downloadData(t = "BIM Table Data", e = "json") {
    let s = null;
    if (e === "json" && (s = new File(
      [JSON.stringify(this.value, void 0, 2)],
      `${t}.json`
    )), e === "csv" && (s = new File([this.csv], `${t}.csv`)), e === "tsv" && (s = new File([this.tsv], `${t}.tsv`)), !s)
      return;
    const n = document.createElement("a");
    n.href = URL.createObjectURL(s), n.download = s.name, n.click(), URL.revokeObjectURL(n.href);
  }
  getRowIndentation(t, e = this.value, s = 0) {
    for (const n of e) {
      if (n.data === t)
        return s;
      if (n.children) {
        const o = this.getRowIndentation(
          t,
          n.children,
          s + 1
        );
        if (o !== null)
          return o;
      }
    }
    return null;
  }
  getGroupIndentation(t, e = this.value, s = 0) {
    for (const n of e) {
      if (n === t)
        return s;
      if (n.children) {
        const o = this.getGroupIndentation(
          t,
          n.children,
          s + 1
        );
        if (o !== null)
          return o;
      }
    }
    return null;
  }
  connectedCallback() {
    super.connectedCallback(), this.dispatchEvent(new Event("connected"));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.dispatchEvent(new Event("disconnected"));
  }
  /**
   * Asynchronously loads data into the table based on Table.loadFunction.
   * If the data is already available, just set it in Table.data.
   *
   * @param force - A boolean indicating whether to force loading even if the table already has data.
   *
   * @returns - A promise that resolves to a boolean indicating whether the data loading was successful.
   * If the promise resolves to `true`, the data loading was successful.
   * If the promise resolves to `false`, the data loading was not successful.
   *
   * @remarks - If the table already has data and `force` is `false`, the function resolves to `false` without making any changes.
   * If the table already has data and `force` is `true`, the existing data is discarded before loading the new data.
   * If an error occurs during data loading, the function sets the `errorLoadingMessage` property with the error message and resolves to `false`.
   */
  async loadData(t = false) {
    if (this._filteredData.length !== 0 && !t || !this.loadFunction)
      return false;
    this.loading = true;
    try {
      const e = await this.loadFunction();
      return this.data = e, this.loading = false, this._errorLoading = false, true;
    } catch (e) {
      return this.loading = false, this._filteredData.length !== 0 || (e instanceof Error && this.loadingErrorElement && e.message.trim() !== "" && (this.loadingErrorElement.textContent = e.message), this._errorLoading = true), false;
    }
  }
  filter(t, e = this.filterFunction ?? this._stringFilterFunction, s = this.data) {
    const n = [];
    for (const o of s)
      if (e(t, o)) {
        if (this.preserveStructureOnFilter) {
          const r = { data: o.data };
          if (o.children) {
            const a = this.filter(
              t,
              e,
              o.children
            );
            a.length && (r.children = a);
          }
          n.push(r);
        } else if (n.push({ data: o.data }), o.children) {
          const r = this.filter(
            t,
            e,
            o.children
          );
          n.push(...r);
        }
      } else if (o.children) {
        const r = this.filter(
          t,
          e,
          o.children
        );
        this.preserveStructureOnFilter && r.length ? n.push({
          data: o.data,
          children: r
        }) : n.push(...r);
      }
    return n;
  }
  get _missingDataElement() {
    return this.querySelector("[slot='missing-data']");
  }
  render() {
    if (this.loading)
      return Ql();
    if (this._errorLoading)
      return y`<slot name="error-loading"></slot>`;
    if (this._filteredData.length === 0 && this._missingDataElement)
      return y`<slot name="missing-data"></slot>`;
    const t = document.createElement("bim-table-row");
    t.table = this, t.isHeader = true, t.data = this._headerRowData, t.style.gridArea = "Header", t.style.position = "sticky", t.style.top = "0", t.style.zIndex = "5";
    const e = document.createElement("bim-table-children");
    return e.table = this, e.data = this.value, e.style.gridArea = "Body", e.style.backgroundColor = "transparent", y`
      <div class="parent">
        ${this.headersHidden ? null : t} ${Zl()}
        <div style="overflow-x: hidden; grid-area: Body">${e}</div>
      </div>
    `;
  }
};
Ho.styles = [
  Ft.scrollbar,
  T`
      :host {
        position: relative;
        overflow: auto;
        display: block;
        pointer-events: auto;
      }

      :host(:not([data-processing])) .loader {
        display: none;
      }

      .parent {
        display: grid;
        grid-template:
          "Header" auto
          "Processing" auto
          "Body" 1fr
          "Footer" auto;
        overflow: auto;
        height: 100%;
      }

      .parent > bim-table-row[is-header] {
        color: var(--bim-table_header--c, var(--bim-ui_bg-contrast-100));
        background-color: var(
          --bim-table_header--bgc,
          var(--bim-ui_bg-contrast-20)
        );
      }

      .controls {
        display: flex;
        gap: 0.375rem;
        flex-wrap: wrap;
        margin-bottom: 0.5rem;
      }
    `
];
var K = Ho;
st([
  re()
], K.prototype, "_filteredData", 2);
st([
  f({
    type: Boolean,
    attribute: "headers-hidden",
    reflect: true
  })
], K.prototype, "headersHidden", 2);
st([
  f({ type: String, attribute: "min-col-width", reflect: true })
], K.prototype, "minColWidth", 2);
st([
  f({ type: Array, attribute: false })
], K.prototype, "columns", 1);
st([
  f({ type: Array, attribute: false })
], K.prototype, "data", 1);
st([
  f({ type: Boolean, reflect: true })
], K.prototype, "expanded", 2);
st([
  f({ type: Boolean, reflect: true, attribute: "selectable-rows" })
], K.prototype, "selectableRows", 2);
st([
  f({ attribute: false })
], K.prototype, "selection", 2);
st([
  f({ type: Boolean, attribute: "no-indentation", reflect: true })
], K.prototype, "noIndentation", 2);
st([
  f({ type: Boolean, reflect: true })
], K.prototype, "loading", 2);
st([
  re()
], K.prototype, "_errorLoading", 2);
var lc = Object.defineProperty;
var cc = Object.getOwnPropertyDescriptor;
var $i = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? cc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && lc(t, e, n), n;
};
var Bo = class extends I {
  constructor() {
    super(...arguments), this._defaultName = "__unnamed__", this.name = this._defaultName, this._hidden = false;
  }
  set hidden(t) {
    this._hidden = t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  connectedCallback() {
    super.connectedCallback();
    const { parentElement: t } = this;
    if (t && this.name === this._defaultName) {
      const e = [...t.children].indexOf(this);
      this.name = `${this._defaultName}${e}`;
    }
  }
  render() {
    return y` <slot></slot> `;
  }
};
Bo.styles = T`
    :host {
      display: block;
      height: 100%;
    }

    :host([hidden]) {
      display: none;
    }
  `;
var X = Bo;
$i([
  f({ type: String, reflect: true })
], X.prototype, "name", 2);
$i([
  f({ type: String, reflect: true })
], X.prototype, "label", 2);
$i([
  f({ type: String, reflect: true })
], X.prototype, "icon", 2);
$i([
  f({ type: Boolean, reflect: true })
], X.prototype, "hidden", 1);
var dc = Object.defineProperty;
var uc = Object.getOwnPropertyDescriptor;
var fe = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? uc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && dc(t, e, n), n;
};
var Fo = class extends I {
  constructor() {
    super(...arguments), this._switchers = [], this.bottom = false, this.switchersHidden = false, this.floating = false, this.switchersFull = false, this.onTabHiddenChange = (t) => {
      const e = t.target;
      e instanceof X && !e.hidden && (e.removeEventListener("hiddenchange", this.onTabHiddenChange), this.tab = e.name, e.addEventListener("hiddenchange", this.onTabHiddenChange));
    };
  }
  set tab(t) {
    this._tab = t;
    const e = [...this.children], s = e.find(
      (n) => n instanceof X && n.name === t
    );
    for (const n of e) {
      if (!(n instanceof X))
        continue;
      n.hidden = s !== n;
      const o = this.getTabSwitcher(n.name);
      o && o.toggleAttribute("data-active", !n.hidden);
    }
  }
  get tab() {
    return this._tab;
  }
  getTabSwitcher(t) {
    return this._switchers.find(
      (e) => e.getAttribute("data-name") === t
    );
  }
  createSwitchers() {
    this._switchers = [];
    for (const t of this.children) {
      if (!(t instanceof X))
        continue;
      const e = document.createElement("div");
      e.addEventListener("click", () => {
        this.tab === t.name ? this.toggleAttribute("tab", false) : this.tab = t.name;
      }), e.setAttribute("data-name", t.name), e.className = "switcher";
      const s = document.createElement("bim-label");
      s.textContent = t.label ?? "", s.icon = t.icon, e.append(s), this._switchers.push(e);
    }
  }
  onSlotChange(t) {
    this.createSwitchers();
    const e = t.target.assignedElements(), s = e.find((n) => n instanceof X ? this.tab ? n.name === this.tab : !n.hidden : false);
    s && s instanceof X && (this.tab = s.name);
    for (const n of e) {
      if (!(n instanceof X)) {
        n.remove();
        continue;
      }
      n.removeEventListener("hiddenchange", this.onTabHiddenChange), s !== n && (n.hidden = true), n.addEventListener("hiddenchange", this.onTabHiddenChange);
    }
  }
  render() {
    return y`
      <div class="parent">
        <div class="switchers">${this._switchers}</div>
        <div class="content">
          <slot @slotchange=${this.onSlotChange}></slot>
        </div>
      </div>
    `;
  }
};
Fo.styles = [
  Ft.scrollbar,
  T`
      * {
        box-sizing: border-box;
      }

      :host {
        background-color: var(--bim-ui_bg-base);
        display: block;
        overflow: auto;
      }

      .parent {
        display: grid;
        grid-template: "switchers" auto "content" 1fr;
        height: 100%;
      }

      :host([bottom]) .parent {
        grid-template: "content" 1fr "switchers" auto;
      }

      .switchers {
        display: flex;
        height: 2.25rem;
        font-weight: 600;
        grid-area: switchers;
      }

      .switcher {
        --bim-label--c: var(--bim-ui_bg-contrast-80);
        background-color: var(--bim-ui_bg-base);
        cursor: pointer;
        pointer-events: auto;
        padding: 0rem 0.75rem;
        display: flex;
        justify-content: center;
        transition: all 0.15s;
      }

      :host([switchers-full]) .switcher {
        flex: 1;
      }

      .switcher:hover,
      .switcher[data-active] {
        --bim-label--c: var(--bim-ui_main-contrast);
        background-color: var(--bim-ui_main-base);
      }

      .switchers bim-label {
        pointer-events: none;
      }

      :host([switchers-hidden]) .switchers {
        display: none;
      }

      .content {
        grid-area: content;
        overflow: auto;
      }

      :host(:not([bottom])) .content {
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([bottom]) .content {
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host(:not([tab])) .content {
        display: none;
      }

      :host([floating]) {
        background-color: transparent;
      }

      :host([floating]) .switchers {
        justify-self: center;
        overflow: auto;
      }

      :host([floating]:not([bottom])) .switchers {
        border-radius: var(--bim-ui_size-2xs) var(--bim-ui_size-2xs) 0 0;
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
        border-left: 1px solid var(--bim-ui_bg-contrast-20);
        border-right: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating][bottom]) .switchers {
        border-radius: 0 0 var(--bim-ui_size-2xs) var(--bim-ui_size-2xs);
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
        border-left: 1px solid var(--bim-ui_bg-contrast-20);
        border-right: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating]:not([tab])) .switchers {
        border-radius: var(--bim-ui_size-2xs);
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating][bottom]:not([tab])) .switchers {
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating]) .content {
        border: 1px solid var(--bim-ui_bg-contrast-20);
        border-radius: var(--bim-ui_size-2xs);
        background-color: var(--bim-ui_bg-base);
      }
    `
];
var Vt = Fo;
fe([
  re()
], Vt.prototype, "_switchers", 2);
fe([
  f({ type: Boolean, reflect: true })
], Vt.prototype, "bottom", 2);
fe([
  f({ type: Boolean, attribute: "switchers-hidden", reflect: true })
], Vt.prototype, "switchersHidden", 2);
fe([
  f({ type: Boolean, reflect: true })
], Vt.prototype, "floating", 2);
fe([
  f({ type: String, reflect: true })
], Vt.prototype, "tab", 1);
fe([
  f({ type: Boolean, attribute: "switchers-full", reflect: true })
], Vt.prototype, "switchersFull", 2);
var hc = (i) => i ?? M;
var pc = Object.defineProperty;
var fc = Object.getOwnPropertyDescriptor;
var It = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? fc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && pc(t, e, n), n;
};
var Uo = class extends I {
  constructor() {
    super(...arguments), this._inputTypes = [
      "date",
      "datetime-local",
      "email",
      "month",
      "password",
      "search",
      "tel",
      "text",
      "time",
      "url",
      "week"
    ], this.value = "", this.vertical = false, this._type = "text", this.onValueChange = new Event("input");
  }
  set type(t) {
    this._inputTypes.includes(t) && (this._type = t);
  }
  get type() {
    return this._type;
  }
  /**
   * Gets the query value derived from the current input value.
   * The `getQuery` function is assumed to be a utility function that takes a string as input
   * and returns a processed query value based on the input.
   *
   * @returns The processed query value derived from the current input value.
   *
   * @example
   * ```typescript
   * const textInput = new TextInput();
   * textInput.value = "Key?Value";
   * console.log(textInput.query);
   * ```
   */
  get query() {
    return en(this.value);
  }
  onInputChange(t) {
    t.stopPropagation();
    const e = t.target;
    clearTimeout(this._debounceTimeoutID), this._debounceTimeoutID = setTimeout(() => {
      this.value = e.value, this.dispatchEvent(this.onValueChange);
    }, this.debounce);
  }
  focus() {
    setTimeout(() => {
      var t;
      const e = (t = this.shadowRoot) == null ? void 0 : t.querySelector("input");
      e == null || e.focus();
    });
  }
  render() {
    return y`
      <bim-input
        .name=${this.name}
        .icon=${this.icon}
        .label=${this.label}
        .vertical=${this.vertical}
      >
        <input
          aria-label=${this.label || this.name || "Text Input"}
          .type=${this.type}
          .value=${this.value}
          placeholder=${hc(this.placeholder)}
          @input=${this.onInputChange}
        />
      </bim-input>
    `;
  }
};
Uo.styles = T`
    :host {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
      flex: 1;
      display: block;
    }

    input {
      background-color: transparent;
      outline: none;
      border: none;
      width: 100%;
      height: 100%;
      padding: 0 var(--bim-ui_size-3xs);
      border-radius: var(--bim-text-input--bdrs, var(--bim-ui_size-4xs));
      color: var(--bim-text-input--c, var(--bim-ui_bg-contrast-100));
    }

    :host(:focus) {
      --bim-input--olc: var(--bim-ui_accent-base);
    }

    /* :host([disabled]) {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
    } */
  `;
var ft = Uo;
It([
  f({ type: String, reflect: true })
], ft.prototype, "icon", 2);
It([
  f({ type: String, reflect: true })
], ft.prototype, "label", 2);
It([
  f({ type: String, reflect: true })
], ft.prototype, "name", 2);
It([
  f({ type: String, reflect: true })
], ft.prototype, "placeholder", 2);
It([
  f({ type: String, reflect: true })
], ft.prototype, "value", 2);
It([
  f({ type: Boolean, reflect: true })
], ft.prototype, "vertical", 2);
It([
  f({ type: Number, reflect: true })
], ft.prototype, "debounce", 2);
It([
  f({ type: String, reflect: true })
], ft.prototype, "type", 1);
var mc = Object.defineProperty;
var bc = Object.getOwnPropertyDescriptor;
var Vo = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? bc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && mc(t, e, n), n;
};
var Wo = class extends I {
  constructor() {
    super(...arguments), this.rows = 2, this._vertical = false;
  }
  set vertical(t) {
    this._vertical = t, this.updateChildren();
  }
  get vertical() {
    return this._vertical;
  }
  updateChildren() {
    const t = this.children;
    for (const e of t)
      this.vertical ? e.setAttribute("label-hidden", "") : e.removeAttribute("label-hidden");
  }
  render() {
    return y`
      <style>
        .parent {
          grid-auto-flow: ${this.vertical ? "row" : "column"};
          grid-template-rows: repeat(${this.rows}, 1fr);
        }
      </style>
      <div class="parent">
        <slot @slotchange=${this.updateChildren}></slot>
      </div>
    `;
  }
};
Wo.styles = T`
    .parent {
      display: grid;
      gap: 0.25rem;
    }

    ::slotted(bim-button[label]:not([vertical])) {
      --bim-button--jc: flex-start;
    }

    ::slotted(bim-button) {
      --bim-label--c: var(--bim-ui_bg-contrast-80);
    }
  `;
var Ci2 = Wo;
Vo([
  f({ type: Number, reflect: true })
], Ci2.prototype, "rows", 2);
Vo([
  f({ type: Boolean, reflect: true })
], Ci2.prototype, "vertical", 1);
var gc = Object.defineProperty;
var vc = Object.getOwnPropertyDescriptor;
var Ei = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? vc(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && gc(t, e, n), n;
};
var Go = class extends I {
  constructor() {
    super(...arguments), this._vertical = false, this._labelHidden = false;
  }
  set vertical(t) {
    this._vertical = t, this.updateChildren();
  }
  get vertical() {
    return this._vertical;
  }
  set labelHidden(t) {
    this._labelHidden = t, this.updateChildren();
  }
  get labelHidden() {
    return this._labelHidden;
  }
  updateChildren() {
    const t = this.children;
    for (const e of t)
      e instanceof Ci2 && (e.vertical = this.vertical), e.toggleAttribute("label-hidden", this.vertical);
  }
  render() {
    return y`
      <div class="parent">
        <div class="children">
          <slot @slotchange=${this.updateChildren}></slot>
        </div>
        ${!this.labelHidden && (this.label || this.icon) ? y`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
      </div>
    `;
  }
};
Go.styles = T`
    :host {
      --bim-label--fz: var(--bim-ui_size-xs);
      --bim-label--c: var(--bim-ui_bg-contrast-60);
      display: block;
      flex: 1;
    }

    :host(:not([vertical])) ::slotted(bim-button[vertical]) {
      --bim-icon--fz: var(--bim-ui_size-5xl);
      min-height: 3.75rem;
    }

    ::slotted(bim-button) {
      --bim-label--c: var(--bim-ui_bg-contrast-80);
    }

    .parent {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      align-items: center;
      padding: 0.5rem;
      height: 100%;
      box-sizing: border-box;
      justify-content: space-between;
    }

    :host([vertical]) .parent {
      flex-direction: row-reverse;
    }

    :host([vertical]) .parent > bim-label {
      writing-mode: tb;
    }

    .children {
      display: flex;
      gap: 0.25rem;
    }

    :host([vertical]) .children {
      flex-direction: column;
    }
  `;
var me = Go;
Ei([
  f({ type: String, reflect: true })
], me.prototype, "label", 2);
Ei([
  f({ type: String, reflect: true })
], me.prototype, "icon", 2);
Ei([
  f({ type: Boolean, reflect: true })
], me.prototype, "vertical", 1);
Ei([
  f({ type: Boolean, attribute: "label-hidden", reflect: true })
], me.prototype, "labelHidden", 1);
var qo = class k {
  static set config(t) {
    this._config = { ...k._config, ...t };
  }
  static get config() {
    return k._config;
  }
  static addGlobalStyles() {
    let t = document.querySelector("style[id='bim-ui']");
    if (t)
      return;
    t = document.createElement("style"), t.id = "bim-ui", t.textContent = Ft.globalStyles.cssText;
    const e = document.head.firstChild;
    e ? document.head.insertBefore(t, e) : document.head.append(t);
  }
  static defineCustomElement(t, e) {
    customElements.get(t) || customElements.define(t, e);
  }
  /**
   * @deprecated Use `Manager.init()` instead.
   */
  static registerComponents() {
    k.init();
  }
  /**
   * Initializes the BIM UI library by defining custom elements.
   * It ensures that all necessary styles and custom elements are registered for use in BIM UI components.
   *
   * @example
   * ```typescript
   * import { Manager } from "@thatopen/ui";
   * Manager.init();
   * ```
   */
  static init() {
    k.addGlobalStyles(), k.defineCustomElement("bim-button", kl), k.defineCustomElement("bim-checkbox", ae), k.defineCustomElement("bim-color-input", Bt), k.defineCustomElement("bim-context-menu", wo), k.defineCustomElement("bim-dropdown", pt), k.defineCustomElement("bim-grid", _n2), k.defineCustomElement("bim-icon", Fl), k.defineCustomElement("bim-input", Fe), k.defineCustomElement("bim-label", ce), k.defineCustomElement("bim-number-input", W), k.defineCustomElement("bim-option", H), k.defineCustomElement("bim-panel", de), k.defineCustomElement("bim-panel-section", ue), k.defineCustomElement("bim-selector", he), k.defineCustomElement("bim-table", K), k.defineCustomElement("bim-tabs", Vt), k.defineCustomElement("bim-tab", X), k.defineCustomElement("bim-table-cell", No), k.defineCustomElement("bim-table-children", Lo), k.defineCustomElement("bim-table-group", Do), k.defineCustomElement("bim-table-row", Ut), k.defineCustomElement("bim-text-input", ft), k.defineCustomElement("bim-toolbar", Ai2), k.defineCustomElement("bim-toolbar-group", Ci2), k.defineCustomElement(
      "bim-toolbar-section",
      me
    ), k.defineCustomElement("bim-viewport", Jo);
  }
  static newRandomId() {
    const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let e = "";
    for (let s = 0; s < 10; s++) {
      const n = Math.floor(Math.random() * t.length);
      e += t.charAt(n);
    }
    return e;
  }
};
qo._config = {
  sectionLabelOnVerticalToolbar: false
  // draggableToolbars: true,
  // draggablePanels: true,
};
var sn = qo;
var yc = Object.defineProperty;
var _c = Object.getOwnPropertyDescriptor;
var xn = (i, t, e, s) => {
  for (var n = s > 1 ? void 0 : s ? _c(t, e) : t, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = (s ? r(t, e, n) : r(n)) || n);
  return s && n && yc(t, e, n), n;
};
var Yo = class extends I {
  constructor() {
    super(...arguments), this.labelsHidden = false, this._vertical = false, this._hidden = false;
  }
  set vertical(t) {
    this._vertical = t, this.updateSections();
  }
  get vertical() {
    return this._vertical;
  }
  set hidden(t) {
    this._hidden = t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  // private setActivationButton() {
  //   this.activationButton.draggable = Manager.config.draggableToolbars;
  //   this.activationButton.addEventListener(
  //     "click",
  //     () => (this.hidden = !this.hidden),
  //   );
  //   this.activationButton.setAttribute("data-ui-manager-id", this._managerID);
  //   this.activationButton.addEventListener("dragstart", (e) => {
  //     const id = this.getAttribute("data-ui-manager-id");
  //     if (e.dataTransfer && id) {
  //       e.dataTransfer.setData("id", id);
  //       e.dataTransfer.effectAllowed = "move";
  //     }
  //     const containers = document.querySelectorAll("bim-toolbars-container");
  //     for (const container of containers) {
  //       if (container === this.parentElement) continue;
  //       container.dropping = true;
  //     }
  //   });
  //   this.activationButton.addEventListener("dragend", (e) => {
  //     if (e.dataTransfer) e.dataTransfer.clearData();
  //     const containers = document.querySelectorAll("bim-toolbars-container");
  //     for (const container of containers) {
  //       container.dropping = false;
  //     }
  //   });
  // }
  updateSections() {
    const t = this.children;
    for (const e of t)
      e instanceof me && (e.labelHidden = this.vertical && !sn.config.sectionLabelOnVerticalToolbar, e.vertical = this.vertical);
  }
  // firstUpdated() {
  //   this.setAttribute("data-ui-manager-id", this._managerID);
  // }
  render() {
    return y`
      <div class="parent">
        <slot @slotchange=${this.updateSections}></slot>
      </div>
    `;
  }
};
Yo.styles = T`
    :host {
      --bim-button--bgc: transparent;
      background-color: var(--bim-ui_bg-base);
      border-radius: var(--bim-ui_size-2xs);
      display: block;
    }

    :host([hidden]) {
      display: none;
    }

    .parent {
      display: flex;
      width: min-content;
      pointer-events: auto;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    :host([vertical]) {
      width: min-content;
      border-radius: var(--bim-ui_size-2xs);
      border: 1px solid var(--bim-ui_bg-contrast-20);
    }

    ::slotted(bim-toolbar-section:not(:last-child)) {
      border-right: 1px solid var(--bim-ui_bg-contrast-20);
      border-bottom: none;
    }

    :host([vertical]) ::slotted(bim-toolbar-section:not(:last-child)) {
      border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      border-right: none;
    }
  `;
var Ai2 = Yo;
xn([
  f({ type: String, reflect: true })
], Ai2.prototype, "icon", 2);
xn([
  f({ type: Boolean, attribute: "labels-hidden", reflect: true })
], Ai2.prototype, "labelsHidden", 2);
xn([
  f({ type: Boolean, reflect: true })
], Ai2.prototype, "vertical", 1);
var xc2 = Object.defineProperty;
var wc = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && xc2(t, e, n), n;
};
var Xo = class extends I {
  constructor() {
    super(), this._onResize = new Event("resize"), new ResizeObserver(() => {
      setTimeout(() => {
        this.dispatchEvent(this._onResize);
      });
    }).observe(this);
  }
  render() {
    return y`
      <div class="parent">
        <slot></slot>
      </div>
    `;
  }
};
Xo.styles = T`
    :host {
      display: grid;
      min-width: 0;
      min-height: 0;
      height: 100%;
    }

    .parent {
      overflow: hidden;
      position: relative;
    }
  `;
var Jo = Xo;
wc([
  f({ type: String, reflect: true })
], Jo.prototype, "name");
var $c = (i) => {
  const { components: t } = i, e = t.get(Ri);
  return y`
    <bim-button
      data-ui-id="import-ifc"
      label="Load IFC"
      icon="mage:box-3d-fill"
      @click=${() => {
    const n = document.createElement("input");
    n.type = "file", n.accept = ".ifc", n.onchange = async () => {
      if (n.files === null || n.files.length === 0)
        return;
      const o = n.files[0];
      n.remove();
      const r = await o.arrayBuffer(), a = new Uint8Array(r), l = await e.load(a);
      l.name = o.name.replace(".ifc", "");
    }, n.click();
  }}
    ></bim-button>
  `;
};
var Cc = (i) => St.create(
  $c,
  i
);
var Ec = Object.freeze(Object.defineProperty({
  __proto__: null,
  loadIfc: Cc
}, Symbol.toStringTag, { value: "Module" }));
var fu = {
  ...Ec
  // fragmentExploder,
};
var Ac = (i) => {
  const { components: t, actions: e, tags: s } = i, n = (e == null ? void 0 : e.dispose) ?? true, o = (e == null ? void 0 : e.download) ?? true, r = (e == null ? void 0 : e.visibility) ?? true, a = (s == null ? void 0 : s.schema) ?? true, l = (s == null ? void 0 : s.viewDefinition) ?? true, d = t.get(ut), u = document.createElement("bim-table");
  u.addEventListener("cellcreated", ({ detail: c }) => {
    const { cell: p } = c;
    p.style.padding = "0.25rem 0";
  }), u.hiddenColumns = ["modelID"], u.headersHidden = true;
  const h = [];
  for (const [, c] of d.groups) {
    if (!c)
      continue;
    const p = {
      data: {
        Name: c.name || c.uuid,
        modelID: c.uuid
      }
    };
    h.push(p);
  }
  return u.dataTransform = {
    Name: (c, p) => {
      const { modelID: b } = p;
      if (typeof b != "string")
        return c;
      const v = d.groups.get(b);
      if (!v)
        return b;
      const x = {};
      for (const A of v.items)
        x[A.id] = A.ids;
      let w;
      const { schema: m } = v.ifcMetadata;
      a && m && (w = y`
          <bim-label style="background-color: var(--bim-ui_main-base); padding: 0 0.25rem; color: var(--bim-ui_main-contrast); border-radius: 0.25rem;">${m}</bim-label>
          `);
      let g;
      if (l && "viewDefinition" in v.ifcMetadata) {
        const A = v.ifcMetadata.viewDefinition;
        g = y`
          ${A.split(",").map((O) => y`<bim-label style="background-color: var(--bim-ui_main-base); padding: 0 0.25rem; color: var(--bim-ui_main-contrast); border-radius: 0.25rem;">${O}</bim-label>`)}
        `;
      }
      let _;
      n && (_ = y`<bim-button @click=${() => d.disposeGroup(v)} icon="mdi:delete"></bim-button>`);
      let $;
      r && ($ = y`<bim-button @click=${(O) => {
        const L = t.get(_n), E = O.target;
        L.set(E.hasAttribute("data-model-hidden"), x), E.toggleAttribute("data-model-hidden"), E.icon = E.hasAttribute("data-model-hidden") ? "mdi:eye-off" : "mdi:eye";
      }} icon="mdi:eye"></bim-button>`);
      let C;
      return o && (C = y`<bim-button @click=${() => {
        const O = document.createElement("input");
        O.type = "file", O.accept = ".ifc", O.multiple = false, O.addEventListener("change", async () => {
          if (!(O.files && O.files.length === 1))
            return;
          const L = O.files[0], E = await L.arrayBuffer(), lt = await t.get(On).saveToIfc(
            v,
            new Uint8Array(E)
          ), tt = new File([lt], L.name), z = document.createElement("a");
          z.href = URL.createObjectURL(tt), z.download = tt.name, z.click(), URL.revokeObjectURL(z.href);
        }), O.click();
      }} icon="flowbite:download-solid"></bim-button>`), y`
       <div style="display: flex; flex: 1; gap: var(--bim-ui_size-4xs); justify-content: space-between; overflow: auto;">
        <div style="display: flex; flex-wrap: wrap; align-items: center; gap: 0 var(--bim-ui_size-4xs); flex-grow: 1; overflow: auto;">
          <div style="min-height: 1.75rem; overflow: auto; display: flex;">
            <bim-label style="white-space: normal;">${c}</bim-label>
          </div>
          <div style="display: flex; flex-wrap: wrap; gap: var(--bim-ui_size-4xs); overflow: auto;">
            ${w}
            ${g}
          </div>
        </div>
        <div style="display: flex; align-self: flex-start; flex-shrink: 0;">
          ${C}
          ${$}
          ${_}
        </div>
       </div>
      `;
    }
  }, u.data = h, y`
    <div>
      ${h.length === 0 ? y`<bim-label>No models has been loaded yet</bim-label>` : u}
    </div>
  `;
};
var Sc = (i, t = true) => {
  const e = St.create(
    Ac,
    i
  );
  if (t) {
    const { components: s } = i, n = s.get(ut), [, o] = e;
    n.onFragmentsLoaded.add(() => setTimeout(() => o())), n.onFragmentsDisposed.add(() => o());
  }
  return e;
};
var kc = Object.freeze(Object.defineProperty({
  __proto__: null,
  modelsList: Sc
}, Symbol.toStringTag, { value: "Module" }));
var Qo = [
  "Name",
  "ContainedInStructure",
  "ForLayerSet",
  "LayerThickness",
  "HasProperties",
  "HasAssociations",
  "HasAssignments",
  "HasPropertySets",
  "PredefinedType",
  "Quantities",
  "ReferencedSource",
  "Identification",
  (i) => i.includes("Value"),
  (i) => i.startsWith("Material"),
  (i) => i.startsWith("Relating"),
  (i) => {
    const t = ["IsGroupedBy", "IsDecomposedBy"];
    return i.startsWith("Is") && !t.includes(i);
  }
];
async function ei(i, t, e, s = Qo, n = false) {
  const o = i.get(ke), r = await t.getProperties(e);
  if (!r)
    return {
      data: { Entity: `${e} properties not found...` }
      // onRowCreated(row) {
      //   row.addEventListener("cellcreated", (event) => {
      //     if (!(event instanceof CustomEvent)) return;
      //     const { cell } = event.detail;
      //     cell.style.gridColumn = "1 / -1";
      //   });
      // },
    };
  const a = o.relationMaps[t.uuid], l = {
    data: {}
  };
  for (const d in r) {
    const u = s.map((c) => typeof c == "string" ? d === c : c(d)).includes(true);
    if (!(d === "type" || u))
      continue;
    const h = r[d];
    if (h)
      if (h.type === 5) {
        l.children || (l.children = []);
        const c = await ei(
          i,
          t,
          h.value,
          s,
          n
        );
        l.children.push(c);
      } else if (typeof h == "object" && !Array.isArray(h)) {
        const { value: c, type: p } = h;
        if (n)
          p === 1 || p === 2 || p === 3 || (l.data[d] = c);
        else {
          const b = typeof c == "number" ? Number(c.toFixed(3)) : c;
          l.data[d] = b;
        }
      } else if (Array.isArray(h))
        for (const c of h) {
          if (c.type !== 5)
            continue;
          l.children || (l.children = []);
          const p = await ei(
            i,
            t,
            c.value,
            s,
            n
          );
          l.children.push(p);
        }
      else if (d === "type") {
        const c = Bn[h];
        l.data.Entity = c;
      } else
        l.data[d] = h;
  }
  if (a && a.get(r.expressID)) {
    const d = a.get(r.expressID);
    for (const u of s) {
      const h = [];
      if (typeof u == "string") {
        const c = o._inverseAttributes.indexOf(
          u
        );
        c !== -1 && h.push(c);
      } else {
        const c = o._inverseAttributes.filter(
          (p) => u(p)
        );
        for (const p of c) {
          const b = o._inverseAttributes.indexOf(p);
          h.push(b);
        }
      }
      for (const c of h) {
        const p = d.get(c);
        if (p)
          for (const b of p) {
            const v = await ei(
              i,
              t,
              b,
              s,
              n
            );
            l.children || (l.children = []), l.children.push(v);
          }
      }
    }
  }
  return l;
}
var Oc = (i) => {
  const {
    components: t,
    fragmentIdMap: e,
    attributesToInclude: s,
    editable: n,
    tableDefinition: o
  } = i, r = t.get(ut);
  let a;
  return typeof s == "function" ? a = s(Qo) : a = s, y`<bim-table ${_t(async (d) => {
    if (!d)
      return;
    const u = d, h = [], c = [];
    for (const p in e) {
      const b = r.list.get(p);
      if (!(b && b.group))
        continue;
      const v = b.group, x = c.find((w) => w.model === v);
      if (x)
        for (const w of e[p])
          x.expressIDs.add(w);
      else {
        const w = { model: v, expressIDs: new Set(e[p]) };
        c.push(w);
      }
    }
    for (const p of c) {
      const { model: b, expressIDs: v } = p;
      for (const x of v) {
        const w = await ei(
          t,
          b,
          x,
          a,
          n
        );
        h.push(w);
      }
    }
    u.dataTransform = o, u.data = h, u.columns = [{ name: "Entity", width: "minmax(15rem, 1fr)" }];
  })}></bim-table>`;
};
var Ic = (i) => St.create(
  Oc,
  i
);
var Tc = Object.freeze(Object.defineProperty({
  __proto__: null,
  entityAttributes: Ic
}, Symbol.toStringTag, { value: "Module" }));
var bt;
var Rc = (i) => {
  const { components: t, classifications: e } = i, s = t.get(Ai), n = t.get(_n);
  bt || (bt = document.createElement("bim-table"), bt.headersHidden = true, bt.hiddenColumns = ["system"], bt.columns = ["Name", { name: "Actions", width: "auto" }], bt.dataTransform = {
    Actions: (r, a) => {
      const { system: l, Name: d } = a;
      if (!(typeof l == "string" && typeof d == "string"))
        return r;
      const u = s.list[l];
      if (!(u && u[d]))
        return r;
      const h = u[d], { map: c } = h;
      return y`
          <div>
            <bim-checkbox checked @change=${(b) => {
        const v = b.target;
        n.set(v.value, c);
      }}></bim-checkbox>
          </div>
        `;
    }
  });
  const o = [];
  for (const r of e) {
    const a = typeof r == "string" ? r : r.system, l = typeof r == "string" ? r : r.label, d = s.list[a];
    d && o.push({
      data: { Name: l, system: a },
      children: Object.keys(d).map((u) => ({ data: { Name: u, system: a, Actions: "" } }))
    });
  }
  return bt.data = o, y`${bt}`;
};
var Pc = (i, t = true) => {
  const e = St.create(
    Rc,
    i
  );
  if (t) {
    const { components: s } = i, n = s.get(ut), [, o] = e;
    n.onFragmentsDisposed.add(() => o());
  }
  return e;
};
var Nc = Object.freeze(Object.defineProperty({
  __proto__: null,
  classificationTree: Pc
}, Symbol.toStringTag, { value: "Module" }));
var Zo = async (i, t, e) => {
  var a, l, d, u;
  const s = i.get(ke), n = {
    data: { Name: (a = e.Name) == null ? void 0 : a.value },
    children: [
      { data: { Name: "Identification", Value: (l = e.Identification) == null ? void 0 : l.value } },
      { data: { Name: "Name", Value: (d = e.Name) == null ? void 0 : d.value } },
      { data: { Name: "Description", Value: (u = e.Description) == null ? void 0 : u.value } }
    ]
  }, o = s.getEntityRelations(
    t,
    e.expressID,
    "IsNestedBy"
  );
  if (!o)
    return n;
  n.children || (n.children = []);
  const r = [];
  n.children.push({ data: { Name: "Tasks" }, children: r });
  for (const h of o) {
    const c = await t.getProperties(h);
    if (!c)
      continue;
    const p = await Zo(i, t, c);
    r.push(p);
  }
  return n;
};
var Mc = async (i, t, e) => {
  const s = [];
  for (const o of e) {
    const r = await Zo(i, t, o);
    s.push(r);
  }
  return {
    data: { Name: "Tasks" },
    children: s
  };
};
var Lc = async (i, t) => {
  var s, n;
  const e = { data: { Name: "Classifications" } };
  for (const o of t) {
    const { value: r } = o.ReferencedSource, a = await i.getProperties(r);
    if (!a)
      continue;
    const l = {
      data: {
        Name: a.Name.value
      },
      children: [
        {
          data: {
            Name: "Identification",
            Value: ((s = o.Identification) == null ? void 0 : s.value) || ((n = o.ItemReference) == null ? void 0 : n.value)
          }
        },
        {
          data: {
            Name: "Name",
            Value: o.Name.value
          }
        }
      ]
    };
    e.children || (e.children = []), e.children.push(l);
  }
  return e;
};
var zc = async (i, t) => {
  const e = { data: { Name: "Materials" } };
  for (const s of t) {
    if (s.type === IFCMATERIALLAYERSETUSAGE) {
      const n = s.ForLayerSet.value, o = await i.getProperties(n);
      if (!o)
        continue;
      for (const r of o.MaterialLayers) {
        const { value: a } = r, l = await i.getProperties(a);
        if (!l)
          continue;
        const d = await i.getProperties(
          l.Material.value
        );
        if (!d)
          continue;
        const u = {
          data: {
            Name: "Layer"
          },
          children: [
            {
              data: {
                Name: "Thickness",
                Value: l.LayerThickness.value
              }
            },
            {
              data: {
                Name: "Material",
                Value: d.Name.value
              }
            }
          ]
        };
        e.children || (e.children = []), e.children.push(u);
      }
    }
    if (s.type === IFCMATERIALLIST)
      for (const n of s.Materials) {
        const { value: o } = n, r = await i.getProperties(o);
        if (!r)
          continue;
        const a = {
          data: {
            Name: "Name",
            Value: r.Name.value
          }
        };
        e.children || (e.children = []), e.children.push(a);
      }
    if (s.type === IFCMATERIAL) {
      const n = {
        data: {
          Name: "Name",
          Value: s.Name.value
        }
      };
      e.children || (e.children = []), e.children.push(n);
    }
  }
  return e;
};
var Dc = async (i, t) => {
  const e = { data: { Name: "PropertySets" } };
  for (const s of t) {
    const n = {
      data: { Name: s.Name.value }
    };
    if (s.type === IFCPROPERTYSET) {
      for (const o of s.HasProperties) {
        const { value: r } = o, a = await i.getProperties(r);
        if (!a)
          continue;
        const l = Object.keys(a).find(
          (u) => u.includes("Value")
        );
        if (!(l && a[l]))
          continue;
        const d = {
          data: {
            Name: a.Name.value,
            Value: a[l].value
          }
        };
        n.children || (n.children = []), n.children.push(d);
      }
      n.children && (e.children || (e.children = []), e.children.push(n));
    }
  }
  return e;
};
var jc = async (i, t) => {
  const e = { data: { Name: "QuantitySets" } };
  for (const s of t) {
    const n = { data: { Name: s.Name.value } };
    if (s.type === IFCELEMENTQUANTITY) {
      for (const o of s.Quantities) {
        const { value: r } = o, a = await i.getProperties(r);
        if (!a)
          continue;
        const l = Object.keys(a).find(
          (u) => u.includes("Value")
        );
        if (!(l && a[l]))
          continue;
        const d = {
          data: {
            Name: a.Name.value,
            Value: a[l].value
          }
        };
        n.children || (n.children = []), n.children.push(d);
      }
      n.children && (e.children || (e.children = []), e.children.push(n));
    }
  }
  return e;
};
var Hc = ["OwnerHistory", "ObjectPlacement", "CompositionType"];
var Ko = async (i, t) => {
  const s = { ...{
    groupName: "Attributes",
    includeClass: false
  }, ...t }, { groupName: n, includeClass: o } = s, r = { data: { Name: n } };
  o && (r.children || (r.children = []), r.children.push({
    data: {
      Name: "Class",
      Value: Bn[i.type]
    }
  }));
  for (const a in i) {
    if (Hc.includes(a))
      continue;
    const l = i[a];
    if (l && typeof l == "object" && !Array.isArray(l)) {
      if (l.type === REF)
        continue;
      const d = {
        data: { Name: a, Value: l.value }
      };
      r.children || (r.children = []), r.children.push(d);
    }
  }
  return r;
};
var ne = (i, ...t) => {
  i.children || (i.children = []), i.children.push(...t);
};
var Bc = async (i, t, e, s) => {
  const o = i.get(ke).getEntityRelations(
    t,
    e,
    "IsDefinedBy"
  );
  if (o) {
    const r = [], a = [];
    for (const u of o) {
      const h = await t.getProperties(u);
      h && (h.type === IFCPROPERTYSET && r.push(h), h.type === IFCELEMENTQUANTITY && a.push(h));
    }
    const l = await Dc(t, r);
    l.children && ne(s, l), (await jc(t, a)).children && ne(s, l);
  }
};
var Fc = async (i, t, e, s) => {
  const o = i.get(ke).getEntityRelations(
    t,
    e,
    "HasAssociations"
  );
  if (o) {
    const r = [], a = [];
    for (const u of o) {
      const h = await t.getProperties(u);
      h && (h.type === IFCCLASSIFICATIONREFERENCE && r.push(h), (h.type === IFCMATERIALLAYERSETUSAGE || h.type === IFCMATERIALLAYERSET || h.type === IFCMATERIALLAYER || h.type === IFCMATERIAL || h.type === IFCMATERIALLIST) && a.push(h));
    }
    const l = await Lc(
      t,
      r
    );
    l.children && ne(s, l);
    const d = await zc(t, a);
    d.children && ne(s, d);
  }
};
var Uc = async (i, t, e, s) => {
  const o = i.get(ke).getEntityRelations(
    t,
    e,
    "HasAssignments"
  );
  if (o) {
    const r = [];
    for (const l of o) {
      const d = await t.getProperties(l);
      d && d.type === IFCTASK && r.push(d);
    }
    const a = await Mc(i, t, r);
    a.children && ne(s, a);
  }
};
var Vc = async (i, t, e, s) => {
  const o = i.get(ke).getEntityRelations(
    t,
    e,
    "ContainedInStructure"
  );
  if (o && o[0]) {
    const r = o[0], a = await t.getProperties(r);
    if (a) {
      const l = await Ko(a, {
        groupName: "SpatialContainer"
      });
      ne(s, l);
    }
  }
};
var Ze = {};
var Wc = async (i, t) => {
  var r;
  const e = i.get(ke), s = i.get(ut), n = s.getModelIdMap(t);
  Object.keys(t).length === 0 && (Ze = {});
  const o = [];
  for (const a in n) {
    const l = s.groups.get(a);
    if (!l)
      continue;
    const d = e.relationMaps[l.uuid];
    if (!d)
      continue;
    a in Ze || (Ze[a] = /* @__PURE__ */ new Map());
    const u = Ze[a], h = n[a];
    for (const c of h) {
      let p = u.get(c);
      if (p) {
        o.push(p);
        continue;
      }
      const b = await l.getProperties(c);
      if (!b)
        continue;
      p = {
        data: {
          Name: (r = b.Name) == null ? void 0 : r.value
        }
      }, o.push(p), u.set(c, p);
      const v = await Ko(b, {
        includeClass: true
      });
      p.children || (p.children = []), p.children.push(v), d.get(c) && (await Bc(i, l, c, p), await Fc(i, l, c, p), await Uc(
        i,
        l,
        c,
        p
      ), await Vc(i, l, c, p));
    }
  }
  return o;
};
var Gc = new Event("datacomputed");
var ct;
var qc = (i) => {
  const t = {
    emptySelectionWarning: true,
    ...i
  }, { components: e, fragmentIdMap: s, emptySelectionWarning: n } = t;
  if (!ct && (ct = document.createElement("bim-table"), ct.columns = [{ name: "Name", width: "12rem" }], ct.headersHidden = true, ct.addEventListener("cellcreated", ({ detail: o }) => {
    const { cell: r } = o;
    r.column === "Name" && !("Value" in r.rowData) && (r.style.gridColumn = "1 / -1");
  }), n)) {
    const o = document.createElement("bim-label");
    o.style.setProperty("--bim-icon--c", "gold"), o.slot = "missing-data", o.icon = "ic:round-warning", o.textContent = "Select some elements to display its properties", ct.append(o);
  }
  return Wc(e, s).then((o) => {
    ct.data = o, o.length !== 0 && ct.dispatchEvent(Gc);
  }), y`${ct}`;
};
var Yc = (i) => St.create(
  qc,
  i
);
var Xc = Object.freeze(Object.defineProperty({
  __proto__: null,
  elementProperties: Yc
}, Symbol.toStringTag, { value: "Module" }));
var on = async (i, t, e, s) => {
  var d;
  const n = [], o = i.get(ke), r = await t.getProperties(e);
  if (!r)
    return n;
  const { type: a } = r, l = {
    data: {
      Entity: Bn[a],
      Name: (d = r.Name) == null ? void 0 : d.value,
      modelID: t.uuid,
      expressID: e
    }
  };
  for (const u of s) {
    const h = o.getEntityRelations(t, e, u);
    if (!h)
      continue;
    l.children || (l.children = []), l.data.relations = JSON.stringify(h);
    const c = {};
    for (const p of h) {
      const b = await on(
        i,
        t,
        p,
        s
      );
      for (const v of b)
        if (v.data.relations)
          l.children.push(v);
        else {
          const x = t.data.get(p);
          if (!x) {
            l.children.push(v);
            continue;
          }
          const w = x[1][1], m = Bn[w];
          m in c || (c[m] = []), v.data.Entity = v.data.Name, delete v.data.Name, c[m].push(v);
        }
    }
    for (const p in c) {
      const b = c[p], v = b.map((w) => w.data.expressID), x = {
        data: {
          Entity: p,
          modelID: t.uuid,
          relations: JSON.stringify(v)
        },
        children: b
      };
      l.children.push(x);
    }
  }
  return n.push(l), n;
};
var Jc = async (i, t, e, s) => {
  const n = i.get(ke), o = [];
  for (const r of t) {
    let a;
    if (s)
      a = {
        data: {
          Entity: r.name !== "" ? r.name : r.uuid
        },
        children: await on(
          i,
          r,
          s,
          e
        )
      };
    else {
      const l = n.relationMaps[r.uuid], d = await r.getAllPropertiesOfType(
        IFCPROJECT
      );
      if (!(l && d))
        continue;
      const { expressID: u } = Object.values(d)[0];
      a = {
        data: {
          Entity: r.name !== "" ? r.name : r.uuid
        },
        children: await on(
          i,
          r,
          u,
          e
        )
      };
    }
    o.push(a);
  }
  return o;
};
var dt;
var Qc = (i, t) => {
  const e = i.get(ut), { modelID: s, expressID: n, relations: o } = t.data;
  if (!s)
    return null;
  const r = e.groups.get(s);
  return r ? r.getFragmentMap([
    n,
    ...JSON.parse(o ?? "[]")
  ]) : null;
};
var Zc = (i) => {
  const { components: t, models: e, expressID: s } = i, n = i.selectHighlighterName ?? "select", o = i.hoverHighlighterName ?? "hover";
  dt || (dt = document.createElement("bim-table"), dt.hiddenColumns = ["modelID", "expressID", "relations"], dt.columns = ["Entity", "Name"], dt.headersHidden = true, dt.addEventListener("cellcreated", ({ detail: a }) => {
    const { cell: l } = a;
    l.column === "Entity" && !("Name" in l.rowData) && (l.style.gridColumn = "1 / -1");
  })), dt.addEventListener("rowcreated", (a) => {
    a.stopImmediatePropagation();
    const { row: l } = a.detail, d = t.get(xc), u = Qc(t, l);
    u && Object.keys(u).length !== 0 && (l.onmouseover = () => {
      o && (l.style.backgroundColor = "var(--bim-ui_bg-contrast-20)", d.highlightByID(
        o,
        u,
        true,
        false,
        d.selection[n] ?? {}
      ));
    }, l.onmouseout = () => {
      l.style.backgroundColor = "", d.clear(o);
    }, l.onclick = () => {
      n && d.highlightByID(
        n,
        u,
        true,
        true
      );
    });
  });
  const r = i.inverseAttributes ?? [
    "IsDecomposedBy",
    "ContainsElements"
  ];
  return Jc(t, e, r, s).then(
    (a) => dt.data = a
  ), y`${dt}`;
};
var Kc = (i, t = true) => {
  const e = St.create(
    Zc,
    i
  );
  if (t) {
    const [, s] = e, { components: n } = i, o = n.get(ut), r = n.get(ke), a = () => s({ models: o.groups.values() });
    r.onRelationsIndexed.add(a), o.onFragmentsDisposed.add(a);
  }
  return e;
};
var td = Object.freeze(Object.defineProperty({
  __proto__: null,
  relationsTree: Kc
}, Symbol.toStringTag, { value: "Module" }));
var ve = (i, t) => [...i.get(dn).list.values()].find((n) => n.world === t);
var ed = (i, t) => y`
    <bim-color-input @input=${(s) => {
  const n = s.target;
  i.color = new Color(n.color);
}} color=${t}></bim-color-input>
  `;
var id = (i, t) => {
  const { postproduction: e } = i, s = e.n8ao.configuration;
  return y`
    <bim-color-input @input=${(o) => {
    const r = o.target;
    s.color = new Color(r.color);
  }} color=${t}></bim-color-input>
  `;
};
var nd = (i, t) => {
  const { color: e, opacity: s } = JSON.parse(t), { postproduction: n } = i, { customEffects: o } = n;
  return y`
    <bim-color-input @input=${(a) => {
    const { color: l, opacity: d } = a.target;
    o.lineColor = new Color(l).getHex(), d && (o.opacity = d / 100);
  }} color=${e} opacity=${s * 100}></bim-color-input>
  `;
};
var sd = (i, t) => y`
    <bim-color-input @input=${(s) => {
  const n = s.target, o = new Color(n.color);
  i.material.uniforms.uColor.value = o;
}} color=${t}></bim-color-input>
  `;
var od = (i, t) => {
  const { postproduction: e } = i;
  return y`
    <bim-checkbox @change=${(n) => {
    const o = n.target;
    e.setPasses({ ao: o.checked });
  }} .checked=${t}></bim-checkbox>
  `;
};
var rd = (i, t) => {
  const { postproduction: e } = i;
  return y`
    <bim-checkbox @change=${(n) => {
    const o = n.target;
    e.setPasses({ gamma: o.checked });
  }} .checked=${t}></bim-checkbox>
  `;
};
var ad = (i, t) => {
  const { postproduction: e } = i;
  return y`
    <bim-checkbox @change=${(n) => {
    const o = n.target;
    e.setPasses({ custom: o.checked });
  }} .checked=${t}></bim-checkbox>
  `;
};
var gt = (i, t, e, s = () => {
}) => y`
    <bim-checkbox .checked="${e}" @change="${(o) => {
  const a = o.target.checked;
  i[t] = a, s(a);
}}"></bim-checkbox> 
  `;
var P = (i, t, e, s) => {
  const n = {
    slider: false,
    min: 0,
    max: 100,
    step: 1,
    prefix: null,
    suffix: null,
    onInputSet: () => {
    },
    ...s
  }, { slider: o, min: r, max: a, step: l, suffix: d, prefix: u, onInputSet: h } = n;
  return y`
    <bim-number-input
      .pref=${u}
      .suffix=${d}
      .slider=${o} 
      min=${r} 
      value="${e}" 
      max=${a} 
      step=${l} 
      @change="${(p) => {
    const v = p.target.value;
    i[t] = v, h(v);
  }}"
    ></bim-number-input> 
  `;
};
var ld = (i) => {
  const { components: t } = i, e = t.get(Ci);
  return y`<bim-table ${_t(async (n) => {
    var a, l, d, u, h;
    if (!n)
      return;
    const o = n;
    o.preserveStructureOnFilter = true, o.dataTransform = {
      Value: (c, p) => {
        const b = p.World, v = e.list.get(b);
        if (!v)
          return c;
        const { scene: x, camera: w, renderer: m } = v, g = p.Name;
        if (g === "Grid" && p.IsGridConfig && typeof c == "boolean") {
          const _ = ve(t, v);
          return _ ? gt(_, "visible", c) : c;
        }
        if (g === "Color" && p.IsGridConfig && typeof c == "string") {
          const _ = ve(t, v);
          return _ ? sd(_, c) : c;
        }
        if (g === "Distance" && p.IsGridConfig && typeof c == "number") {
          const _ = ve(t, v);
          return _ ? P(
            _.material.uniforms.uDistance,
            "value",
            c,
            { slider: true, min: 300, max: 1e3 }
          ) : c;
        }
        if (g === "Size" && p.IsGridConfig && typeof c == "string") {
          const _ = ve(t, v);
          if (!_)
            return c;
          const { x: $, y: C } = JSON.parse(c), A = P(
            _.material.uniforms.uSize1,
            "value",
            $,
            { slider: true, suffix: "m", prefix: "A", min: 1, max: 20 }
          ), O = P(
            _.material.uniforms.uSize2,
            "value",
            C,
            { slider: true, suffix: "m", prefix: "B", min: 1, max: 20 }
          );
          return y`
            <div style="display: flex; gap: 0.25rem; width: 100%; flex-wrap: wrap">${A}${O}</div>
          `;
        }
        if (g === "Near Frustum" && w.three instanceof PerspectiveCamera && typeof c == "number") {
          const _ = w.three;
          return P(w.three, "near", c, {
            slider: true,
            min: 0.1,
            max: 10,
            step: 0.1,
            onInputSet: () => _.updateProjectionMatrix()
          });
        }
        if (g === "Far Frustum" && w.three instanceof PerspectiveCamera && typeof c == "number") {
          const _ = w.three;
          return P(w.three, "far", c, {
            slider: true,
            min: 300,
            max: 2e3,
            step: 10,
            onInputSet: () => _.updateProjectionMatrix()
          });
        }
        if (g === "Field of View" && w.three instanceof PerspectiveCamera && typeof c == "number") {
          const _ = w.three;
          return P(w.three, "fov", c, {
            slider: true,
            min: 10,
            max: 120,
            onInputSet: () => _.updateProjectionMatrix()
          });
        }
        if (g === "Invert Drag" && w.hasCameraControls() && typeof c == "boolean")
          return gt(
            w.controls,
            "dollyDragInverted",
            c
          );
        if (g === "Dolly Speed" && w.hasCameraControls() && typeof c == "number")
          return P(w.controls, "dollySpeed", c, {
            slider: true,
            min: 0.5,
            max: 3,
            step: 0.1
          });
        if (g === "Truck Speed" && w.hasCameraControls() && typeof c == "number")
          return P(w.controls, "truckSpeed", c, {
            slider: true,
            min: 0.5,
            max: 6,
            step: 0.1
          });
        if (g === "Smooth Time" && w.hasCameraControls() && typeof c == "number")
          return P(w.controls, "smoothTime", c, {
            slider: true,
            min: 0.01,
            max: 2,
            step: 0.01
          });
        if (g === "Intensity" && typeof c == "number") {
          if (p.Light && typeof p.Light == "string") {
            const _ = x.three.children.find(
              ($) => $.uuid === p.Light
            );
            return _ && _ instanceof Light ? P(_, "intensity", c, {
              slider: true,
              min: 0,
              max: 10,
              step: 0.1
            }) : c;
          }
          if (p.IsAOConfig && m instanceof xa)
            return P(
              m.postproduction.n8ao.configuration,
              "intensity",
              c,
              { slider: true, max: 16, step: 0.1 }
            );
        }
        if (g === "Color" && typeof c == "string") {
          const _ = p.Light, $ = x.three.children.find(
            (C) => C.uuid === _
          );
          if ($ && $ instanceof Light)
            return ed($, c);
          if (p.IsAOConfig && m instanceof xa)
            return id(m, c);
        }
        if (g === "Ambient Oclussion" && typeof c == "boolean" && p.IsAOConfig && m instanceof xa)
          return od(m, c);
        if (g === "Half Resolution" && p.IsAOConfig && m instanceof xa && typeof c == "boolean")
          return gt(
            m.postproduction.n8ao.configuration,
            "halfRes",
            c
          );
        if (g === "Screen Space Radius" && p.IsAOConfig && m instanceof xa && typeof c == "boolean")
          return gt(
            m.postproduction.n8ao.configuration,
            "screenSpaceRadius",
            c
          );
        if (g === "Radius" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return P(
            m.postproduction.n8ao.configuration,
            "aoRadius",
            c,
            { slider: true, max: 2, step: 0.1 }
          );
        if (g === "Denoise Samples" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return P(
            m.postproduction.n8ao.configuration,
            "denoiseSamples",
            c,
            { slider: true, min: 1, max: 16 }
          );
        if (g === "Samples" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return P(
            m.postproduction.n8ao.configuration,
            "aoSamples",
            c,
            { slider: true, min: 1, max: 16 }
          );
        if (g === "Denoise Radius" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return P(
            m.postproduction.n8ao.configuration,
            "denoiseRadius",
            c,
            { slider: true, min: 0, max: 16, step: 0.1 }
          );
        if (g === "Distance Falloff" && p.IsAOConfig && m instanceof xa && typeof c == "number")
          return P(
            m.postproduction.n8ao.configuration,
            "distanceFalloff",
            c,
            { slider: true, min: 0, max: 4, step: 0.1 }
          );
        if (g === "Directional Light" && p.Light && typeof p.Light == "string" && typeof c == "boolean") {
          const _ = x.three.children.find(
            ($) => $.uuid === p.Light
          );
          return _ && _ instanceof Light ? gt(_, "visible", c) : c;
        }
        if (g === "Ambient Light" && p.Light && typeof p.Light == "string" && typeof c == "boolean") {
          const _ = x.three.children.find(
            ($) => $.uuid === p.Light
          );
          return _ && _ instanceof Light ? gt(_, "visible", c) : c;
        }
        if (g === "Position" && p.Light && typeof p.Light == "string" && typeof c == "string") {
          const _ = x.three.children.find(
            (q) => q.uuid === p.Light
          );
          if (!(_ && _ instanceof Light))
            return c;
          const { x: $, y: C, z: A } = JSON.parse(c), O = P(_.position, "x", $, {
            slider: true,
            prefix: "X",
            suffix: "m",
            min: -50,
            max: 50
          }), L = P(_.position, "y", C, {
            slider: true,
            prefix: "Y",
            suffix: "m",
            min: -50,
            max: 50
          }), E = P(_.position, "z", A, {
            slider: true,
            prefix: "Z",
            suffix: "m",
            min: -50,
            max: 50
          });
          return y`
            <div style="display: flex; gap: 0.25rem; width: 100%; flex-wrap: wrap">${O}${L}${E}</div>
          `;
        }
        return g === "Custom Effects" && p.IsCEConfig && m instanceof xa && typeof c == "boolean" ? ad(m, c) : g === "Color" && p.IsOutlineConfig && m instanceof xa && typeof c == "string" ? nd(m, c) : g === "Tolerance" && p.IsOutlineConfig && m instanceof xa && typeof c == "number" ? P(
          m.postproduction.customEffects,
          "tolerance",
          c,
          { slider: true, min: 0, max: 6, step: 0.01 }
        ) : g === "Outline" && p.IsOutlineConfig && m instanceof xa && typeof c == "boolean" ? gt(
          m.postproduction.customEffects,
          "outlineEnabled",
          c
        ) : g === "Gloss" && p.IsGlossConfig && m instanceof xa && typeof c == "boolean" ? gt(
          m.postproduction.customEffects,
          "glossEnabled",
          c
        ) : g === "Min" && p.IsGlossConfig && m instanceof xa && typeof c == "number" ? P(
          m.postproduction.customEffects,
          "minGloss",
          c,
          { slider: true, min: -0.5, max: 0.5, step: 0.01 }
        ) : g === "Max" && p.IsGlossConfig && m instanceof xa && typeof c == "number" ? P(
          m.postproduction.customEffects,
          "maxGloss",
          c,
          { slider: true, min: -0.5, max: 0.5, step: 0.01 }
        ) : g === "Exponent" && p.IsGlossConfig && m instanceof xa && typeof c == "number" ? P(
          m.postproduction.customEffects,
          "glossExponent",
          c,
          { slider: true, min: 0, max: 5, step: 0.01 }
        ) : g === "Gamma Correction" && p.IsGammaConfig && m instanceof xa && typeof c == "boolean" ? rd(m, c) : c;
      }
    }, o.addEventListener("cellcreated", ({ detail: c }) => {
      const p = c.cell.parentNode;
      if (!p)
        return;
      const b = p.querySelector(
        "bim-table-cell[column='Name']"
      ), v = p.querySelector(
        "bim-table-cell[column='Value']"
      );
      b && !v && (b.style.gridColumn = "1 / -1");
    });
    const r = [];
    for (const [, c] of e.list) {
      const { scene: p, camera: b, renderer: v } = c, x = ve(t, c), w = {
        data: {
          Name: c instanceof Fr && c.name || c.uuid
        },
        children: []
      };
      if (p) {
        const m = {
          data: {
            Name: "Scene"
          }
        };
        if (x) {
          const $ = {
            data: {
              Name: "Grid",
              Value: x.three.visible,
              World: c.uuid,
              IsGridConfig: true
            },
            children: [
              {
                data: {
                  Name: "Color",
                  get Value() {
                    return `#${x.material.uniforms.uColor.value.getHexString()}`;
                  },
                  World: c.uuid,
                  IsGridConfig: true
                }
              },
              {
                data: {
                  Name: "Size",
                  get Value() {
                    const C = x.material.uniforms.uSize1.value, A = x.material.uniforms.uSize2.value;
                    return JSON.stringify({ x: C, y: A });
                  },
                  World: c.uuid,
                  IsGridConfig: true
                }
              },
              {
                data: {
                  Name: "Distance",
                  Value: x.material.uniforms.uDistance.value,
                  World: c.uuid,
                  IsGridConfig: true
                }
              }
            ]
          };
          m.children || (m.children = []), m.children.push($);
        }
        const g = p.three.children.filter(
          ($) => $ instanceof DirectionalLight
        );
        for (const $ of g) {
          const C = {
            data: {
              Name: "Directional Light",
              Value: $.visible,
              World: c.uuid,
              Light: $.uuid
            },
            children: [
              {
                data: {
                  Name: "Position",
                  Value: JSON.stringify($.position),
                  World: c.uuid,
                  Light: $.uuid
                }
              },
              {
                data: {
                  Name: "Intensity",
                  Value: $.intensity,
                  World: c.uuid,
                  Light: $.uuid
                }
              },
              {
                data: {
                  Name: "Color",
                  Value: `#${$.color.getHexString()}`,
                  World: c.uuid,
                  Light: $.uuid
                }
              }
            ]
          };
          m.children || (m.children = []), m.children.push(C);
        }
        const _ = p.three.children.filter(
          ($) => $ instanceof AmbientLight
        );
        for (const $ of _) {
          const C = {
            data: {
              Name: "Ambient Light",
              Value: $.visible,
              World: c.uuid,
              Light: $.uuid
            },
            children: [
              {
                data: {
                  Name: "Intensity",
                  Value: $.intensity,
                  World: c.uuid,
                  Light: $.uuid
                }
              },
              {
                data: {
                  Name: "Color",
                  Value: `#${$.color.getHexString()}`,
                  World: c.uuid,
                  Light: $.uuid
                }
              }
            ]
          };
          m.children || (m.children = []), m.children.push(C);
        }
        m.children && ((a = m.children) == null ? void 0 : a.length) > 0 && ((l = w.children) == null || l.push(m));
      }
      if (b.three instanceof PerspectiveCamera) {
        const m = {
          data: {
            Name: "Perspective Camera"
          },
          children: [
            {
              data: {
                Name: "Near Frustum",
                Value: b.three.near,
                World: c.uuid
              }
            },
            {
              data: {
                Name: "Far Frustum",
                Value: b.three.far,
                World: c.uuid
              }
            },
            {
              data: {
                Name: "Field of View",
                Value: b.three.fov,
                World: c.uuid
              }
            }
          ]
        };
        if (b.hasCameraControls()) {
          const { controls: g } = b, _ = {
            dollyDragInverted: "Invert Drag",
            dollySpeed: "Dolly Speed",
            truckSpeed: "Truck Speed",
            smoothTime: "Smooth Time"
          };
          for (const $ in _) {
            const C = g[$];
            C != null && ((d = m.children) == null || d.push({
              data: {
                Name: _[$],
                Value: C,
                World: c.uuid
              }
            }));
          }
        }
        (u = w.children) == null || u.push(m);
      }
      if (v instanceof xa) {
        const { postproduction: m } = v, g = m.n8ao.configuration, _ = {
          data: {
            Name: "Renderer"
          },
          children: [
            {
              data: {
                Name: "Gamma Correction",
                Value: m.settings.gamma ?? false,
                World: c.uuid,
                IsGammaConfig: true
              }
            },
            {
              data: {
                Name: "Ambient Oclussion",
                Value: m.settings.ao ?? false,
                World: c.uuid,
                IsAOConfig: true
              },
              children: [
                {
                  data: {
                    Name: "Samples",
                    Value: g.aoSamples,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Color",
                    Value: `#${g.color.getHexString()}`,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Half Resolution",
                    Value: g.halfRes,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Screen Space Radius",
                    Value: g.screenSpaceRadius,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Radius",
                    Value: g.aoRadius,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Intensity",
                    Value: g.intensity,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Distance Falloff",
                    Value: g.distanceFalloff,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Denoise Samples",
                    Value: g.denoiseSamples,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                },
                {
                  data: {
                    Name: "Denoise Radius",
                    Value: g.denoiseRadius,
                    World: c.uuid,
                    IsAOConfig: true
                  }
                }
              ]
            },
            {
              data: {
                Name: "Custom Effects",
                Value: m.settings.custom ?? false,
                World: c.uuid,
                IsCEConfig: true
              },
              children: [
                {
                  data: {
                    Name: "Gloss",
                    Value: m.customEffects.glossEnabled,
                    World: c.uuid,
                    IsGlossConfig: true
                  },
                  children: [
                    {
                      data: {
                        Name: "Min",
                        Value: m.customEffects.minGloss,
                        World: c.uuid,
                        IsGlossConfig: true
                      }
                    },
                    {
                      data: {
                        Name: "Max",
                        Value: m.customEffects.maxGloss,
                        World: c.uuid,
                        IsGlossConfig: true
                      }
                    },
                    {
                      data: {
                        Name: "Exponent",
                        Value: m.customEffects.glossExponent,
                        World: c.uuid,
                        IsGlossConfig: true
                      }
                    }
                  ]
                },
                {
                  data: {
                    Name: "Outline",
                    Value: m.customEffects.outlineEnabled,
                    World: c.uuid,
                    IsOutlineConfig: true
                  },
                  children: [
                    {
                      data: {
                        Name: "Color",
                        get Value() {
                          const $ = new Color(
                            m.customEffects.lineColor
                          ), C = m.customEffects.opacity;
                          return JSON.stringify({
                            color: `#${$.getHexString()}`,
                            opacity: C
                          });
                        },
                        World: c.uuid,
                        IsOutlineConfig: true
                      }
                    },
                    {
                      data: {
                        Name: "Tolerance",
                        Value: m.customEffects.tolerance,
                        World: c.uuid,
                        IsOutlineConfig: true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        };
        (h = w.children) == null || h.push(_);
      }
      r.push(w);
    }
    o.columns = [{ name: "Name", width: "11rem" }], o.hiddenColumns = [
      "World",
      "Light",
      "IsAOConfig",
      "IsCEConfig",
      "IsGlossConfig",
      "IsOutlineConfig",
      "IsGammaConfig",
      "IsGridConfig"
    ], o.data = r;
  })} headers-hidden expanded></bim-table>`;
};
var cd = (i, t = true) => {
  const e = St.create(
    ld,
    i
  );
  if (t) {
    const [s] = e, n = () => e[1](), { components: o } = i, r = o.get(Ci);
    r.onDisposed.add(s.remove);
    for (const [, a] of r.list)
      a.onDisposed.add(n);
    s.addEventListener("disconnected", () => {
      r.onDisposed.remove(s.remove);
      for (const [, a] of r.list)
        a.onDisposed.remove(n);
    });
  }
  return e;
};
var dd = Object.freeze(Object.defineProperty({
  __proto__: null,
  worldsConfiguration: cd
}, Symbol.toStringTag, { value: "Module" }));
var mu = {
  ...kc,
  ...Tc,
  ...Nc,
  ...Xc,
  ...td,
  ...dd
};
var ii = globalThis;
var wn = ii.ShadowRoot && (ii.ShadyCSS === void 0 || ii.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var $n = Symbol();
var ps = /* @__PURE__ */ new WeakMap();
var tr = class {
  constructor(t, e, s) {
    if (this._$cssResult$ = true, s !== $n)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t, this.t = e;
  }
  get styleSheet() {
    let t = this.o;
    const e = this.t;
    if (wn && t === void 0) {
      const s = e !== void 0 && e.length === 1;
      s && (t = ps.get(e)), t === void 0 && ((this.o = t = new CSSStyleSheet()).replaceSync(this.cssText), s && ps.set(e, t));
    }
    return t;
  }
  toString() {
    return this.cssText;
  }
};
var ud = (i) => new tr(typeof i == "string" ? i : i + "", void 0, $n);
var er = (i, ...t) => {
  const e = i.length === 1 ? i[0] : t.reduce((s, n, o) => s + ((r) => {
    if (r._$cssResult$ === true)
      return r.cssText;
    if (typeof r == "number")
      return r;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + r + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(n) + i[o + 1], i[0]);
  return new tr(e, i, $n);
};
var hd = (i, t) => {
  if (wn)
    i.adoptedStyleSheets = t.map((e) => e instanceof CSSStyleSheet ? e : e.styleSheet);
  else
    for (const e of t) {
      const s = document.createElement("style"), n = ii.litNonce;
      n !== void 0 && s.setAttribute("nonce", n), s.textContent = e.cssText, i.appendChild(s);
    }
};
var fs = wn ? (i) => i : (i) => i instanceof CSSStyleSheet ? ((t) => {
  let e = "";
  for (const s of t.cssRules)
    e += s.cssText;
  return ud(e);
})(i) : i;
var { is: pd, defineProperty: fd, getOwnPropertyDescriptor: md, getOwnPropertyNames: bd, getOwnPropertySymbols: gd, getPrototypeOf: vd } = Object;
var xt = globalThis;
var ms = xt.trustedTypes;
var yd = ms ? ms.emptyScript : "";
var ji = xt.reactiveElementPolyfillSupport;
var Ce = (i, t) => i;
var pi = { toAttribute(i, t) {
  switch (t) {
    case Boolean:
      i = i ? yd : null;
      break;
    case Object:
    case Array:
      i = i == null ? i : JSON.stringify(i);
  }
  return i;
}, fromAttribute(i, t) {
  let e = i;
  switch (t) {
    case Boolean:
      e = i !== null;
      break;
    case Number:
      e = i === null ? null : Number(i);
      break;
    case Object:
    case Array:
      try {
        e = JSON.parse(i);
      } catch {
        e = null;
      }
  }
  return e;
} };
var Cn = (i, t) => !pd(i, t);
var bs = { attribute: true, type: String, converter: pi, reflect: false, hasChanged: Cn };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), xt.litPropertyMetadata ?? (xt.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
var Gt = class extends HTMLElement {
  static addInitializer(t) {
    this._$Ei(), (this.l ?? (this.l = [])).push(t);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t, e = bs) {
    if (e.state && (e.attribute = false), this._$Ei(), this.elementProperties.set(t, e), !e.noAccessor) {
      const s = Symbol(), n = this.getPropertyDescriptor(t, s, e);
      n !== void 0 && fd(this.prototype, t, n);
    }
  }
  static getPropertyDescriptor(t, e, s) {
    const { get: n, set: o } = md(this.prototype, t) ?? { get() {
      return this[e];
    }, set(r) {
      this[e] = r;
    } };
    return { get() {
      return n == null ? void 0 : n.call(this);
    }, set(r) {
      const a = n == null ? void 0 : n.call(this);
      o.call(this, r), this.requestUpdate(t, a, s);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t) {
    return this.elementProperties.get(t) ?? bs;
  }
  static _$Ei() {
    if (this.hasOwnProperty(Ce("elementProperties")))
      return;
    const t = vd(this);
    t.finalize(), t.l !== void 0 && (this.l = [...t.l]), this.elementProperties = new Map(t.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(Ce("finalized")))
      return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(Ce("properties"))) {
      const e = this.properties, s = [...bd(e), ...gd(e)];
      for (const n of s)
        this.createProperty(n, e[n]);
    }
    const t = this[Symbol.metadata];
    if (t !== null) {
      const e = litPropertyMetadata.get(t);
      if (e !== void 0)
        for (const [s, n] of e)
          this.elementProperties.set(s, n);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [e, s] of this.elementProperties) {
      const n = this._$Eu(e, s);
      n !== void 0 && this._$Eh.set(n, e);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(t) {
    const e = [];
    if (Array.isArray(t)) {
      const s = new Set(t.flat(1 / 0).reverse());
      for (const n of s)
        e.unshift(fs(n));
    } else
      t !== void 0 && e.push(fs(t));
    return e;
  }
  static _$Eu(t, e) {
    const s = e.attribute;
    return s === false ? void 0 : typeof s == "string" ? s : typeof t == "string" ? t.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    var t;
    this._$ES = new Promise((e) => this.enableUpdating = e), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), (t = this.constructor.l) == null || t.forEach((e) => e(this));
  }
  addController(t) {
    var e;
    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t), this.renderRoot !== void 0 && this.isConnected && ((e = t.hostConnected) == null || e.call(t));
  }
  removeController(t) {
    var e;
    (e = this._$EO) == null || e.delete(t);
  }
  _$E_() {
    const t = /* @__PURE__ */ new Map(), e = this.constructor.elementProperties;
    for (const s of e.keys())
      this.hasOwnProperty(s) && (t.set(s, this[s]), delete this[s]);
    t.size > 0 && (this._$Ep = t);
  }
  createRenderRoot() {
    const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return hd(t, this.constructor.elementStyles), t;
  }
  connectedCallback() {
    var t;
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t = this._$EO) == null || t.forEach((e) => {
      var s;
      return (s = e.hostConnected) == null ? void 0 : s.call(e);
    });
  }
  enableUpdating(t) {
  }
  disconnectedCallback() {
    var t;
    (t = this._$EO) == null || t.forEach((e) => {
      var s;
      return (s = e.hostDisconnected) == null ? void 0 : s.call(e);
    });
  }
  attributeChangedCallback(t, e, s) {
    this._$AK(t, s);
  }
  _$EC(t, e) {
    var o;
    const s = this.constructor.elementProperties.get(t), n = this.constructor._$Eu(t, s);
    if (n !== void 0 && s.reflect === true) {
      const r = (((o = s.converter) == null ? void 0 : o.toAttribute) !== void 0 ? s.converter : pi).toAttribute(e, s.type);
      this._$Em = t, r == null ? this.removeAttribute(n) : this.setAttribute(n, r), this._$Em = null;
    }
  }
  _$AK(t, e) {
    var o;
    const s = this.constructor, n = s._$Eh.get(t);
    if (n !== void 0 && this._$Em !== n) {
      const r = s.getPropertyOptions(n), a = typeof r.converter == "function" ? { fromAttribute: r.converter } : ((o = r.converter) == null ? void 0 : o.fromAttribute) !== void 0 ? r.converter : pi;
      this._$Em = n, this[n] = a.fromAttribute(e, r.type), this._$Em = null;
    }
  }
  requestUpdate(t, e, s) {
    if (t !== void 0) {
      if (s ?? (s = this.constructor.getPropertyOptions(t)), !(s.hasChanged ?? Cn)(this[t], e))
        return;
      this.P(t, e, s);
    }
    this.isUpdatePending === false && (this._$ES = this._$ET());
  }
  P(t, e, s) {
    this._$AL.has(t) || this._$AL.set(t, e), s.reflect === true && this._$Em !== t && (this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Set())).add(t);
  }
  async _$ET() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (e) {
      Promise.reject(e);
    }
    const t = this.scheduleUpdate();
    return t != null && await t, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var s;
    if (!this.isUpdatePending)
      return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [o, r] of this._$Ep)
          this[o] = r;
        this._$Ep = void 0;
      }
      const n = this.constructor.elementProperties;
      if (n.size > 0)
        for (const [o, r] of n)
          r.wrapped !== true || this._$AL.has(o) || this[o] === void 0 || this.P(o, this[o], r);
    }
    let t = false;
    const e = this._$AL;
    try {
      t = this.shouldUpdate(e), t ? (this.willUpdate(e), (s = this._$EO) == null || s.forEach((n) => {
        var o;
        return (o = n.hostUpdate) == null ? void 0 : o.call(n);
      }), this.update(e)) : this._$EU();
    } catch (n) {
      throw t = false, this._$EU(), n;
    }
    t && this._$AE(e);
  }
  willUpdate(t) {
  }
  _$AE(t) {
    var e;
    (e = this._$EO) == null || e.forEach((s) => {
      var n;
      return (n = s.hostUpdated) == null ? void 0 : n.call(s);
    }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t)), this.updated(t);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t) {
    return true;
  }
  update(t) {
    this._$Ej && (this._$Ej = this._$Ej.forEach((e) => this._$EC(e, this[e]))), this._$EU();
  }
  updated(t) {
  }
  firstUpdated(t) {
  }
};
Gt.elementStyles = [], Gt.shadowRootOptions = { mode: "open" }, Gt[Ce("elementProperties")] = /* @__PURE__ */ new Map(), Gt[Ce("finalized")] = /* @__PURE__ */ new Map(), ji == null || ji({ ReactiveElement: Gt }), (xt.reactiveElementVersions ?? (xt.reactiveElementVersions = [])).push("2.0.4");
var Ee = globalThis;
var fi = Ee.trustedTypes;
var gs = fi ? fi.createPolicy("lit-html", { createHTML: (i) => i }) : void 0;
var ir = "$lit$";
var yt = `lit$${Math.random().toFixed(9).slice(2)}$`;
var nr = "?" + yt;
var _d = `<${nr}>`;
var Ht = document;
var Pe = () => Ht.createComment("");
var Ne = (i) => i === null || typeof i != "object" && typeof i != "function";
var En = Array.isArray;
var xd = (i) => En(i) || typeof (i == null ? void 0 : i[Symbol.iterator]) == "function";
var Hi = `[ 	
\f\r]`;
var ye = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var vs = /-->/g;
var ys = />/g;
var Nt = RegExp(`>|${Hi}(?:([^\\s"'>=/]+)(${Hi}*=${Hi}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var _s = /'/g;
var xs = /"/g;
var sr = /^(?:script|style|textarea|title)$/i;
var wd = (i) => (t, ...e) => ({ _$litType$: i, strings: t, values: e });
var or = wd(1);
var se = Symbol.for("lit-noChange");
var j = Symbol.for("lit-nothing");
var ws = /* @__PURE__ */ new WeakMap();
var Lt = Ht.createTreeWalker(Ht, 129);
function rr(i, t) {
  if (!En(i) || !i.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return gs !== void 0 ? gs.createHTML(t) : t;
}
var $d = (i, t) => {
  const e = i.length - 1, s = [];
  let n, o = t === 2 ? "<svg>" : t === 3 ? "<math>" : "", r = ye;
  for (let a = 0; a < e; a++) {
    const l = i[a];
    let d, u, h = -1, c = 0;
    for (; c < l.length && (r.lastIndex = c, u = r.exec(l), u !== null); )
      c = r.lastIndex, r === ye ? u[1] === "!--" ? r = vs : u[1] !== void 0 ? r = ys : u[2] !== void 0 ? (sr.test(u[2]) && (n = RegExp("</" + u[2], "g")), r = Nt) : u[3] !== void 0 && (r = Nt) : r === Nt ? u[0] === ">" ? (r = n ?? ye, h = -1) : u[1] === void 0 ? h = -2 : (h = r.lastIndex - u[2].length, d = u[1], r = u[3] === void 0 ? Nt : u[3] === '"' ? xs : _s) : r === xs || r === _s ? r = Nt : r === vs || r === ys ? r = ye : (r = Nt, n = void 0);
    const p = r === Nt && i[a + 1].startsWith("/>") ? " " : "";
    o += r === ye ? l + _d : h >= 0 ? (s.push(d), l.slice(0, h) + ir + l.slice(h) + yt + p) : l + yt + (h === -2 ? a : p);
  }
  return [rr(i, o + (i[e] || "<?>") + (t === 2 ? "</svg>" : t === 3 ? "</math>" : "")), s];
};
var Me = class _Me {
  constructor({ strings: t, _$litType$: e }, s) {
    let n;
    this.parts = [];
    let o = 0, r = 0;
    const a = t.length - 1, l = this.parts, [d, u] = $d(t, e);
    if (this.el = _Me.createElement(d, s), Lt.currentNode = this.el.content, e === 2 || e === 3) {
      const h = this.el.content.firstChild;
      h.replaceWith(...h.childNodes);
    }
    for (; (n = Lt.nextNode()) !== null && l.length < a; ) {
      if (n.nodeType === 1) {
        if (n.hasAttributes())
          for (const h of n.getAttributeNames())
            if (h.endsWith(ir)) {
              const c = u[r++], p = n.getAttribute(h).split(yt), b = /([.?@])?(.*)/.exec(c);
              l.push({ type: 1, index: o, name: b[2], strings: p, ctor: b[1] === "." ? Ed : b[1] === "?" ? Ad : b[1] === "@" ? Sd : Si }), n.removeAttribute(h);
            } else
              h.startsWith(yt) && (l.push({ type: 6, index: o }), n.removeAttribute(h));
        if (sr.test(n.tagName)) {
          const h = n.textContent.split(yt), c = h.length - 1;
          if (c > 0) {
            n.textContent = fi ? fi.emptyScript : "";
            for (let p = 0; p < c; p++)
              n.append(h[p], Pe()), Lt.nextNode(), l.push({ type: 2, index: ++o });
            n.append(h[c], Pe());
          }
        }
      } else if (n.nodeType === 8)
        if (n.data === nr)
          l.push({ type: 2, index: o });
        else {
          let h = -1;
          for (; (h = n.data.indexOf(yt, h + 1)) !== -1; )
            l.push({ type: 7, index: o }), h += yt.length - 1;
        }
      o++;
    }
  }
  static createElement(t, e) {
    const s = Ht.createElement("template");
    return s.innerHTML = t, s;
  }
};
function oe(i, t, e = i, s) {
  var r, a;
  if (t === se)
    return t;
  let n = s !== void 0 ? (r = e.o) == null ? void 0 : r[s] : e.l;
  const o = Ne(t) ? void 0 : t._$litDirective$;
  return (n == null ? void 0 : n.constructor) !== o && ((a = n == null ? void 0 : n._$AO) == null || a.call(n, false), o === void 0 ? n = void 0 : (n = new o(i), n._$AT(i, e, s)), s !== void 0 ? (e.o ?? (e.o = []))[s] = n : e.l = n), n !== void 0 && (t = oe(i, n._$AS(i, t.values), n, s)), t;
}
var Cd = class {
  constructor(t, e) {
    this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = e;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t) {
    const { el: { content: e }, parts: s } = this._$AD, n = ((t == null ? void 0 : t.creationScope) ?? Ht).importNode(e, true);
    Lt.currentNode = n;
    let o = Lt.nextNode(), r = 0, a = 0, l = s[0];
    for (; l !== void 0; ) {
      if (r === l.index) {
        let d;
        l.type === 2 ? d = new qe(o, o.nextSibling, this, t) : l.type === 1 ? d = new l.ctor(o, l.name, l.strings, this, t) : l.type === 6 && (d = new kd(o, this, t)), this._$AV.push(d), l = s[++a];
      }
      r !== (l == null ? void 0 : l.index) && (o = Lt.nextNode(), r++);
    }
    return Lt.currentNode = Ht, n;
  }
  p(t) {
    let e = 0;
    for (const s of this._$AV)
      s !== void 0 && (s.strings !== void 0 ? (s._$AI(t, s, e), e += s.strings.length - 2) : s._$AI(t[e])), e++;
  }
};
var qe = class _qe {
  get _$AU() {
    var t;
    return ((t = this._$AM) == null ? void 0 : t._$AU) ?? this.v;
  }
  constructor(t, e, s, n) {
    this.type = 2, this._$AH = j, this._$AN = void 0, this._$AA = t, this._$AB = e, this._$AM = s, this.options = n, this.v = (n == null ? void 0 : n.isConnected) ?? true;
  }
  get parentNode() {
    let t = this._$AA.parentNode;
    const e = this._$AM;
    return e !== void 0 && (t == null ? void 0 : t.nodeType) === 11 && (t = e.parentNode), t;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t, e = this) {
    t = oe(this, t, e), Ne(t) ? t === j || t == null || t === "" ? (this._$AH !== j && this._$AR(), this._$AH = j) : t !== this._$AH && t !== se && this._(t) : t._$litType$ !== void 0 ? this.$(t) : t.nodeType !== void 0 ? this.T(t) : xd(t) ? this.k(t) : this._(t);
  }
  O(t) {
    return this._$AA.parentNode.insertBefore(t, this._$AB);
  }
  T(t) {
    this._$AH !== t && (this._$AR(), this._$AH = this.O(t));
  }
  _(t) {
    this._$AH !== j && Ne(this._$AH) ? this._$AA.nextSibling.data = t : this.T(Ht.createTextNode(t)), this._$AH = t;
  }
  $(t) {
    var o;
    const { values: e, _$litType$: s } = t, n = typeof s == "number" ? this._$AC(t) : (s.el === void 0 && (s.el = Me.createElement(rr(s.h, s.h[0]), this.options)), s);
    if (((o = this._$AH) == null ? void 0 : o._$AD) === n)
      this._$AH.p(e);
    else {
      const r = new Cd(n, this), a = r.u(this.options);
      r.p(e), this.T(a), this._$AH = r;
    }
  }
  _$AC(t) {
    let e = ws.get(t.strings);
    return e === void 0 && ws.set(t.strings, e = new Me(t)), e;
  }
  k(t) {
    En(this._$AH) || (this._$AH = [], this._$AR());
    const e = this._$AH;
    let s, n = 0;
    for (const o of t)
      n === e.length ? e.push(s = new _qe(this.O(Pe()), this.O(Pe()), this, this.options)) : s = e[n], s._$AI(o), n++;
    n < e.length && (this._$AR(s && s._$AB.nextSibling, n), e.length = n);
  }
  _$AR(t = this._$AA.nextSibling, e) {
    var s;
    for ((s = this._$AP) == null ? void 0 : s.call(this, false, true, e); t && t !== this._$AB; ) {
      const n = t.nextSibling;
      t.remove(), t = n;
    }
  }
  setConnected(t) {
    var e;
    this._$AM === void 0 && (this.v = t, (e = this._$AP) == null || e.call(this, t));
  }
};
var Si = class {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t, e, s, n, o) {
    this.type = 1, this._$AH = j, this._$AN = void 0, this.element = t, this.name = e, this._$AM = n, this.options = o, s.length > 2 || s[0] !== "" || s[1] !== "" ? (this._$AH = Array(s.length - 1).fill(new String()), this.strings = s) : this._$AH = j;
  }
  _$AI(t, e = this, s, n) {
    const o = this.strings;
    let r = false;
    if (o === void 0)
      t = oe(this, t, e, 0), r = !Ne(t) || t !== this._$AH && t !== se, r && (this._$AH = t);
    else {
      const a = t;
      let l, d;
      for (t = o[0], l = 0; l < o.length - 1; l++)
        d = oe(this, a[s + l], e, l), d === se && (d = this._$AH[l]), r || (r = !Ne(d) || d !== this._$AH[l]), d === j ? t = j : t !== j && (t += (d ?? "") + o[l + 1]), this._$AH[l] = d;
    }
    r && !n && this.j(t);
  }
  j(t) {
    t === j ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? "");
  }
};
var Ed = class extends Si {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t) {
    this.element[this.name] = t === j ? void 0 : t;
  }
};
var Ad = class extends Si {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t) {
    this.element.toggleAttribute(this.name, !!t && t !== j);
  }
};
var Sd = class extends Si {
  constructor(t, e, s, n, o) {
    super(t, e, s, n, o), this.type = 5;
  }
  _$AI(t, e = this) {
    if ((t = oe(this, t, e, 0) ?? j) === se)
      return;
    const s = this._$AH, n = t === j && s !== j || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, o = t !== j && (s === j || n);
    n && this.element.removeEventListener(this.name, this, s), o && this.element.addEventListener(this.name, this, t), this._$AH = t;
  }
  handleEvent(t) {
    var e;
    typeof this._$AH == "function" ? this._$AH.call(((e = this.options) == null ? void 0 : e.host) ?? this.element, t) : this._$AH.handleEvent(t);
  }
};
var kd = class {
  constructor(t, e, s) {
    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = e, this.options = s;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t) {
    oe(this, t);
  }
};
var Bi = Ee.litHtmlPolyfillSupport;
Bi == null || Bi(Me, qe), (Ee.litHtmlVersions ?? (Ee.litHtmlVersions = [])).push("3.2.0");
var Od = (i, t, e) => {
  const s = (e == null ? void 0 : e.renderBefore) ?? t;
  let n = s._$litPart$;
  if (n === void 0) {
    const o = (e == null ? void 0 : e.renderBefore) ?? null;
    s._$litPart$ = n = new qe(t.insertBefore(Pe(), o), o, void 0, e ?? {});
  }
  return n._$AI(i), n;
};
var Xt = class extends Gt {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this.o = void 0;
  }
  createRenderRoot() {
    var e;
    const t = super.createRenderRoot();
    return (e = this.renderOptions).renderBefore ?? (e.renderBefore = t.firstChild), t;
  }
  update(t) {
    const e = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this.o = Od(e, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var t;
    super.connectedCallback(), (t = this.o) == null || t.setConnected(true);
  }
  disconnectedCallback() {
    var t;
    super.disconnectedCallback(), (t = this.o) == null || t.setConnected(false);
  }
  render() {
    return se;
  }
};
var $s;
Xt._$litElement$ = true, Xt.finalized = true, ($s = globalThis.litElementHydrateSupport) == null || $s.call(globalThis, { LitElement: Xt });
var Fi = globalThis.litElementPolyfillSupport;
Fi == null || Fi({ LitElement: Xt });
(globalThis.litElementVersions ?? (globalThis.litElementVersions = [])).push("4.1.0");
var Id = { attribute: true, type: String, converter: pi, reflect: false, hasChanged: Cn };
var Td = (i = Id, t, e) => {
  const { kind: s, metadata: n } = e;
  let o = globalThis.litPropertyMetadata.get(n);
  if (o === void 0 && globalThis.litPropertyMetadata.set(n, o = /* @__PURE__ */ new Map()), o.set(e.name, i), s === "accessor") {
    const { name: r } = e;
    return { set(a) {
      const l = t.get.call(this);
      t.set.call(this, a), this.requestUpdate(r, l, i);
    }, init(a) {
      return a !== void 0 && this.P(r, void 0, i), a;
    } };
  }
  if (s === "setter") {
    const { name: r } = e;
    return function(a) {
      const l = this[r];
      t.call(this, a), this.requestUpdate(r, l, i);
    };
  }
  throw Error("Unsupported decorator location: " + s);
};
function G(i) {
  return (t, e) => typeof e == "object" ? Td(i, t, e) : ((s, n, o) => {
    const r = n.hasOwnProperty(o);
    return n.constructor.createProperty(o, r ? { ...s, wrapped: true } : s), r ? Object.getOwnPropertyDescriptor(n, o) : void 0;
  })(i, t, e);
}
function Rd(i) {
  return G({ ...i, state: true, attribute: false });
}
var Pd = class extends Object3D {
  constructor(t = document.createElement("div")) {
    super(), this.isCSS2DObject = true, this.element = t, this.element.style.position = "absolute", this.element.style.userSelect = "none", this.element.setAttribute("draggable", false), this.center = new Vector2(0.5, 0.5), this.addEventListener("removed", function() {
      this.traverse(function(e) {
        e.element instanceof Element && e.element.parentNode !== null && e.element.parentNode.removeChild(e.element);
      });
    });
  }
  copy(t, e) {
    return super.copy(t, e), this.element = t.element.cloneNode(true), this.center = t.center, this;
  }
};
new Vector3();
new Matrix4();
new Matrix4();
new Vector3();
new Vector3();
var Nd = class {
  constructor(t, e) {
    this._group = new Group(), this._frustum = new Frustum(), this._frustumMat = new Matrix4(), this._regenerateDelay = 200, this._regenerateCounter = 0, this.material = new LineBasicMaterial({ color: "#2e3338" }), this.numbers = new Group(), this.maxRegenerateRetrys = 4, this.gridsFactor = 5, this._scaleX = 1, this._scaleY = 1, this._offsetX = 0, this._offsetY = 0, this._camera = t, this._container = e;
    const s = this.newGrid(-1), n = this.newGrid(-2);
    this.grids = { main: s, secondary: n }, this._group.add(n, s, this.numbers);
  }
  set scaleX(t) {
    this._scaleX = t, this.regenerate();
  }
  get scaleX() {
    return this._scaleX;
  }
  set scaleY(t) {
    this._scaleY = t, this.regenerate();
  }
  get scaleY() {
    return this._scaleY;
  }
  set offsetX(t) {
    this._offsetX = t, this.regenerate();
  }
  get offsetX() {
    return this._offsetX;
  }
  set offsetY(t) {
    this._offsetY = t, this.regenerate();
  }
  get offsetY() {
    return this._offsetY;
  }
  get() {
    return this._group;
  }
  dispose() {
    const { main: t, secondary: e } = this.grids;
    t.removeFromParent(), e.removeFromParent(), t.geometry.dispose(), t.material.dispose(), e.geometry.dispose(), e.material.dispose();
  }
  regenerate() {
    if (!this.isGridReady()) {
      if (this._regenerateCounter++, this._regenerateCounter > this.maxRegenerateRetrys)
        throw new Error("Grid could not be regenerated");
      setTimeout(() => this.regenerate, this._regenerateDelay);
      return;
    }
    this._regenerateCounter = 0, this._camera.updateMatrix(), this._camera.updateMatrixWorld();
    const e = this._frustumMat.multiplyMatrices(
      this._camera.projectionMatrix,
      this._camera.matrixWorldInverse
    );
    this._frustum.setFromProjectionMatrix(e);
    const { planes: s } = this._frustum, n = s[0].constant * -s[0].normal.x, o = s[1].constant * -s[1].normal.x, r = s[2].constant * -s[2].normal.y, a = s[3].constant * -s[3].normal.y, l = Math.abs(n - o), d = Math.abs(a - r), { clientWidth: u, clientHeight: h } = this._container, c = Math.max(u, h), b = Math.max(l, d) / c, v = Math.ceil(Math.log10(l / this.scaleX)), x = Math.ceil(Math.log10(d / this.scaleY)), w = 10 ** (v - 2) * this.scaleX, m = 10 ** (x - 2) * this.scaleY, g = w * this.gridsFactor, _ = m * this.gridsFactor, $ = Math.ceil(d / _), C = Math.ceil(l / g), A = Math.ceil(d / m), O = Math.ceil(l / w), L = w * Math.ceil(o / w), E = m * Math.ceil(r / m), q = g * Math.ceil(o / g), lt = _ * Math.ceil(r / _), tt = [...this.numbers.children];
    for (const F of tt)
      F.removeFromParent();
    this.numbers.children = [];
    const z = [], mt = 9 * b, B = 1e4, et = q + this._offsetX, Y = Math.round(Math.abs(et / this.scaleX) * B) / B, ot = (C - 1) * g, ki = Math.round(Math.abs((et + ot) / this.scaleX) * B) / B, ar = Math.max(Y, ki).toString().length * mt;
    let Oi = Math.ceil(ar / g) * g;
    for (let F = 0; F < C; F++) {
      let D = q + F * g;
      z.push(D, a, 0, D, r, 0), D = Math.round(D * B) / B, Oi = Math.round(Oi * B) / B;
      const be = D % Oi;
      if (!(g < 1 || _ < 1) && Math.abs(be) > 0.01)
        continue;
      const Ri2 = this.newNumber((D + this._offsetX) / this.scaleX), hr = 12 * b;
      Ri2.position.set(D, r + hr, 0);
    }
    for (let F = 0; F < $; F++) {
      const D = lt + F * _;
      z.push(o, D, 0, n, D, 0);
      const be = this.newNumber(D / this.scaleY);
      let Ti = 12;
      be.element.textContent && (Ti += 4 * be.element.textContent.length);
      const Ri2 = Ti * b;
      be.position.set(o + Ri2, D, 0);
    }
    const Ii = [];
    for (let F = 0; F < O; F++) {
      const D = L + F * w;
      Ii.push(D, a, 0, D, r, 0);
    }
    for (let F = 0; F < A; F++) {
      const D = E + F * m;
      Ii.push(o, D, 0, n, D, 0);
    }
    const lr = new BufferAttribute(new Float32Array(z), 3), cr = new BufferAttribute(new Float32Array(Ii), 3), { main: dr, secondary: ur } = this.grids;
    dr.geometry.setAttribute("position", lr), ur.geometry.setAttribute("position", cr);
  }
  newNumber(t) {
    const e = document.createElement("bim-label");
    e.textContent = String(Math.round(t * 100) / 100);
    const s = new Pd(e);
    return this.numbers.add(s), s;
  }
  newGrid(t) {
    const e = new BufferGeometry(), s = new LineSegments(e, this.material);
    return s.frustumCulled = false, s.renderOrder = t, s;
  }
  isGridReady() {
    const t = this._camera.projectionMatrix.elements;
    for (let e = 0; e < t.length; e++) {
      const s = t[e];
      if (Number.isNaN(s))
        return false;
    }
    return true;
  }
};
var Md = Object.defineProperty;
var Ld = Object.getOwnPropertyDescriptor;
var Ye = (i, t, e, s) => {
  for (var n = Ld(t, e), o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && Md(t, e, n), n;
};
var An = class An2 extends Xt {
  constructor() {
    super(...arguments), this._grid = null, this._world = null, this.resize = () => {
      this._world && this._grid && this._grid.regenerate();
    };
  }
  set gridColor(t) {
    if (this._gridColor = t, !(t && this._grid))
      return;
    const e = Number(t.replace("#", "0x"));
    Number.isNaN(e) || this._grid.material.color.setHex(e);
  }
  get gridColor() {
    return this._gridColor;
  }
  set gridScaleX(t) {
    this._gridScaleX = t, t && this._grid && (this._grid.scaleX = t);
  }
  get gridScaleX() {
    return this._gridScaleX;
  }
  set gridScaleY(t) {
    this._gridScaleY = t, t && this._grid && (this._grid.scaleY = t);
  }
  get gridScaleY() {
    return this._gridScaleY;
  }
  get gridOffsetX() {
    var t;
    return ((t = this._grid) == null ? void 0 : t.offsetX) || 0;
  }
  set gridOffsetX(t) {
    this._grid && (this._grid.offsetX = t);
  }
  get gridOffsetY() {
    var t;
    return ((t = this._grid) == null ? void 0 : t.offsetY) || 0;
  }
  set gridOffsetY(t) {
    this._grid && (this._grid.offsetY = t);
  }
  set components(t) {
    this.dispose();
    const s = t.get(Ci).create();
    this._world = s, s.scene = new sa(t), s.scene.setup(), s.renderer = new Uf(t, this);
    const n = new na(t);
    s.camera = n;
    const o = new Nd(n.threeOrtho, this);
    this._grid = o, s.scene.three.add(o.get()), n.controls.addEventListener(
      "update",
      () => o.regenerate()
    ), setTimeout(async () => {
      s.camera.updateAspect(), n.set("Plan"), await n.controls.setLookAt(0, 0, 100, 0, 0, 0), await n.projection.set("Orthographic"), n.controls.dollySpeed = 3, n.controls.draggingSmoothTime = 0.085, n.controls.maxZoom = 1e3, n.controls.zoom(4);
    });
  }
  get world() {
    return this._world;
  }
  dispose() {
    var t;
    (t = this.world) == null || t.dispose(), this._world = null, this._grid = null;
  }
  connectedCallback() {
    super.connectedCallback(), new ResizeObserver(this.resize).observe(this);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.dispose();
  }
  render() {
    return or`<slot></slot>`;
  }
};
An.styles = er`
    :host {
      position: relative;
      display: flex;
      min-width: 0px;
      height: 100%;
      background-color: var(--bim-ui_bg-base);
    }
  `;
var Et = An;
Ye([
  G({ type: String, attribute: "grid-color", reflect: true })
], Et.prototype, "gridColor");
Ye([
  G({ type: Number, attribute: "grid-scale-x", reflect: true })
], Et.prototype, "gridScaleX");
Ye([
  G({ type: Number, attribute: "grid-scale-y", reflect: true })
], Et.prototype, "gridScaleY");
Ye([
  G({ type: Number, attribute: "grid-offset-x", reflect: true })
], Et.prototype, "gridOffsetX");
Ye([
  G({ type: Number, attribute: "grid-offset-y", reflect: true })
], Et.prototype, "gridOffsetY");
var zd = Object.defineProperty;
var Tt = (i, t, e, s) => {
  for (var n = void 0, o = i.length - 1, r; o >= 0; o--)
    (r = i[o]) && (n = r(t, e, n) || n);
  return n && zd(t, e, n), n;
};
var Sn = class Sn2 extends Xt {
  constructor() {
    super(...arguments), this._defaults = {
      size: 60
    }, this._cssMatrix3D = "", this._matrix = new Matrix4(), this._onRightClick = new Event("rightclick"), this._onLeftClick = new Event("leftclick"), this._onTopClick = new Event("topclick"), this._onBottomClick = new Event("bottomclick"), this._onFrontClick = new Event("frontclick"), this._onBackClick = new Event("backclick"), this._camera = null, this._epsilon = (t) => Math.abs(t) < 1e-10 ? 0 : t;
  }
  set camera(t) {
    this._camera = t, this.updateOrientation();
  }
  get camera() {
    return this._camera;
  }
  updateOrientation() {
    if (!this.camera)
      return;
    this._matrix.extractRotation(this.camera.matrixWorldInverse);
    const { elements: t } = this._matrix;
    this._cssMatrix3D = `matrix3d(
      ${this._epsilon(t[0])},
      ${this._epsilon(-t[1])},
      ${this._epsilon(t[2])},
      ${this._epsilon(t[3])},
      ${this._epsilon(t[4])},
      ${this._epsilon(-t[5])},
      ${this._epsilon(t[6])},
      ${this._epsilon(t[7])},
      ${this._epsilon(t[8])},
      ${this._epsilon(-t[9])},
      ${this._epsilon(t[10])},
      ${this._epsilon(t[11])},
      ${this._epsilon(t[12])},
      ${this._epsilon(-t[13])},
      ${this._epsilon(t[14])},
      ${this._epsilon(t[15])})
    `;
  }
  render() {
    const t = this.size ?? this._defaults.size;
    return or`
      <style>
        .face,
        .cube {
          width: ${t}px;
          height: ${t}px;
          transform: translateZ(-300px) ${this._cssMatrix3D};
        }

        .face-right {
          translate: ${t / 2}px 0 0;
        }

        .face-left {
          translate: ${-t / 2}px 0 0;
        }

        .face-top {
          translate: 0 ${t / 2}px 0;
        }

        .face-bottom {
          translate: 0 ${-t / 2}px 0;
        }

        .face-front {
          translate: 0 0 ${t / 2}px;
        }

        .face-back {
          translate: 0 0 ${-t / 2}px;
        }
      </style>
      <div class="parent">
        <div class="cube">
          <div
            class="face x-direction face-right"
            @click=${() => this.dispatchEvent(this._onRightClick)}
          >
            ${this.rightText}
          </div>
          <div
            class="face x-direction face-left"
            @click=${() => this.dispatchEvent(this._onLeftClick)}
          >
            ${this.leftText}
          </div>
          <div
            class="face y-direction face-top"
            @click=${() => this.dispatchEvent(this._onTopClick)}
          >
            ${this.topText}
          </div>
          <div
            class="face y-direction face-bottom"
            @click=${() => this.dispatchEvent(this._onBottomClick)}
          >
            ${this.bottomText}
          </div>
          <div
            class="face z-direction face-front"
            @click=${() => this.dispatchEvent(this._onFrontClick)}
          >
            ${this.frontText}
          </div>
          <div
            class="face z-direction face-back"
            @click=${() => this.dispatchEvent(this._onBackClick)}
          >
            ${this.backText}
          </div>
        </div>
      </div>
    `;
  }
};
Sn.styles = er`
    :host {
      position: absolute;
      z-index: 999;
      bottom: 1rem;
      right: 1rem;
    }

    .parent {
      perspective: 400px;
    }

    .cube {
      position: relative;
      transform-style: preserve-3d;
    }

    .face {
      position: absolute;
      display: flex;
      justify-content: center;
      user-select: none;
      align-items: center;
      cursor: pointer;
      text-align: center;
      transition: all 0.2s;
      color: var(--bim-view-cube--c, white);
      font-size: var(--bim-view-cube--fz, --bim-ui_size-2xl);
    }

    .x-direction {
      // background-color: var(--bim-view-cube_x--bgc, #c93830DD);
      background-color: var(--bim-view-cube_x--bgc, #01a6bcde);
    }

    .x-direction:hover {
      background-color: var(--bim-ui_accent-base, white);
    }

    .y-direction {
      // background-color: var(--bim-view-cube_y--bgc, #54ff19DD);
      background-color: var(--bim-view-cube_y--bgc, #8d0ec8de);
    }

    .y-direction:hover {
      background-color: var(--bim-ui_accent-base, white);
    }

    .z-direction {
      // background-color: var(--bim-view-cube_z--bgc, #3041c9DD);
      background-color: var(--bim-view-cube_z--bgc, #2718afde);
    }

    .z-direction:hover {
      background-color: var(--bim-ui_accent-base, white);
    }

    .face-front {
      transform: rotateX(180deg);
    }

    .face-back {
      transform: rotateZ(180deg);
    }

    .face-top {
      transform: rotateX(90deg);
    }

    .face-bottom {
      transform: rotateX(270deg);
    }

    .face-right {
      transform: rotateY(-270deg) rotateX(180deg);
    }

    .face-left {
      transform: rotateY(-90deg) rotateX(180deg);
    }
  `;
var it = Sn;
Tt([
  G({ type: Number, reflect: true })
], it.prototype, "size");
Tt([
  G({ type: String, attribute: "right-text", reflect: true })
], it.prototype, "rightText");
Tt([
  G({ type: String, attribute: "left-text", reflect: true })
], it.prototype, "leftText");
Tt([
  G({ type: String, attribute: "top-text", reflect: true })
], it.prototype, "topText");
Tt([
  G({ type: String, attribute: "bottom-text", reflect: true })
], it.prototype, "bottomText");
Tt([
  G({ type: String, attribute: "front-text", reflect: true })
], it.prototype, "frontText");
Tt([
  G({ type: String, attribute: "back-text", reflect: true })
], it.prototype, "backText");
Tt([
  Rd()
], it.prototype, "_cssMatrix3D");
var gu = class {
  /**
   * Initializes the custom elements for the BIM application.
   *
   * @remarks
   * This method should be called once during the application's initialization.
   *
   */
  static init() {
    sn.defineCustomElement("bim-view-cube", it), sn.defineCustomElement("bim-world-2d", Et);
  }
};
export {
  gu as Manager,
  it as ViewCube,
  Et as World2D,
  fu as buttons,
  mu as tables
};
/*! Bundled license information:

@thatopen/ui-obc/dist/index.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
  (**
  * (c) Iconify
  *
  * For the full copyright and license information, please view the license.txt
  * files at https://github.com/iconify/iconify
  *
  * Licensed under MIT.
  *
  * @license MIT
  * @version 2.0.0
  *)
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=@thatopen_ui-obc.js.map
